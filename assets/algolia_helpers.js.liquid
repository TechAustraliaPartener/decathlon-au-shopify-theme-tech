/* See https://community.algolia.com/shopify/hogan-helpers.html */

(function (algolia) {
  'use strict';

  var _ = algolia._;

  var formatPrice = function formatPrice(value) {
    return algolia.formatMoney(+value * 100);
  };

  function formattedPriceWithComparison(price, compare_at_price, price_ratio) {
    var comparing = +compare_at_price && +compare_at_price > +price,
      discount_ratio = 1.0 - price_ratio,
      res = formatPrice(price);
      if (comparing) {
        res += ' <span class="ais-hit--price-striked"><span>' + formatPrice(compare_at_price) + '</span></span> ';
        res += ' <span class="ais-hit--price-discount" style="font-weight: ' + (Math.floor(discount_ratio * 10) * 100) + ';">-' + Math.floor(discount_ratio * 100) + '%</span>';
      }

    return res;
  }

  function removeFromString(arr,str){
    let regex = new RegExp("\\b"+arr.join('|')+"\\b","gi")
    return str.replace(regex, '')
  }

  function removeHTMLTags(htmlText) {
    var html = htmlText;
    var div = document.createElement("div");
    div.innerHTML = html;
    var text = div.textContent || div.innerText || "";
    return text;
}


  var escapeHtml = function escapeHtml(unsafe) {
    return (unsafe || '')
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;');
  }

  function removeUnwantedTagsForDisplay(tag) {
    var invalidKeywords = window.vars.ecoHideContent['eco_hide_tags'] || [];

    return !invalidKeywords.includes(tag.toUpperCase())
  }

  algolia.helpers = {
    formatNumber: function formatNumber(text, render) {
      return Number(render(text)).toLocaleString();
    },
    formattedPrice: function formattedPrice(text, render) {
      return formatPrice(render(text));
    },
    formattedPriceWithoutDecimals: function formattedPriceWithoutDecimals(text, render) {
      return formatPrice(render(text)).replace(/\.\d+$/, '');
    },
    autocompletePrice: function autocompletePrice(text, render) {
      if (this._distinct) {
        var min = this.variants_min_price;
        var max = this.variants_max_price;
        var current_price = this.price;
        var compare_at_price = this.compare_at_price;
        if (min !== max) {
          return formatPrice(min) + ' - ' + formatPrice(max);
        } else if (current_price < compare_at_price && compare_at_price > 0) {
          return formatPrice(current_price) + ' <del>' + formatPrice(compare_at_price) + '</del>';
        }
      }
      return formattedPriceWithComparison(this.price, null);
    },
    priceHide: function priceHide(text, render) {
      if (this.price === 0 || this.price_max === 0) {
        return 'display-none';
      }
      return '';
    },
    instantsearchPrice: function instantsearchPrice(text, render) {
      if (this._distinct) {
        var min = this.variants_min_price;
        var max = this.variants_max_price;
        if (min !== max) {
          return formatPrice(min) + ' - ' + formatPrice(max);
        }
      }
      return formattedPriceWithComparison(this.price, this.compare_at_price, this.price_ratio);
    },
    instantsearchLink: function instantsearchLink() {
      var addVariantId = !this._distinct && this.objectID !== this.id;
      return '/products/' + this.handle + (addVariantId ? ('?variant=' + this.objectID) : '');
    },
    fullTitle: function fullTitle() {
      var res = this.title;
      if (!this._distinct && this.variant_title && this.variant_title !== 'Default Title' && this.variant_title !== 'Default') {
        res += ' (' + this.variant_title + ')';
      }

      return escapeHtml(res);
    },
    fullHTMLTitle: function fullHTMLTitle() {
      var invalidKeywords = window.vars.ecoHideContent['eco_hide_strings'] || [];

      var titleWithoutHTML = removeHTMLTags(this._highlightResult.title.value);

      // console.log(titleWithoutHTML);

      var res = removeFromString(invalidKeywords,titleWithoutHTML);

      // console.log('this._highlightResult.title.value')
      // console.log(this._highlightResult.title.value)
      // console.log(res)

      if (!this._distinct && this.variant_title && this.variant_title !== 'Default Title' && this.variant_title !== 'Default') {
        res += ' <span class="algolia-variant">(' + this._highlightResult.variant_title.value + ')est</span>';
      }

      return res;
    },
    floor: function floor(text, render) {
      return '' + Math.floor(+render(text));
    },
    ceil: function ceil(text, render) {
      return '' + Math.ceil(+render(text));
    },
    sizedImage: function sizedImage(text, render) {
      var image = this._distinct ? this.product_image : this.image;
      if (!image) {
        return 'http://cdn.shopify.com/s/images/admin/no-image-compact.gif';
      }
      var size = render(text).replace(/^\s+|\s+$/g, ''); // Render and trim
      if (size === 'original') {
        return image;
      }
      return image.replace(/\/(.*)\.(\w{2,4})/g, '/$1_' + size + '.$2');
    },
    handleize: function handleize(text, render) {
      return render(text).toLowerCase().replace(/[^\w\u00C0-\u024f]+/g, "-").replace(/^-+|-+$/g, "").toLocaleString();
    },
    lowercase: function lowercase(text, render) {
      return render(text).toLowerCase().toLocaleString();
    },
    label: function label() {
      let labels = ((this || {}).named_tags || {}).label;
      let tags = (this || {}).tags;
      let maxCompareAtPrice = (this || {}).variants_compare_at_price_max 

      tags = tags ? (Array.isArray(tags) ? tags : [tags]) : [];
      let hasSaleTag = tags.some(tag => tag.toLowerCase() === 'clearance') || tags.some(tag => tag.toLowerCase() === 'sale');
      let isRealSale = maxCompareAtPrice > 0;

      let labelsOutput = '';


      // console.log('labels before')
      // console.log(labels)

      labels = labels ? (Array.isArray(labels) ? labels.filter(removeUnwantedTagsForDisplay) : [labels].filter(removeUnwantedTagsForDisplay)) : [];
      const comboClass = labels.length > 1 ? `label_combo_${ labels.map(label => handleize(label)).join('-') }` : '';

      // console.log('labels')
      // console.log(labels)

      let innerLabels = labels.map(label => {
        return `<div class="ais-hit--label label_${ handleize(label) }">${ label }</div>`;
      });
      if (hasSaleTag && isRealSale) {
        // COLLECTIONS & SEARCH
        innerLabels.push(`<div class="ais-hit--label clearance">{{ 'products.product.label_clearance' | t }}</div>`);
      }
      innerLabels = innerLabels.slice(0, 2);

      labelsOutput = `<div class="ais-tag-combo ${ comboClass }">${ innerLabels.join('') }</div>`;

      return labelsOutput;
    },
    rating: function rating() {
      if (!this || !this.meta || !this.meta.ratings || !this.meta.reviews.product_rating) {
        return '';
      }

      var rating = this.meta.reviews.product_rating;
      var width = rating * 20;

      if (!!this && !!this.meta && !!this.meta.reviews && !!this.meta.reviews.ratings_count) {
        var ratingsCount = this.meta.reviews.ratings_count;
      }

      var productRating = [
        '<div class="de-u-flex de-u-flexAlignItemsCenter de-u-spaceTop06 de-u-lineHeight1 ais-rating">',
        '<span class="de-StarRating de-u-spaceRight06 de-StarRating--small">',
        '<span class="de-StarRating-fill" style="width: ' + width + '%"></span>',
        '</span>',
        '<span class="de-u-textMedium de-u-textSelectNone de-u-textDarkGray de-u-textShrink2 de-u-md-textShrink1">',
        (ratingsCount || ''),
        '<span class="de-u-hidden">Reviews</span>',
        '</span>',
        '</div>'
      ];

      return productRating.join('');
    },
    carousel: function() {
      let product = this;
      let variantImages = product.meta.variants?.images ? JSON.parse(product.meta.variants.images) : null;
      let html = '';

      if (variantImages){
        let variantThumbs = 'thumbs' in variantImages ? variantImages.thumbs : [];

        console.log('carousel init...');
        console.log(product);
        console.log(variantThumbs);
        let modifierClasses = '';

        if(variantThumbs.length == 1) {
          modifierClasses += ' --hide-main-nav-arrows'
        }

        html += '<section class="main-carousel collection-carousel splide'+ modifierClasses +'">';
        html += '<div class="splide__track">';
        html += '<ul class="splide__list">';

        variantThumbs.forEach((variant) => {
          html += '<li class="splide__slide">';
          html += '<a href="/products/' + product.handle + '?source=algolia">';
          html += '<img alt="' + product.title + '" src="' + variant.filename + '" onError="this.onerror=null;this.src=\'' + product.product_image + '\'" style="max-width: 249.21px; max-height: 249.21px;">';
          html += '</a>';
          html += '</li>';
        });

        html += '</ul>';
        html += '</div>';
        html += '</section>';
      }
      else {
        let modifierClasses = '';
        html += '<section class="main-carousel collection-carousel splide'+ modifierClasses +'">';
        html += '<div class="splide__track">';
        html += '<ul class="splide__list">';
        html += '<li class="splide__slide">';
        html += '<a href="/products/' + product.handle + '?source=algolia">';
        html += '<img alt="'+ product.title + '" src="' + product.product_image +'" style="max-width: 249.21px; max-height: 249.21px;">';
        html += '</a>';
        html += '</li>';
        html += '</ul>';
        html += '</div>';
        html += '</section>';
      }


      return html;
    },
    carouselThumbs: function() {
      let product = this;
      let variantImages = product.meta.variants?.images ? JSON.parse(product.meta.variants.images) : null;
      let html = '';

      if (variantImages){
        let variantThumbs = 'thumbs' in variantImages ? variantImages.thumbs : [];
        let modifierClasses = '';
        
        if(variantThumbs.length < 5) {
          modifierClasses += ' --hide-thumbnail-nav-arrows'
        }

        if(variantThumbs.length < 4) {
          modifierClasses += ' --thumbs-less-than-max'
        }

        console.log('carousel thumbs init...');
        console.log(product);
        console.log(variantThumbs);


        html += '<section class="thumbnail-carousel collection-carousel splide '+ modifierClasses +'" data-variants-count="'+ variantThumbs.length +'">';
        html += '<div class="splide__track">';
        html += '<ul class="splide__list">';

        variantThumbs.forEach((variant) => {
          html += '<li class="splide__slide">';
          html += '<img alt="' + product.title + '" src="' + variant.filename + '" onError="this.onerror=null;this.src=\'' + product.product_image + '\'">';
          html += '</li>';
        });

        html += '</ul>';
        html += '</div>';
        html += '</section>';
      }
      else {
        let modifierClasses = ' --hide-thumbnail-nav-arrows'
        html += '<section class="thumbnail-carousel collection-carousel splide '+ modifierClasses +'" data-variants-count="1">';
        html += '<div class="splide__track">';
        html += '<ul class="splide__list">';
        html += '<li class="splide__slide">';
        html += '<img alt="'+ product.title + '" src="' + product.product_image + '">';
        html += '</li>';
        html += '</ul>';
        html += '</div>';
        html += '</section>';
      }


      return html;
    },
    thumbnails: function thumbnails() {
      var product = this;

      var colorValueTags = product.named_tags.MODEL;
      colorValueTags = Array.isArray(colorValueTags) ? colorValueTags : [colorValueTags];
      var colors = colorValueTags.length - 1;


      /* var variantImages = (((this || {}).meta || {}).variants || {}).images;

      if (!variantImages) { */

      /* Null checker for product_image. If a product has no images, it uses Shopify's default "No Image" Placeholder */
      var imgUrl = product && product.product_image ? product.product_image.replace('.jpg', '_medium.jpg') : '';

      var html = ['<div class="de-SwatchObjects de-SwatchObjects--productTile de-u-padEnds06 js-de-ColorSwatches">',
        '<a class="de-SwatchObjects-item de-ColorSwatches-color" aria-label="Colors available" title="' + product.title + '" href="' + '/products/' + product.handle + '">',
        '<img class="de-SwatchObject-image de-u-block" src="' + imgUrl + '" alt="' + product.title + '">',
        '</a>'].join('');

        if (colorValueTags.length > 1) {

          var colourOrColours = (colorValueTags.length > 2) ? 'Colours' : 'Colour';
  
          html += ['<span class="wrap">',
            '<a class="de-SwatchObjects-item de-ColorSwatches-color de-u-textDarkGray" ' + 'href="' + '/products/' + product.handle + '"' + '>',
            '<span aria-hidden="true">+</span>',
            colors,
            '</a>',
            '<a class="de-ColorSwatches-color label" style="color:#464646;" ' + 'href="' + '/products/' + product.handle + '"' + '>',
            colourOrColours,
            '</a>',
            '</span>'
          ].join('');
        }
  
        return html + '</div>';
      /* }

      variantImages = variantImages.split('||');
      var variantImagesWithInfo = variantImages.map(function(image) {
        var imageWithInfo = image.split('|');

        var imageUrl = new URL(imageWithInfo[2].toLowerCase());
        imageUrl.searchParams.set('f', '{{ settings.algolia_variant_image_dimensions }}');

        return {
          id: imageWithInfo[0],
          colour: imageWithInfo[1],
          image: imageUrl
        }
      });

      var thumbnailsDisplay = [
        '<div class="de-SwatchObjects de-SwatchObjects--productTile de-u-padEnds06 js-de-ColorSwatches">'
      ];

      var variantThumbnailsDisplay = variantImagesWithInfo.map(function(info) {
        return [
          '<a class="de-SwatchObjects-item de-ColorSwatches-color js-de-ColorSwatchList-action" aria-label="Colors available" title="' + info.colour + '" href="' + '/products/' + product.handle + '?variant=' + info.id + '">',
            '<img class="de-SwatchObject-image de-u-block" src="' + info.image + '">',
          '</a>'
        ];
      });

      var diff = variantThumbnailsDisplay.length - 3;

      if (diff > 0) {
        variantThumbnailsDisplay = variantThumbnailsDisplay.slice(0, 3);
        variantThumbnailsDisplay.push([
          '<a class="de-SwatchObjects-item de-ColorSwatches-color de-u-textDarkGray" href="' + '/products/' + product.handle + '">',
            '<span aria-hidden="true">+</span>' + diff + '<span class="de-u-hiddenVisually">more available colors</span>',
          '</a>'
        ].join(''));
      }

      variantThumbnailsDisplay.slice(0, 3);

      thumbnailsDisplay.push(variantThumbnailsDisplay.join(''));
      thumbnailsDisplay.push('</div>');

      return thumbnailsDisplay.join('');
      */
    },
    transformName: function transformName(text, render) {
      let nameParts = render(text).split('|');

      let facets = algoliaShopify.instantsearch.facets.list;
      var result = facets.find(function (facet) {
        return facet.title === nameParts[0];
      });

      var returnName = nameParts[1];

      //console.log(window.vars.filterMapping, result.name, window.vars.filterMapping[result.name], nameParts[0], nameParts[1]);

      if (result && result.name && window.vars.filterMapping && window.vars.filterMapping[result.name] && window.vars.filterMapping[result.name][nameParts[1]]) {
        returnName = window.vars.filterMapping[result.name][nameParts[1]];
      }

      return returnName.toLocaleString();
    },
    nameAsColour: function nameAsColour(text, render) {
      let nameAsColour = render(text);

      if (nameAsColour.indexOf('#') > -1) {
        return nameAsColour.toLocaleString();
      }

      return '';
    },
    subBrandLogo: function subBrandLogo(text, render) {
      var no_vendor_testing = 'testing-decathlon-usa';
      var no_vendor_production = 'decathlon-usa';
      var brand_logo_name = this.vendor.toLowerCase().replace(/[^\w\u00C0-\u024f]+/g, "-").replace(/^-+|-+$/g, "").toLocaleString().replace(/-/g, '');
      const htmlBrand1 = '<header class="decathlon-product-header"><div class="col decathlon-product-header__brand-icon">';
      const htmlBrand2 = '</div><div class="col"><a ';
      const htmlBrand3 = ' class="decathlon-product-header__brand-link"><span>{{ 'products.product_tile.brand_learn_more' | t }}</span></a></div></header>'
      
      if (this.vendor != no_vendor_testing && this.vendor != no_vendor_production && (((window || {}).vars || {}).subBrandLogos || {})[brand_logo_name]) {

          return render( htmlBrand1 + window.vars.subBrandLogos[brand_logo_name] + htmlBrand2 + render(window.vars.subBrandLink[brand_logo_name]) + htmlBrand3);

      } else {
        {% comment %} Return Decathlon logo{% endcomment %}
        let decathlon_Logo = render(`<svg viewBox="0 0 109.42541 24" width="109.42541" height="24" role="img" class="de-u-spaceTop04 de-subBrandLogo"
                            data-gtm-event="customer-interaction"
                            data-gtm-id="Decathlon Brand | https://${Shopify.shop + '/products/' + this.handle}"
                            data-gtm-category="{{ data_gtm_category }}"
                            data-gtm-delegate="child"
                            data-gtm-actions="click"
                          >
                            <title>Decathlon</title>
                            <path d="M42.18,3.855l-6.09,10.28a4.89,4.89,0,0,1-3.77,2.15,4.46,4.46,0,0,1-4.45009-4.46989L27.87,11.795a4.38,4.38,0,0,1,4.35-4.3,5.52,5.52,0,0,1,3.58,1.59,5.13032,5.13032,0,0,1,1.06,1.12l2.23-3.74A6.85042,6.85042,0,0,0,38,5.535a9,9,0,0,0-5.71-2.06,8.55,8.55,0,0,0-7,3.37,7.64,7.64,0,0,0-1.74,5,8.35,8.35,0,0,0,2.22,5.71,9.39,9.39,0,0,0,6.38,2.8,9.46,9.46,0,0,0,5-1.5,9.18,9.18,0,0,0,1.55-1.26h3.87v2.34h4V3.855Zm.39,10.37H40.44l2.13-3.64Z"/>
                            <polygon points="50.44 20.025 50.44 7.655 47.31 7.655 47.31 3.915 57.77 3.915 57.77 7.655 54.57 7.655 54.57 20.025 50.44 20.025 50.44 20.025"/>
                            <polygon points="66.86 13.865 62.63 13.865 62.63 20.025 58.5 20.025 58.5 3.915 62.63 3.915 62.63 10.035 66.86 10.035 66.86 3.915 71.01 3.915 71.01 20.025 66.86 20.025 66.86 13.865 66.86 13.865"/>
                            <path d="M105.28,3.915v9l-6.19-9H95.37v5.44a8.3201,8.3201,0,0,0-2.2-3.35,9,9,0,0,0-12.17,0,7.89,7.89,0,0,0-2.57,5.83,8.32,8.32,0,0,0,1.33,4.66H76.6V3.915H72.5v16.11h8.92v-1.7a8.62,8.62,0,0,0,5.7,2,8.78,8.78,0,0,0,6.22-2.52,8.12008,8.12008,0,0,0,2-3.27v5.49h4.12v-9l6.29,9h3.64V3.915ZM87.12,16.335a4.51,4.51,0,0,1-4.44-4.49,4.42,4.42,0,1,1,4.44,4.49Z"/>
                            <path d="M23.62,7.405V3.855H14.43v6.62a7.5,7.5,0,0,0-2.35-4.63c-1.75-1.59-3.63-1.93-6.31-1.93H0v16.11H6.34c2.37,0,4-.32,5.77-2a7.62,7.62,0,0,0,2.32-4.5v6.4h9.19v-3.45H18.49v-3h4.45v-3.45H18.49V7.405ZM5.79,16.495H4.13V7.385H5.77c3,0,4.67,1.63,4.67,4.53C10.44,15.085,8.95,16.495,5.79,16.495Z"/>
                          </svg>`);
        if(this.vendor == '' || this.vendor == "Decathlon"){
          {% if settings.schema_algolia_default_logo %}
            return htmlBrand1 +'<img src="{{ settings.schema_algolia_default_logo | img_url: 'medium' }}" alt="Decathlon" class="schema-algolia-brand">'+ htmlBrand2 + '{{ settings.schema_algolia_default_link }}' + htmlBrand3;
          {% else %}
            return render( htmlBrand1 + decathlon_Logo + htmlBrand2 + '{{ settings.schema_algolia_default_link }}' + htmlBrand3);
          {% endif %}
        } else {
          return render( htmlBrand1 + '<div class="h3 vendor_logo_fallback">' + this.vendor + '</div>' + htmlBrand2 + '/pages/' + this.vendor + htmlBrand3);
       
        }
          
          
      }

    },
    getShippingInfo: function getShippingInfo() {
      var price = this.price;
      var weight = this.grams;
      var freeShippingSettings = window.vars.freeShippingSettings;

      const { free_shipping_message, free_shipping_threshold_message } = window.vars.translations.products.delivery_text;

      if (price >= freeShippingSettings.minPrice && weight <= freeShippingSettings.maxWeight) {
        return `<div class="product-tile-shipping-info de-u-textShrink1 de-u-textMedium">${ free_shipping_message }</div>`
      } else {
        return `<div class="product-tile-shipping-info de-u-textShrink1 de-u-textMedium">${ free_shipping_threshold_message.replace('[threshold]', freeShippingSettings.minPrice) }</div>`
      }
    },
    getClickAndCollectInfo: function getClickAndCollectInfo() {
      const { free_pickup } = window.vars.translations.products.delivery_text;
      return `<div class="product-tile-shipping-info de-u-textShrink1 de-u-textMedium">${ free_pickup }</div>`
    },
    getRRPPrices: function getRRPPrices() {
      console.log('Checking RRP');
      try {
        if (!window.vars.show_product_rrp_in_algolia_search_result) {
          console.log('RRP is disabled in the theme settings');
          return ''
        }

        if (!this || !this.meta || !this.meta.global || !this.meta.global.model_RRPprices) {
          console.log('No RRP', this.meta.global.model_RRPprices);
          return '';
        }

        var rrp_prices = JSON.parse(this.meta.global.model_RRPprices);

        if (!rrp_prices.rrp_prices) {
          console.log('No RRP', this.meta.global.model_RRPprices);
          return '';
        }

        const rrp_to_show = rrp_prices['rrp_prices'].find(item => {
          return item.modelcode == this.option3;
        });

        if (!rrp_to_show || !rrp_to_show.PriceRRP) {
          console.log('No RRP', this.meta.global.model_RRPprices);
          return '';
        }

        if (rrp_to_show.PriceRRP < this.price) {
          console.log('No RRP', this.meta.global.model_RRPprices);
          return '';
        }

        const rrp = (parseInt(rrp_to_show.PriceRRP, 10) / 100).toFixed(2);

        return `<div class="rrp-price de-u-textShrink1 de-u-textMedium de-rrp-tooltipOpener" style="width: fit-content;" >RRP*: <span> ${'$' + rrp}</span></div>
        <div class="de-rrp-tooltip">${ window.vars.translations.products.general.rrp_price_info}</div>`;
      } catch (error) {
        console.error(error);
        return '';
      }
    }
  };

  _.forEach(['pico', 'icon', 'thumb', 'small', 'compact', 'medium', 'large', 'grande', 'original'], function (size) {
    algolia.helpers[size + 'Image'] = (function (_size) {
      return function () {
        var image = this._distinct ? this.product_image : this.image;
        if (!image) {
          return 'http://cdn.shopify.com/s/images/admin/no-image-compact.gif';
        }
        if (_size === 'original') {
          return image;
        }
        return image.replace(/\/(.*)\.(\w{2,4})/g, '/$1_' + _size + '.$2');
      };
    })(size); // We need to create a new scope so that the internal size has the good value.
  });

  /* Create an Hogan lambda, which doesn't respect the mustache doc */
  algolia.hoganHelpers = _.reduce(Object.assign({}, algolia.helpers, algolia.translation_helpers), function (res, helper, name) {
    res[name] = function () {
      return function (text) {
        var render = function (value) {
          return Hogan.compile(value, algolia.hoganOptions).render(this);
        }.bind(this);
        return helper.call(this, text, render);
      }.bind(this);
    };
    return res;
  }, {});
}(algoliaShopify));

const handleize = (text) => {
  console.log(text);
  return text.toLowerCase().replace(/[^\w\u00C0-\u024f]+/g, "-").replace(/^-+|-+$/g, "").toLocaleString();
};
