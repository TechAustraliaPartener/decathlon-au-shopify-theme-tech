(function (algolia, instantsearch) {

  var collectionPage =
    !!algolia.is_collection_results_page &&
    !!algolia.config.instant_search_enabled_on_collection;

  if (
    (!algolia.full_results && !collectionPage) || !algolia.config.instant_search_enabled
  ) {
    return;
  }

  var _ = algolia._,
    $ = algolia.jQuery;


  var collectionFacetFilter = null;
  var collectionRulesContextValue = null;
  if (collectionPage) {
    var matches = window.location.pathname.match(/\/collections\/([^/]+)/i);
    const handle = !!matches && matches.length === 2 ? matches[1] : null;

    collectionFacetFilter = algolia.config.collection_id_indexing ?
      algolia.current_collection_id ? 'collection_ids:"' + algolia.current_collection_id + '"' : null :
      'collections:"' + handle + '"';

    collectionRulesContextValue = algolia.config.collection_id_query_rules
      ? algolia.current_collection_id
      : handle;
  }

  var collectionFacetValue = null;
  if (collectionPage) {
    var matches = window.location.pathname.match(/\/collections\/([^/]+)/i);
    if (!!matches && matches.length === 2) {
      collectionFacetValue = matches[1];
    }
  }

  var results_selector = collectionPage ? algolia.config.collection_css_selector : algolia.config.results_selector;

  var activeSortOrders = collectionPage && algolia.collectionSortOrders ? algolia.collectionSortOrders : algolia.sortOrders;

  results_selector += ', .algolia-shopify-instantsearch';

  var $hiding = $('<style>' + results_selector + ' { visibility: hidden }</style>');
  $hiding.appendTo($('head'));

  function getPlatform() {
    return (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) ? 'mobile' : 'desktop';
  };

  var instant = algolia.instantsearch = {
    colors: algolia.config.colors,
    distinct: !!algolia.config.show_products,
    facets: {
      hidden: collectionPage && algolia.collectionHiddenFacets ? algolia.collectionHiddenFacets : algolia.hiddenFacets,
      shown: collectionPage && algolia.collectionShownFacets ? algolia.collectionShownFacets : algolia.shownFacets,
      list: collectionPage && algolia.collectionFacets ? algolia.collectionFacets : algolia.facets,
      widgets: collectionPage && algolia.collectionFacetsWidgets ? algolia.collectionFacetsWidgets : algolia.facetsWidgets
    },
    hitsPerPage: collectionPage && algolia.config.collections_full_results_hits_per_page ? algolia.config.collections_full_results_hits_per_page : algolia.config.products_full_results_hits_per_page,
    poweredBy: algolia.config.powered_by,
    search: instantsearch({
      appId: algolia.config.app_id,
      apiKey: algolia.config.search_api_key,
      indexName: '' + algolia.config.index_prefix + 'products',
      searchParameters: {
        clickAnalytics: true,
        ruleContexts: [getPlatform()]
      },
      urlSync: {},
      searchFunction: function (searchFunctionHelper) {
        // Set query parameters here because they're not kept when someone
        // presses the Back button if set in the `init` function of a custom widget
        var helper = instant.search.helper;
        var page = helper.getPage();
        helper.setQueryParameter('highlightPreTag', '<span class="ais-highlight">');
        helper.setQueryParameter('highlightPostTag', '</span>');
        if (instant.distinct) {
          helper.setQueryParameter('distinct', true);
        }

        ////////////////////////////
        // Collection page features
        ////////////////////////////
        if (!!collectionPage) {
          ////////////////////////////
          // Collection page filtering
          ////////////////////////////
          if (!!collectionFacetFilter) {
            helper.setQueryParameter('filters', collectionFacetFilter);
          }

          ////////////////////////////////
          // Collection page merchandising
          ////////////////////////////////

          // send rulesContext for promoted results only if no filters active
          var currentState = helper.getState();
          if (_.keys(currentState.facetsRefinements).length === 0 &&
            _.keys(currentState.numericRefinements).length === 0 &&
            _.keys(currentState.disjunctiveFacetsRefinements).length === 0 &&
            // send ruleContexts for only the default sort order
            currentState.index === '' + algolia.config.index_prefix + 'products'
            // commenting the page condiion to send ruleContexts on all pages
            // and not just the first
            // page == 0
          ) {
            // if we are on a collection page, `collectionRulesContextValue` is defined
            if (!!collectionRulesContextValue) {
              helper.setQueryParameter('ruleContexts', [collectionRulesContextValue.toString()]);
            }
          } else {
            helper.setQueryParameter('ruleContexts', []);
          }
        }

        helper.setPage(page);
        searchFunctionHelper.search();
      }
    }),
    selector: algolia.config.results_selector + ', .algolia-shopify-instantsearch',
    sortOrders: activeSortOrders,
    storeName: algolia.storeName,
    templates: {
      currentItem: algolia.getTemplate('instant_search_current_refined_values_item'),
      empty: algolia.getTemplate('instant_search_no_result'),
      page: algolia.compileTemplate('instant_search'),
      product: algolia.getTemplate('instant_search_product'),
      stats: algolia.getTemplate('instant_search_stats'),
      style: algolia.compileTemplate('instant_search.css')
    }
  };

  if (instant.poweredBy) {
    console.log('Algolia: Instant-Search');
  }

  function readjust() {
    var width = instant.$results.outerWidth();

    var suffix = 'lg';
    if (width < 400) suffix = 'xs';
    else if (width < 800) suffix = 'sm';
    else if (width < 1200) suffix = 'md';

    instant.$results
      .removeClass('ais-results-size-xs')
      .removeClass('ais-results-size-sm')
      .removeClass('ais-results-size-md')
      .removeClass('ais-results-size-lg')
      .addClass('ais-results-size-' + suffix);
  }

  // Bind helpers
  _.forEach(Object.assign({}, algolia.helpers, algolia.translation_helpers), function (helper, name) {
    instant.search.templatesConfig.helpers[name] = helper;
  });
  instant.search.templatesConfig.compileOptions = algolia.hoganOptions;

  algolia.appendStyle(algolia.render(instant.templates.style, {
    distinct: instant.distinct,
    colors: instant.colors
  }));

  $(document).ready(function () {
    if (collectionPage && $(algoliaShopify.config.collection_css_selector).length == 0) {
      throw new Error('Instant search CSS selector for collection page is incorrect\nFore more info see : https://community.algolia.com/shopify/css_selector.html#algolia-search');
    } else if ($(algoliaShopify.config.results_selector).length == 0) {
      throw new Error('Instant search CSS selector is incorrect\nFore more info see : https://community.algolia.com/shopify/css_selector.html#algolia-search');
    }

    instant.$results = $(instant.selector);

    instant.$results.html(algolia.render(instant.templates.page, {
      facets: instant.facets.list,
      storeName: instant.storeName,
      translations: algolia.translations,
      multipleSortOrders: activeSortOrders.length > 1
    }));

    readjust();

    $(window).resize(function () {
      readjust();
    });

    // Mobile facets display
    instant.search.addWidget({
      init: function (opts) {

        var $button = $('.ais-facets-button');
        var $buttonDone = $('.ais-facets__done-button');
        var searchWasExpandedOnOpen = false;
        function toggleDrawer() {
          var $facets = $('.ais-facets'); 
          var $filterCount = $('.ais-current-refined-values--item').length; 
          if ($('.ais-page').hasClass('ais-page--loaded')) {

            if ($facets.hasClass('ais-facets__shown')) {
              $('html').css('overflow', 'visible');
              $button.text('Show filters');
              $button.appendTo('#ais-sort-filter');
              $facets.removeClass('ais-facets__shown');

              // Start: Customisations
              $('body').removeClass('ais-drawer-open');
              $('.ais-facets-button--placeholder').remove();

              $button.css('left', '0');
              $button.removeClass('position-x');

              $('html, body').animate({ scrollTop: 0 });

              if (searchWasExpandedOnOpen) {
                $('.de-Drawer-wrap .de-PageWrap-headerTertiaryControl .de-MenuBar-action').attr('aria-expanded', 'true');
                $('.de-Drawer-wrap').addClass('de-is-expanded');
                searchWasExpandedOnOpen = false;
              }
              if ($filterCount > 0){
                $button.append(' ('+ $filterCount + ')');
              }

              // End: Customisations
            } else {
              $('html').css('overflow', 'hidden');
              /* $button.text('Hide Filters'); */
              $facets.addClass('ais-facets__shown');
              $button.appendTo('.ais-facets__shown');
              $('#ais-sort-filter').append('<div class="ais-facets-button--placeholder"></div>');

              // Start: Customisations
              if ($('.ais-facet__expand').length == 0 && $(window).width() < 750) {
                $('.ais-facets__group:not(.ais-facets__group--sort)')
                  .append('<div class="ais-facet__expand"></div>')
                  .find('.ais-header, .ais-facet__expand').on('click', function (evt) {
                    var $facetGroup = $(evt.currentTarget).closest('.ais-facets__group');

                    if ($facetGroup.hasClass('expanded')) {
                      $facetGroup.removeClass('expanded');

                      var $body = $facetGroup.find('.ais-facet--body');
                      $body.removeClass('expanded');
                    } else {
                      $facetGroup.addClass('expanded');

                      var $body = $facetGroup.find('.ais-facet--body');
                      $body.addClass('expanded');
                    }
                  });
              }
              $('body').addClass('ais-drawer-open');
              $button.css('left', '500px');
              setTimeout(function () {
                $button.addClass('position-x');
                $button.css('left', '35px');
              }, 1);
              $button.text('Close');
              if ($('.de-Drawer-wrap .de-PageWrap-headerTertiaryControl .de-MenuBar-action').attr('aria-expanded') == 'true') {
                $('.de-Drawer-wrap .de-PageWrap-headerTertiaryControl .de-MenuBar-action').attr('aria-expanded', 'false');
                $('.de-Drawer-wrap').removeClass('de-is-expanded');
                searchWasExpandedOnOpen = true;
              }
              // End: Customisations
            }
          }
                  

        }

        $button.on('click', function () {
          toggleDrawer();
        });

        // Additional event listener for 'Done' button
        $buttonDone.on('click', function () {
          toggleDrawer();
        });

        // Close drawer if user clicks outside of it
        $('body').click(function (event) {
          if ($('.ais-facets').hasClass('ais-facets__shown') && !$(event.target).closest('.ais-facets').length && !$(event.target).is('.ais-facets')) {
            toggleDrawer();
          }
        });
      }


    });

    // Search input
    instant.search.addWidget(
      instantsearch.widgets.searchBox({
        container: '.ais-search-box-container',
        placeholder: algolia.translations.searchForProduct,
        poweredBy: false
      })
    );

    const bannerFromUserData = (instant, data) => {
      const { ruleContexts } = instant.search.searchParameters;
      const device = ruleContexts.indexOf('mobile') !== -1 ? 'mobile' : 'desktop';

      const { desktop, mobile, link } = data;

      return `${link ? `<a href="${link}" class="banner-link">` : ''}<picture>${mobile ? `<source srcset="${mobile}" media="(max-width: 575px)" />` : ''}<img src="${desktop}" /></picture>${link ? `</a>` : ''}`;
    }

    // Custom data

    /* Example banner custom data
    {
      "banner": {
        "desktop": "https://cdn.shopify.com/s/files/1/0066/6563/3903/files/algolia_desk_test.jpeg?v=1601309504",
        "mobile": "https://cdn.shopify.com/s/files/1/0066/6563/3903/files/algolia_mobile_test.jpeg?v=1601309504"
      }
    }
    */

    instant.search.addWidget(
      instantsearch.widgets.hits({
        templates: {
          allItems({ userData }) {
            if (userData) {
              const banners = userData.map(({ banner }) => {
                return bannerFromUserData(instant, banner);
              });
              return banners.join('');
            }
            return '';
          },
          empty({ userData }) {
            if (userData) {
              const banners = userData.map(({ banner }) => {
                return bannerFromUserData(instant, banner);
              });
              return banners.join('');
            }
            return '';
          }
        },
        container: document.getElementById('ais_banner_container'),
      })
    );

    // Banner
    if (window.algolia_custom_widgets.desktopBanner) {
      instant.search.addWidget({
        render(options) {
          var bannerExists = $('#desktopAlgoliaCollectionBanner').length > 0;
          if (!bannerExists) {
            $(window.algolia_custom_widgets.desktopBanner).insertBefore('.ais-input');
          }
        },
      });
    }
    if (window.algolia_custom_widgets.mobileBanner) {
      instant.search.addWidget({
        render(options) {
          var bannerExists = $('#mobileAlgoliaCollectionBanner').length > 0;
          if (!bannerExists) {
            $(window.algolia_custom_widgets.mobileBanner).prependTo('.main-content');
          }
        },
      });
    }

    // Collection title and description
    if (window.algolia_custom_widgets.description) {
      instant.search.addWidget({
        render(options) {
          var $block2 = $('.blue-band--footer');
          var descriptionExists = $('.collection-description').length > 0;
          if (!descriptionExists) {
            // $block.prepend(window.algolia_custom_widgets.description);
            $(window.algolia_custom_widgets.description).insertBefore($block2);

          }
        },
      });

    }

    if (window.algolia_custom_widgets.title) {
      instant.search.addWidget({
        render(options) {
          var $block = $('.ais-key-visual');
          var titleExists = $block.find('.collection-title-top').length > 0;
          if (!titleExists) {
            $block.prepend('<h2 class="collection-title-top">' + window.algolia_custom_widgets.title + '</h2>');
          }
        },
      });
    }

    // Menu
    if (window.algolia_custom_widgets.menu) {
      instant.search.addWidget({
        render(options) {
          var $facets = $('.ais-facets');
          var menuExists = $('.breadcrumb-item.top-level').length > 0;
          if (!menuExists) {
            $facets.append(window.algolia_custom_widgets.menu);
          }
        },
      });
    }

    // Logo & clear
    instant.search.addWidget({
      init: function (opts) {
        if (!instant.poweredBy) {
          $('.ais-algolia-icon').hide();
        }
        $('.ais-clear-input-icon').on('click', function () {
          opts.helper.setQuery('').search();
          $('.ais-search-box--input').val('').focus();
        });
      },
      render: function (opts) {
        if (!opts.state.query) {
          if (instant.poweredBy) {
            $('.ais-algolia-icon').show();
          }
          $('.ais-clear-input-icon').hide();
        } else {
          $('.ais-clear-input-icon').show();
          $('.ais-algolia-icon').hide();
        }
      }
    });

    // Stats
    instant.search.addWidget(
      instantsearch.widgets.stats({
        container: '.ais-stats-container',
        templates: {
          body: instant.templates.stats,
        },
        transformData: {
          body: function (data) {
            data.processingTimeS = data.processingTimeMS / 1000;
            data.start = data.page * data.hitsPerPage + 1;
            data.end = Math.min((data.page + 1) * data.hitsPerPage, data.nbHits);
            data.translations = algolia.translations;
            return data;
          }
        }
      })
    );

    // Sort orders
    if (activeSortOrders.length > 1) {
      instant.search.addWidget(
        instantsearch.widgets.sortBySelector({
          container: '.ais-sort-orders-container',
          indices: instant.sortOrders
        })
      );
      instant.search.addWidget(
        instantsearch.widgets.sortBySelector({
          container: '.ais-sort-orders-container--drawer',
          indices: instant.sortOrders
        })
      );
    }

    // Change display
    instant.search.addWidget({
      init: function (opts) {
        $('.ais-search-header').on('click', '.ais-change-display-block', function () {
          $('.ais-change-display-block:not(.ais-change-display-selected)').addClass('ais-change-display-selected');
          $('.ais-change-display-list.ais-change-display-selected').removeClass('ais-change-display-selected');
          $('.ais-results-as-list').removeClass('ais-results-as-list').addClass('ais-results-as-block');
        });
        $('.ais-search-header').on('click', '.ais-change-display-list', function () {
          $('.ais-change-display-list:not(.ais-change-display-selected)').addClass('ais-change-display-selected');
          $('.ais-change-display-block.ais-change-display-selected').removeClass('ais-change-display-selected');
          $('.ais-results-as-block').removeClass('ais-results-as-block').addClass('ais-results-as-list');
        });
      }
    });

    // Hidden facets
    var list = _.map(instant.facets.hidden, function (facet) { return facet.name; });
    instant.search.addWidget({
      getConfiguration: function () {
        return {
          facets: list,
          disjunctiveFacets: list
        };
      },
      init: function () { }
    });

    // Current refined values
    var attributes = _.map(instant.facets.shown, function (facet) {
      return {
        name: facet.name,
        label: facet.title
      }
    });
    instant.search.addWidget(
      instantsearch.widgets.currentRefinedValues({
        container: '.ais-current-refined-values-container',
        cssClasses: {
          root: 'ais-facet',
          header: 'ais-facet--header',
          body: 'ais-facet--body'
        },
        templates: {
          header: algolia.translations.selectedFilter,
          item: instant.templates.currentItem,
          clearAll: algolia.translations.clearAll
        },
        onlyListedAttributes: true,
        attributes: attributes
      })
    );

    // Facets
    _.forEach(instant.facets.widgets, function (widget) {
      instant.search.addWidget(instantsearch.widgets[widget.name](widget.params));
    });

    // Hits
    instant.search.addWidget(
      instantsearch.widgets.hits({
        container: '.ais-hits-container',
        hitsPerPage: instant.hitsPerPage,
        templates: {
          empty: instant.templates.empty,
          item: instant.templates.product
        },
        transformData: {
          item: function (product) {
            product._distinct = instant.distinct;
            product.can_order = (
              product.inventory_management !== 'shopify' ||
              product.inventory_policy === 'continue' ||
              product.inventory_quantity > 0
            );
            product.translations = algolia.translations;
            product.queryID = instant.search.helper.lastResults._rawResults[0].queryID;
            product.productPosition = product.__hitIndex + 1;
            return product;
          },
          empty: function (params) {
            params.translations = algolia.translations;
            return params;
          }
        }
      })
    );

    // Redirect to product on click
    instant.search.addWidget({
      init: function (opts) {
        $('.ais-hits-container').on('click', '.ais-hit', function (e) {
          var $this = $(this),
            handle = $this.attr('data-handle'),
            variant_id = $this.attr('data-variant-id')
          distinct = $this.attr('data-distinct');

          var link = '/products/' + handle;
          if (distinct !== 'true') {
            link += '?variant=' + variant_id;
          }
          if (algolia.config.analytics_enabled) {
            algolia.clickTracker(e.currentTarget);
          }
          window.location.href = link;
        });
        $('.ais-hits-container').on('click', '.ais-hit a', function (e) {
          e.stopPropagation();
          if (algolia.config.analytics_enabled) {
            algolia.clickTracker(e.currentTarget.closest('[data-algolia-objectid]'));
          }
        });
      }
    });

    // Add to cart
    instant.search.addWidget({
      init: function (opts) {
        $('.ais-hits-container').on('click', '.ais-hit--cart-button', function (e) {
          e.stopPropagation();
          var $this = $(this),
            formId = $this.attr('data-form-id');

          if (formId) {
            document.getElementById(formId).submit();
          }
        });
      }
    });

    // No result actions
    instant.search.addWidget({
      init: function (opts) {
        $('.ais-hits-container').on('click', '.ais-hit-empty--clear-filters', function () {
          var helper = opts.helper;
          helper.clearTags();
          _.forEach(instant.facets.list, function (facet) {
            helper.clearRefinements(facet.name);
          });
          helper.search();
        });

        // 'Clear All' button clears filters
        $('.ais-page').on('click', '.ais-facets__clear-all-button', function (evt) {
          var helper = opts.helper;
          helper.clearTags();
          _.forEach(instant.facets.list, function (facet) {
            helper.clearRefinements(facet.name);
          });
          helper.search();

          $(evt.currentTarget).closest('.ais-facets').find('.ais-facets__group, .ais-facets__group .ais-body').removeClass('expanded');

        });

        // Sorting within the drawer menu closes the drawer menu
        $('.ais-page').on('change', '.ais-facets__group--sort select', function (evt) {

          var $facets = $('.ais-facets');
          var $button = $('.ais-facets-button');

          if ($facets.hasClass('ais-facets__shown')) {
            $('html').css('overflow', 'visible');
            $button.text('Show filters');
            $button.appendTo('#ais-sort-filter');
            $facets.removeClass('ais-facets__shown');

            $('body').removeClass('ais-drawer-open');
            $('.ais-facets-button--placeholder').remove();

            $button.css('left', '0');
            $button.removeClass('position-x');

            $('html, body').animate({ scrollTop: 0 });
          }
        });

        $('.ais-hits-container').on('click', '.ais-hit-empty--clear-input', function () {
          opts.helper.setQuery('').search();
          $('.ais-search-box--input').val('').focus();
        });
      }
    });

    // Pagination
    instant.search.addWidget(
      instantsearch.widgets.pagination({
        container: '.ais-pagination-container',
        padding: 2,
        maxPages: 20
      })
    );

    // Main
    instant.search.start();

    $hiding.remove();
  });

  const insertSecondBanner = () => {
    const twelfthOrLastItem = $('.ais-hits--item').eq(11).length ? $('.ais-hits--item').eq(11) : $('.ais-hits--item').last();
    // Desktop
    if (window.algolia_custom_widgets.desktopBanner_2) {
      const banner = $('#desktopAlgoliaCollectionBanner_2')
      if (banner.length > 0) banner.remove()

      $(window.algolia_custom_widgets.desktopBanner_2).insertAfter(twelfthOrLastItem);
    }
    // Mobile
    if (window.algolia_custom_widgets.mobileBanner_2) {
      const banner = $('#mobileAlgoliaCollectionBanner_2')
      if (banner.length > 0) banner.remove()

      $(window.algolia_custom_widgets.mobileBanner_2).insertAfter(twelfthOrLastItem);
    }
  }

  instant.search.on('render', function () {
    var n = $('.ais-pagination--item__page').length;
    if (n <= 1) {
      $('.ais-pagination').hide();
    } else {
      $('.ais-pagination').show();
    }

    $('.ais-page').addClass('ais-page--loaded');
    $('.ais-facets-button').css('color', '#1c82c3');
    $('.ais-facets').removeClass('ais-facets--loading');

    var showFacetLimit = 5;

    var $facets = $('.ais-facet');
    for (var i = $facets.length - 1; i >= 0; i--) {

      var $facet = $($facets[i]);
      var $facetItems = $facet.find('.ais-facet--body .ais-facet--item > div');
      var $facetItemsHidden = $facet.find('.ais-facet--body .ais-facet--item > div:empty');

      // Check if the facet container only has empty items and if the facet is a list of items (otherwise slider facets are always hidden)
      if (($facetItems.length === $facetItemsHidden.length) && ($facet.hasClass('ais-refinement-list'))) {
        $facet.hide();
      }

      var $facetAccordion = $facet.find('.filter-accordion');
      var finalFacetCount = $facetItems.length - $facetItemsHidden.length;

      if ($facetAccordion.length) {
        appendShowAll($facet, finalFacetCount);
      }
    }

    function appendShowAll($facet, facetCount) {
      var $facetShowAllLink = $facet.find('.ais-show-all');

      if ($facetShowAllLink.length) {
        if (facetCount <= 5) {
          $facetShowAllLink.remove();
        }
      } else {
        if (facetCount > 5) {
          var seeMoreHTML = '<a class="ais-show-all">Show All' + window.vars.iconChevronDown + '</a>';
          $facet.append(seeMoreHTML);
        }
      }

      //expand the facet if an active item is hidden
      if (facetCount > 5) {
        var hiddenActiveFacet = $facet.find('.ais-facet--active').index() > 4 ? true : false;

        if (hiddenActiveFacet) {
          var $facetAccordion = $facet.find('.filter-accordion');
          $facetAccordion.addClass('expanded');
        }
      }
    }

    $('.ais-current-refined-values--item').each(function () {
      var isColour = $(this).find('.ais-current-refined-values--label.Colour').length > 0;
      $(this).toggleClass('show', !isColour);
    });

    $('.ais-show-all').unbind('click').bind('click', function () {
      var $facet = $(this).parents('.ais-facet');
      var $facetAccordion = $facet.find('.filter-accordion');
      $facetAccordion.toggleClass('expanded');
    });

    /*
    $('.js-de-ColorSwatches .js-de-ColorSwatchList-action').bind('mouseover', function() {
      var thumbnail = $(this).find('img')[0].src;
      var productDisplay = $(this).parents('.ais-product');
      var mainImage = productDisplay.find('.ais-hit--picture');

      mainImage.attr('style', 'background-image: url(' + thumbnail + ') !important;');
    });
    */

    insertSecondBanner();
  });

  $(document).ready(function () {
    checkScreenSize();

  });

  $(window).resize(function () {
    checkScreenSize();
  });

  // Hide Header on on scroll down
  var didScroll;
  var lastScrollTop = 0;
  var delta = 5;
  var navbarHeight = $('#ais-sort-filter').outerHeight();

  $(window).scroll(function (event) {
    didScroll = true;
  });

  setInterval(function () {
    if (didScroll) {
      hasScrolled();
      didScroll = false;
    }
  }, 250);

  function checkScreenSize() {
    var windowWidth = $(window).width();
    if (windowWidth < 800) {
      $('.de-PageWrap-main').addClass('sticky-sort-filter');
      $('#ais-sort-filter').addClass('sticky-active');
    } else {
      $('.de-PageWrap-main').removeClass('sticky-sort-filter');
      $('#ais-sort-filter').removeClass('sticky-active');
    }
  }

  function hasScrolled() {
    var st = $(this).scrollTop();

    // Make sure they scroll more than delta
    if (Math.abs(lastScrollTop - st) <= delta)
      return;

    // If they scrolled down and are past the navbar, add class .nav-up.
    // This is necessary so you never see what is "behind" the navbar.
    if (st > lastScrollTop && st > navbarHeight) {
      // Scroll Down
      $('#ais-sort-filter.sticky-active').removeClass('nav-down').addClass('nav-up');
    } else {
      // Scroll Up
      if (st + $(window).height() < $(document).height()) {
        $('#ais-sort-filter.sticky-active').removeClass('nav-up').addClass('nav-down');
      }
    }

    lastScrollTop = st;
  }





}(algoliaShopify, instantsearch));
