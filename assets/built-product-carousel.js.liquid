import { J as JS_PREFIX } from './built-fetch-stores-13903880.js';
import { _ as _toConsumableArray } from './built-toConsumableArray-0fbe23f7.js';

/**
 * Product tile carousel selector
 */

var SLICK_PRODUCT_TILE_CAROUSEL = JS_PREFIX + "SlickProductTileCarousel";
/**
 * Product tile showcase selector
 */

var PRODUCT_TILE_SHOWCASE = JS_PREFIX + "ProductTile-showcase";
/**
 * Product tile carousel button arrow svg
 */

var arrowPreviousButton = jQuery("." + SLICK_PRODUCT_TILE_CAROUSEL).data('arrow-previous-button');
var arrowNextButton = jQuery("." + SLICK_PRODUCT_TILE_CAROUSEL).data('arrow-next-button');
var slideBreakpointsType = jQuery("." + SLICK_PRODUCT_TILE_CAROUSEL).data('slide-breakpoints-type');
/**
 * Slick carousel default configuration
 *
 * @see https://kenwheeler.github.io/slick/
 */

var DEFAULT_SLICK_CONFIG = {
  infinite: true
};
/**
 * The "mode" is the number that is repeated most often
 *
 * For example, the "mode" of [3, 5, 4, 4, 1, 1, 2, 3] is [1, 3, 4]
 *
 * @param {Array} numbers An array of numbers
 * @returns {String} The mode of the specified numbers
 */

var findMode = function findMode(numbers) {
  var counted = numbers.reduce(function (acc, curr) {
    if (curr in acc) {
      acc[curr]++;
    } else {
      acc[curr] = 1;
    }

    return acc;
  }, {});
  return Object.keys(counted).reduce(function (prev, curr) {
    return counted[prev] > counted[curr] ? prev : curr;
  });
};
/**
 * Sets all image containers to an equal height
 */


var standardizeImageContainers = function standardizeImageContainers() {
  var containers =
  /** @type {HTMLElement[]} */
  _toConsumableArray(document.querySelectorAll("." + PRODUCT_TILE_SHOWCASE));

  var mode = findMode(containers.map(function (el) {
    el.style.height = 'initial';
    return el.offsetHeight;
  }));
};
/**
 * Determines slidesToShow value
 *
 * @param {Number} windowWidth The width value of the window viewport
 * @returns {Number} - How many slides to show
 */


var calcSlidesToShow = function calcSlidesToShow(windowWidth) {
  var slideBreakpoints;

  if (slideBreakpointsType === 'associated-products') {
    slideBreakpoints = [{
      start: 0,
      end: 624,
      slidesToShow: 0
    }, {
      start: 625,
      end: 99999,
      slidesToShow: 3
    }];
  } else {
    /**
     * Responsive slide breakpoints
     *
     * - non-carousel overflow scrolling on small screens
     * - 3 product tiles with previous/arrows on medium screens
     * - 4 product tiles on large screens ( > 960 px )
     * - 5 product tiles on larger screens ( > 1280 px )
     * - 6 product tiles on even larger screens ( > 1480 )
     */
    slideBreakpoints = [{
      start: 0,
      end: 624,
      slidesToShow: 0
    }, {
      start: 625,
      end: 960,
      slidesToShow: 3
    }, {
      start: 961,
      end: 1280,
      slidesToShow: 4
    }, {
      start: 1281,
      end: 1480,
      slidesToShow: 5
    }, {
      start: 1481,
      end: 99999,
      slidesToShow: 6
    }];
  }

  var activeSlideBreakpoint = slideBreakpoints.find(function (breakpoint) {
    return windowWidth >= breakpoint.start && windowWidth <= breakpoint.end;
  });
  return activeSlideBreakpoint ? activeSlideBreakpoint.slidesToShow : 0;
};
/**
 * Initializes all product tile carousels
 */


var initCarousels = function initCarousels() {
  var slidesToShow = calcSlidesToShow(jQuery(window).width());
  /**
   * Slick carousel configuration
   */

  var config = Object.assign({}, DEFAULT_SLICK_CONFIG, {
    slidesToShow: slidesToShow,
    slidesToScroll: slidesToShow,
    prevArrow: arrowPreviousButton,
    nextArrow: arrowNextButton
  });
  /**
   * Destroy all already initialized carousels
   * This prevents thrown errors, if it were to be initialized twice
   */

  jQuery("." + SLICK_PRODUCT_TILE_CAROUSEL + ".slick-initialized").slick('unslick');
  /**
   * Create a slick carousel instance
   */

  if (slidesToShow > 0) {
    jQuery("." + SLICK_PRODUCT_TILE_CAROUSEL).not('.slick-initialized').slick(config);
  }
  /**
   * Sets all image container heights to their mode value
   */


  standardizeImageContainers();
};
/**
 * Watch for the window resize event (debounced), then initialize carousel
 */


var handleWindowResize = function handleWindowResize() {
  var timeout = null;
  jQuery(window).resize(function () {
    clearTimeout(timeout);
    timeout = setTimeout(initCarousels, 250);
  });
};
/**
 * Initialize carousel to start things off
 */


var init = function init() {
  var $productTileCarousel = jQuery("." + SLICK_PRODUCT_TILE_CAROUSEL);

  if ($productTileCarousel.length > 0) {
    initCarousels();
    handleWindowResize();
  }
};

init();
