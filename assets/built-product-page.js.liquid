import { V as Vue } from './built-vue.esm-661ab646.js';
import { J as JS_PREFIX, C as CSS_PREFIX, b as CSS_UTILITY_PREFIX, c as IS_HIDDEN_CLASS } from './built-fetch-stores-13903880.js';
import { _ as _toConsumableArray } from './built-toConsumableArray-0fbe23f7.js';
import { i as init$g } from './built-recently-viewed-799d64d9.js';
import { c as createState } from './built-create-state-e7ac62e2.js';

/**
 * SSR Window 3.0.0
 * Better handling for window object in SSR environment
 * https://github.com/nolimits4web/ssr-window
 *
 * Copyright 2020, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: November 9, 2020
 */

/* eslint-disable no-param-reassign */
function isObject(obj) {
  return obj !== null && typeof obj === 'object' && 'constructor' in obj && obj.constructor === Object;
}

function extend(target, src) {
  if (target === void 0) {
    target = {};
  }

  if (src === void 0) {
    src = {};
  }

  Object.keys(src).forEach(function (key) {
    if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject(src[key]) && isObject(target[key]) && Object.keys(src[key]).length > 0) {
      extend(target[key], src[key]);
    }
  });
}

var ssrDocument = {
  body: {},
  addEventListener: function addEventListener() {},
  removeEventListener: function removeEventListener() {},
  activeElement: {
    blur: function blur() {},
    nodeName: ''
  },
  querySelector: function querySelector() {
    return null;
  },
  querySelectorAll: function querySelectorAll() {
    return [];
  },
  getElementById: function getElementById() {
    return null;
  },
  createEvent: function createEvent() {
    return {
      initEvent: function initEvent() {}
    };
  },
  createElement: function createElement() {
    return {
      children: [],
      childNodes: [],
      style: {},
      setAttribute: function setAttribute() {},
      getElementsByTagName: function getElementsByTagName() {
        return [];
      }
    };
  },
  createElementNS: function createElementNS() {
    return {};
  },
  importNode: function importNode() {
    return null;
  },
  location: {
    hash: '',
    host: '',
    hostname: '',
    href: '',
    origin: '',
    pathname: '',
    protocol: '',
    search: ''
  }
};

function getDocument() {
  var doc = typeof document !== 'undefined' ? document : {};
  extend(doc, ssrDocument);
  return doc;
}

var ssrWindow = {
  document: ssrDocument,
  navigator: {
    userAgent: ''
  },
  location: {
    hash: '',
    host: '',
    hostname: '',
    href: '',
    origin: '',
    pathname: '',
    protocol: '',
    search: ''
  },
  history: {
    replaceState: function replaceState() {},
    pushState: function pushState() {},
    go: function go() {},
    back: function back() {}
  },
  CustomEvent: function CustomEvent() {
    return this;
  },
  addEventListener: function addEventListener() {},
  removeEventListener: function removeEventListener() {},
  getComputedStyle: function getComputedStyle() {
    return {
      getPropertyValue: function getPropertyValue() {
        return '';
      }
    };
  },
  Image: function Image() {},
  Date: function Date() {},
  screen: {},
  setTimeout: function setTimeout() {},
  clearTimeout: function clearTimeout() {},
  matchMedia: function matchMedia() {
    return {};
  },
  requestAnimationFrame: function requestAnimationFrame(callback) {
    if (typeof setTimeout === 'undefined') {
      callback();
      return null;
    }

    return setTimeout(callback, 0);
  },
  cancelAnimationFrame: function cancelAnimationFrame(id) {
    if (typeof setTimeout === 'undefined') {
      return;
    }

    clearTimeout(id);
  }
};

function getWindow() {
  var win = typeof window !== 'undefined' ? window : {};
  extend(win, ssrWindow);
  return win;
}

/**
 * Dom7 3.0.0
 * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
 * https://framework7.io/docs/dom7.html
 *
 * Copyright 2020, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: November 9, 2020
 */

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}
/* eslint-disable no-proto */


function makeReactive(obj) {
  var proto = obj.__proto__;
  Object.defineProperty(obj, '__proto__', {
    get: function get() {
      return proto;
    },
    set: function set(value) {
      proto.__proto__ = value;
    }
  });
}

var Dom7 = /*#__PURE__*/function (_Array) {
  _inheritsLoose(Dom7, _Array);

  function Dom7(items) {
    var _this;

    _this = _Array.call.apply(_Array, [this].concat(items)) || this;
    makeReactive(_assertThisInitialized(_this));
    return _this;
  }

  return Dom7;
}( /*#__PURE__*/_wrapNativeSuper(Array));

function arrayFlat(arr) {
  if (arr === void 0) {
    arr = [];
  }

  var res = [];
  arr.forEach(function (el) {
    if (Array.isArray(el)) {
      res.push.apply(res, arrayFlat(el));
    } else {
      res.push(el);
    }
  });
  return res;
}

function arrayFilter(arr, callback) {
  return Array.prototype.filter.call(arr, callback);
}

function arrayUnique(arr) {
  var uniqueArray = [];

  for (var i = 0; i < arr.length; i += 1) {
    if (uniqueArray.indexOf(arr[i]) === -1) uniqueArray.push(arr[i]);
  }

  return uniqueArray;
}

function qsa(selector, context) {
  if (typeof selector !== 'string') {
    return [selector];
  }

  var a = [];
  var res = context.querySelectorAll(selector);

  for (var i = 0; i < res.length; i += 1) {
    a.push(res[i]);
  }

  return a;
}

function $$1(selector, context) {
  var window = getWindow();
  var document = getDocument();
  var arr = [];

  if (!context && selector instanceof Dom7) {
    return selector;
  }

  if (!selector) {
    return new Dom7(arr);
  }

  if (typeof selector === 'string') {
    var html = selector.trim();

    if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
      var toCreate = 'div';
      if (html.indexOf('<li') === 0) toCreate = 'ul';
      if (html.indexOf('<tr') === 0) toCreate = 'tbody';
      if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';
      if (html.indexOf('<tbody') === 0) toCreate = 'table';
      if (html.indexOf('<option') === 0) toCreate = 'select';
      var tempParent = document.createElement(toCreate);
      tempParent.innerHTML = html;

      for (var i = 0; i < tempParent.childNodes.length; i += 1) {
        arr.push(tempParent.childNodes[i]);
      }
    } else {
      arr = qsa(selector.trim(), context || document);
    } // arr = qsa(selector, document);

  } else if (selector.nodeType || selector === window || selector === document) {
    arr.push(selector);
  } else if (Array.isArray(selector)) {
    if (selector instanceof Dom7) return selector;
    arr = selector;
  }

  return new Dom7(arrayUnique(arr));
}

$$1.fn = Dom7.prototype;

function addClass() {
  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {
    classes[_key] = arguments[_key];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  this.forEach(function (el) {
    var _el$classList;

    (_el$classList = el.classList).add.apply(_el$classList, classNames);
  });
  return this;
}

function removeClass() {
  for (var _len2 = arguments.length, classes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    classes[_key2] = arguments[_key2];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  this.forEach(function (el) {
    var _el$classList2;

    (_el$classList2 = el.classList).remove.apply(_el$classList2, classNames);
  });
  return this;
}

function toggleClass() {
  for (var _len3 = arguments.length, classes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    classes[_key3] = arguments[_key3];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  this.forEach(function (el) {
    classNames.forEach(function (className) {
      el.classList.toggle(className);
    });
  });
}

function hasClass() {
  for (var _len4 = arguments.length, classes = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    classes[_key4] = arguments[_key4];
  }

  var classNames = arrayFlat(classes.map(function (c) {
    return c.split(' ');
  }));
  return arrayFilter(this, function (el) {
    return classNames.filter(function (className) {
      return el.classList.contains(className);
    }).length > 0;
  }).length > 0;
}

function attr(attrs, value) {
  if (arguments.length === 1 && typeof attrs === 'string') {
    // Get attr
    if (this[0]) return this[0].getAttribute(attrs);
    return undefined;
  } // Set attrs


  for (var i = 0; i < this.length; i += 1) {
    if (arguments.length === 2) {
      // String
      this[i].setAttribute(attrs, value);
    } else {
      // Object
      for (var attrName in attrs) {
        this[i][attrName] = attrs[attrName];
        this[i].setAttribute(attrName, attrs[attrName]);
      }
    }
  }

  return this;
}

function removeAttr(attr) {
  for (var i = 0; i < this.length; i += 1) {
    this[i].removeAttribute(attr);
  }

  return this;
}

function transform(transform) {
  for (var i = 0; i < this.length; i += 1) {
    this[i].style.transform = transform;
  }

  return this;
}

function transition(duration) {
  for (var i = 0; i < this.length; i += 1) {
    this[i].style.transitionDuration = typeof duration !== 'string' ? duration + "ms" : duration;
  }

  return this;
}

function on() {
  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    args[_key5] = arguments[_key5];
  }

  var eventType = args[0],
      targetSelector = args[1],
      listener = args[2],
      capture = args[3];

  if (typeof args[1] === 'function') {
    eventType = args[0];
    listener = args[1];
    capture = args[2];
    targetSelector = undefined;
  }

  if (!capture) capture = false;

  function handleLiveEvent(e) {
    var target = e.target;
    if (!target) return;
    var eventData = e.target.dom7EventData || [];

    if (eventData.indexOf(e) < 0) {
      eventData.unshift(e);
    }

    if ($$1(target).is(targetSelector)) listener.apply(target, eventData);else {
      var _parents = $$1(target).parents(); // eslint-disable-line


      for (var k = 0; k < _parents.length; k += 1) {
        if ($$1(_parents[k]).is(targetSelector)) listener.apply(_parents[k], eventData);
      }
    }
  }

  function handleEvent(e) {
    var eventData = e && e.target ? e.target.dom7EventData || [] : [];

    if (eventData.indexOf(e) < 0) {
      eventData.unshift(e);
    }

    listener.apply(this, eventData);
  }

  var events = eventType.split(' ');
  var j;

  for (var i = 0; i < this.length; i += 1) {
    var el = this[i];

    if (!targetSelector) {
      for (j = 0; j < events.length; j += 1) {
        var event = events[j];
        if (!el.dom7Listeners) el.dom7Listeners = {};
        if (!el.dom7Listeners[event]) el.dom7Listeners[event] = [];
        el.dom7Listeners[event].push({
          listener: listener,
          proxyListener: handleEvent
        });
        el.addEventListener(event, handleEvent, capture);
      }
    } else {
      // Live events
      for (j = 0; j < events.length; j += 1) {
        var _event = events[j];
        if (!el.dom7LiveListeners) el.dom7LiveListeners = {};
        if (!el.dom7LiveListeners[_event]) el.dom7LiveListeners[_event] = [];

        el.dom7LiveListeners[_event].push({
          listener: listener,
          proxyListener: handleLiveEvent
        });

        el.addEventListener(_event, handleLiveEvent, capture);
      }
    }
  }

  return this;
}

function off() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  var eventType = args[0],
      targetSelector = args[1],
      listener = args[2],
      capture = args[3];

  if (typeof args[1] === 'function') {
    eventType = args[0];
    listener = args[1];
    capture = args[2];
    targetSelector = undefined;
  }

  if (!capture) capture = false;
  var events = eventType.split(' ');

  for (var i = 0; i < events.length; i += 1) {
    var event = events[i];

    for (var j = 0; j < this.length; j += 1) {
      var el = this[j];
      var handlers = void 0;

      if (!targetSelector && el.dom7Listeners) {
        handlers = el.dom7Listeners[event];
      } else if (targetSelector && el.dom7LiveListeners) {
        handlers = el.dom7LiveListeners[event];
      }

      if (handlers && handlers.length) {
        for (var k = handlers.length - 1; k >= 0; k -= 1) {
          var handler = handlers[k];

          if (listener && handler.listener === listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          } else if (listener && handler.listener && handler.listener.dom7proxy && handler.listener.dom7proxy === listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          } else if (!listener) {
            el.removeEventListener(event, handler.proxyListener, capture);
            handlers.splice(k, 1);
          }
        }
      }
    }
  }

  return this;
}

function trigger() {
  var window = getWindow();

  for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
    args[_key9] = arguments[_key9];
  }

  var events = args[0].split(' ');
  var eventData = args[1];

  for (var i = 0; i < events.length; i += 1) {
    var event = events[i];

    for (var j = 0; j < this.length; j += 1) {
      var el = this[j];

      if (window.CustomEvent) {
        var evt = new window.CustomEvent(event, {
          detail: eventData,
          bubbles: true,
          cancelable: true
        });
        el.dom7EventData = args.filter(function (data, dataIndex) {
          return dataIndex > 0;
        });
        el.dispatchEvent(evt);
        el.dom7EventData = [];
        delete el.dom7EventData;
      }
    }
  }

  return this;
}

function transitionEnd(callback) {
  var dom = this;

  function fireCallBack(e) {
    if (e.target !== this) return;
    callback.call(this, e);
    dom.off('transitionend', fireCallBack);
  }

  if (callback) {
    dom.on('transitionend', fireCallBack);
  }

  return this;
}

function outerWidth(includeMargins) {
  if (this.length > 0) {
    if (includeMargins) {
      var _styles = this.styles();

      return this[0].offsetWidth + parseFloat(_styles.getPropertyValue('margin-right')) + parseFloat(_styles.getPropertyValue('margin-left'));
    }

    return this[0].offsetWidth;
  }

  return null;
}

function outerHeight(includeMargins) {
  if (this.length > 0) {
    if (includeMargins) {
      var _styles2 = this.styles();

      return this[0].offsetHeight + parseFloat(_styles2.getPropertyValue('margin-top')) + parseFloat(_styles2.getPropertyValue('margin-bottom'));
    }

    return this[0].offsetHeight;
  }

  return null;
}

function offset() {
  if (this.length > 0) {
    var window = getWindow();
    var document = getDocument();
    var el = this[0];
    var box = el.getBoundingClientRect();
    var body = document.body;
    var clientTop = el.clientTop || body.clientTop || 0;
    var clientLeft = el.clientLeft || body.clientLeft || 0;
    var scrollTop = el === window ? window.scrollY : el.scrollTop;
    var scrollLeft = el === window ? window.scrollX : el.scrollLeft;
    return {
      top: box.top + scrollTop - clientTop,
      left: box.left + scrollLeft - clientLeft
    };
  }

  return null;
}

function styles() {
  var window = getWindow();
  if (this[0]) return window.getComputedStyle(this[0], null);
  return {};
}

function css(props, value) {
  var window = getWindow();
  var i;

  if (arguments.length === 1) {
    if (typeof props === 'string') {
      // .css('width')
      if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);
    } else {
      // .css({ width: '100px' })
      for (i = 0; i < this.length; i += 1) {
        for (var _prop in props) {
          this[i].style[_prop] = props[_prop];
        }
      }

      return this;
    }
  }

  if (arguments.length === 2 && typeof props === 'string') {
    // .css('width', '100px')
    for (i = 0; i < this.length; i += 1) {
      this[i].style[props] = value;
    }

    return this;
  }

  return this;
}

function each(callback) {
  if (!callback) return this;
  this.forEach(function (el, index) {
    callback.apply(el, [el, index]);
  });
  return this;
}

function filter(callback) {
  var result = arrayFilter(this, callback);
  return $$1(result);
}

function html(html) {
  if (typeof html === 'undefined') {
    return this[0] ? this[0].innerHTML : null;
  }

  for (var i = 0; i < this.length; i += 1) {
    this[i].innerHTML = html;
  }

  return this;
}

function text(text) {
  if (typeof text === 'undefined') {
    return this[0] ? this[0].textContent.trim() : null;
  }

  for (var i = 0; i < this.length; i += 1) {
    this[i].textContent = text;
  }

  return this;
}

function is(selector) {
  var window = getWindow();
  var document = getDocument();
  var el = this[0];
  var compareWith;
  var i;
  if (!el || typeof selector === 'undefined') return false;

  if (typeof selector === 'string') {
    if (el.matches) return el.matches(selector);
    if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);
    if (el.msMatchesSelector) return el.msMatchesSelector(selector);
    compareWith = $$1(selector);

    for (i = 0; i < compareWith.length; i += 1) {
      if (compareWith[i] === el) return true;
    }

    return false;
  }

  if (selector === document) {
    return el === document;
  }

  if (selector === window) {
    return el === window;
  }

  if (selector.nodeType || selector instanceof Dom7) {
    compareWith = selector.nodeType ? [selector] : selector;

    for (i = 0; i < compareWith.length; i += 1) {
      if (compareWith[i] === el) return true;
    }

    return false;
  }

  return false;
}

function index() {
  var child = this[0];
  var i;

  if (child) {
    i = 0; // eslint-disable-next-line

    while ((child = child.previousSibling) !== null) {
      if (child.nodeType === 1) i += 1;
    }

    return i;
  }

  return undefined;
}

function eq(index) {
  if (typeof index === 'undefined') return this;
  var length = this.length;

  if (index > length - 1) {
    return $$1([]);
  }

  if (index < 0) {
    var returnIndex = length + index;
    if (returnIndex < 0) return $$1([]);
    return $$1([this[returnIndex]]);
  }

  return $$1([this[index]]);
}

function append() {
  var newChild;
  var document = getDocument();

  for (var k = 0; k < arguments.length; k += 1) {
    newChild = k < 0 || arguments.length <= k ? undefined : arguments[k];

    for (var i = 0; i < this.length; i += 1) {
      if (typeof newChild === 'string') {
        var tempDiv = document.createElement('div');
        tempDiv.innerHTML = newChild;

        while (tempDiv.firstChild) {
          this[i].appendChild(tempDiv.firstChild);
        }
      } else if (newChild instanceof Dom7) {
        for (var j = 0; j < newChild.length; j += 1) {
          this[i].appendChild(newChild[j]);
        }
      } else {
        this[i].appendChild(newChild);
      }
    }
  }

  return this;
}

function prepend(newChild) {
  var document = getDocument();
  var i;
  var j;

  for (i = 0; i < this.length; i += 1) {
    if (typeof newChild === 'string') {
      var tempDiv = document.createElement('div');
      tempDiv.innerHTML = newChild;

      for (j = tempDiv.childNodes.length - 1; j >= 0; j -= 1) {
        this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
      }
    } else if (newChild instanceof Dom7) {
      for (j = 0; j < newChild.length; j += 1) {
        this[i].insertBefore(newChild[j], this[i].childNodes[0]);
      }
    } else {
      this[i].insertBefore(newChild, this[i].childNodes[0]);
    }
  }

  return this;
}

function next(selector) {
  if (this.length > 0) {
    if (selector) {
      if (this[0].nextElementSibling && $$1(this[0].nextElementSibling).is(selector)) {
        return $$1([this[0].nextElementSibling]);
      }

      return $$1([]);
    }

    if (this[0].nextElementSibling) return $$1([this[0].nextElementSibling]);
    return $$1([]);
  }

  return $$1([]);
}

function nextAll(selector) {
  var nextEls = [];
  var el = this[0];
  if (!el) return $$1([]);

  while (el.nextElementSibling) {
    var _next = el.nextElementSibling; // eslint-disable-line

    if (selector) {
      if ($$1(_next).is(selector)) nextEls.push(_next);
    } else nextEls.push(_next);

    el = _next;
  }

  return $$1(nextEls);
}

function prev(selector) {
  if (this.length > 0) {
    var el = this[0];

    if (selector) {
      if (el.previousElementSibling && $$1(el.previousElementSibling).is(selector)) {
        return $$1([el.previousElementSibling]);
      }

      return $$1([]);
    }

    if (el.previousElementSibling) return $$1([el.previousElementSibling]);
    return $$1([]);
  }

  return $$1([]);
}

function prevAll(selector) {
  var prevEls = [];
  var el = this[0];
  if (!el) return $$1([]);

  while (el.previousElementSibling) {
    var _prev = el.previousElementSibling; // eslint-disable-line

    if (selector) {
      if ($$1(_prev).is(selector)) prevEls.push(_prev);
    } else prevEls.push(_prev);

    el = _prev;
  }

  return $$1(prevEls);
}

function parent(selector) {
  var parents = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    if (this[i].parentNode !== null) {
      if (selector) {
        if ($$1(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);
      } else {
        parents.push(this[i].parentNode);
      }
    }
  }

  return $$1(parents);
}

function parents(selector) {
  var parents = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    var _parent = this[i].parentNode; // eslint-disable-line

    while (_parent) {
      if (selector) {
        if ($$1(_parent).is(selector)) parents.push(_parent);
      } else {
        parents.push(_parent);
      }

      _parent = _parent.parentNode;
    }
  }

  return $$1(parents);
}

function closest(selector) {
  var closest = this; // eslint-disable-line

  if (typeof selector === 'undefined') {
    return $$1([]);
  }

  if (!closest.is(selector)) {
    closest = closest.parents(selector).eq(0);
  }

  return closest;
}

function find(selector) {
  var foundElements = [];

  for (var i = 0; i < this.length; i += 1) {
    var found = this[i].querySelectorAll(selector);

    for (var j = 0; j < found.length; j += 1) {
      foundElements.push(found[j]);
    }
  }

  return $$1(foundElements);
}

function children(selector) {
  var children = []; // eslint-disable-line

  for (var i = 0; i < this.length; i += 1) {
    var childNodes = this[i].children;

    for (var j = 0; j < childNodes.length; j += 1) {
      if (!selector || $$1(childNodes[j]).is(selector)) {
        children.push(childNodes[j]);
      }
    }
  }

  return $$1(children);
}

function remove() {
  for (var i = 0; i < this.length; i += 1) {
    if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);
  }

  return this;
}

var Methods = {
  addClass: addClass,
  removeClass: removeClass,
  hasClass: hasClass,
  toggleClass: toggleClass,
  attr: attr,
  removeAttr: removeAttr,
  transform: transform,
  transition: transition,
  on: on,
  off: off,
  trigger: trigger,
  transitionEnd: transitionEnd,
  outerWidth: outerWidth,
  outerHeight: outerHeight,
  styles: styles,
  offset: offset,
  css: css,
  each: each,
  html: html,
  text: text,
  is: is,
  index: index,
  eq: eq,
  append: append,
  prepend: prepend,
  next: next,
  nextAll: nextAll,
  prev: prev,
  prevAll: prevAll,
  parent: parent,
  parents: parents,
  closest: closest,
  find: find,
  children: children,
  filter: filter,
  remove: remove
};
Object.keys(Methods).forEach(function (methodName) {
  Object.defineProperty($$1.fn, methodName, {
    value: Methods[methodName],
    writable: true
  });
});

function deleteProps(obj) {
  var object = obj;
  Object.keys(object).forEach(function (key) {
    try {
      object[key] = null;
    } catch (e) {// no getter for object
    }

    try {
      delete object[key];
    } catch (e) {// something got wrong
    }
  });
}

function nextTick(callback, delay) {
  if (delay === void 0) {
    delay = 0;
  }

  return setTimeout(callback, delay);
}

function now() {
  return Date.now();
}

function getComputedStyle$1(el) {
  var window = getWindow();
  var style;

  if (window.getComputedStyle) {
    style = window.getComputedStyle(el, null);
  }

  if (!style && el.currentStyle) {
    style = el.currentStyle;
  }

  if (!style) {
    style = el.style;
  }

  return style;
}

function getTranslate(el, axis) {
  if (axis === void 0) {
    axis = 'x';
  }

  var window = getWindow();
  var matrix;
  var curTransform;
  var transformMatrix;
  var curStyle = getComputedStyle$1(el);

  if (window.WebKitCSSMatrix) {
    curTransform = curStyle.transform || curStyle.webkitTransform;

    if (curTransform.split(',').length > 6) {
      curTransform = curTransform.split(', ').map(function (a) {
        return a.replace(',', '.');
      }).join(', ');
    } // Some old versions of Webkit choke when 'none' is passed; pass
    // empty string instead in this case


    transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);
  } else {
    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');
    matrix = transformMatrix.toString().split(',');
  }

  if (axis === 'x') {
    // Latest Chrome and webkits Fix
    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41; // Crazy IE10 Matrix
    else if (matrix.length === 16) curTransform = parseFloat(matrix[12]); // Normal Browsers
      else curTransform = parseFloat(matrix[4]);
  }

  if (axis === 'y') {
    // Latest Chrome and webkits Fix
    if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42; // Crazy IE10 Matrix
    else if (matrix.length === 16) curTransform = parseFloat(matrix[13]); // Normal Browsers
      else curTransform = parseFloat(matrix[5]);
  }

  return curTransform || 0;
}

function isObject$1(o) {
  return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';
}

function extend$1() {
  var to = Object(arguments.length <= 0 ? undefined : arguments[0]);
  var noExtend = ['__proto__', 'constructor', 'prototype'];

  for (var i = 1; i < arguments.length; i += 1) {
    var nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];

    if (nextSource !== undefined && nextSource !== null) {
      var keysArray = Object.keys(Object(nextSource)).filter(function (key) {
        return noExtend.indexOf(key) < 0;
      });

      for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
        var nextKey = keysArray[nextIndex];
        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);

        if (desc !== undefined && desc.enumerable) {
          if (isObject$1(to[nextKey]) && isObject$1(nextSource[nextKey])) {
            if (nextSource[nextKey].__swiper__) {
              to[nextKey] = nextSource[nextKey];
            } else {
              extend$1(to[nextKey], nextSource[nextKey]);
            }
          } else if (!isObject$1(to[nextKey]) && isObject$1(nextSource[nextKey])) {
            to[nextKey] = {};

            if (nextSource[nextKey].__swiper__) {
              to[nextKey] = nextSource[nextKey];
            } else {
              extend$1(to[nextKey], nextSource[nextKey]);
            }
          } else {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
    }
  }

  return to;
}

function bindModuleMethods(instance, obj) {
  Object.keys(obj).forEach(function (key) {
    if (isObject$1(obj[key])) {
      Object.keys(obj[key]).forEach(function (subKey) {
        if (typeof obj[key][subKey] === 'function') {
          obj[key][subKey] = obj[key][subKey].bind(instance);
        }
      });
    }

    instance[key] = obj[key];
  });
}

function classesToSelector(classes) {
  if (classes === void 0) {
    classes = '';
  }

  return "." + classes.trim().replace(/([\.:\/])/g, '\\$1') // eslint-disable-line
  .replace(/ /g, '.');
}

function createElementIfNotDefined($container, params, createElements, checkProps) {
  var document = getDocument();

  if (createElements) {
    Object.keys(checkProps).forEach(function (key) {
      if (!params[key] && params.auto === true) {
        var element = document.createElement('div');
        element.className = checkProps[key];
        $container.append(element);
        params[key] = element;
      }
    });
  }

  return params;
}

var support;

function calcSupport() {
  var window = getWindow();
  var document = getDocument();
  return {
    touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch),
    pointerEvents: !!window.PointerEvent && 'maxTouchPoints' in window.navigator && window.navigator.maxTouchPoints >= 0,
    observer: function checkObserver() {
      return 'MutationObserver' in window || 'WebkitMutationObserver' in window;
    }(),
    passiveListener: function checkPassiveListener() {
      var supportsPassive = false;

      try {
        var opts = Object.defineProperty({}, 'passive', {
          // eslint-disable-next-line
          get: function get() {
            supportsPassive = true;
          }
        });
        window.addEventListener('testPassiveListener', null, opts);
      } catch (e) {// No support
      }

      return supportsPassive;
    }(),
    gestures: function checkGestures() {
      return 'ongesturestart' in window;
    }()
  };
}

function getSupport() {
  if (!support) {
    support = calcSupport();
  }

  return support;
}

var device;

function calcDevice(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      userAgent = _ref.userAgent;

  var support = getSupport();
  var window = getWindow();
  var platform = window.navigator.platform;
  var ua = userAgent || window.navigator.userAgent;
  var device = {
    ios: false,
    android: false
  };
  var screenWidth = window.screen.width;
  var screenHeight = window.screen.height;
  var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/); // eslint-disable-line

  var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
  var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
  var iphone = !ipad && ua.match(/(iPhone\sOS|iOS)\s([\d_]+)/);
  var windows = platform === 'Win32';
  var macos = platform === 'MacIntel'; // iPadOs 13 fix

  var iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];

  if (!ipad && macos && support.touch && iPadScreens.indexOf(screenWidth + "x" + screenHeight) >= 0) {
    ipad = ua.match(/(Version)\/([\d.]+)/);
    if (!ipad) ipad = [0, 1, '13_0_0'];
    macos = false;
  } // Android


  if (android && !windows) {
    device.os = 'android';
    device.android = true;
  }

  if (ipad || iphone || ipod) {
    device.os = 'ios';
    device.ios = true;
  } // Export object


  return device;
}

function getDevice(overrides) {
  if (overrides === void 0) {
    overrides = {};
  }

  if (!device) {
    device = calcDevice(overrides);
  }

  return device;
}

var browser;

function calcBrowser() {
  var window = getWindow();

  function isSafari() {
    var ua = window.navigator.userAgent.toLowerCase();
    return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;
  }

  return {
    isEdge: !!window.navigator.userAgent.match(/Edge/g),
    isSafari: isSafari(),
    isWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent)
  };
}

function getBrowser() {
  if (!browser) {
    browser = calcBrowser();
  }

  return browser;
}

var supportsResizeObserver = function supportsResizeObserver() {
  var window = getWindow();
  return typeof window.ResizeObserver !== 'undefined';
};

const Resize = {
  name: 'resize',
  create: function create() {
    var swiper = this;
    extend$1(swiper, {
      resize: {
        observer: null,
        createObserver: function createObserver() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.resize.observer = new ResizeObserver(function (entries) {
            var width = swiper.width,
                height = swiper.height;
            var newWidth = width;
            var newHeight = height;
            entries.forEach(function (_ref) {
              var contentBoxSize = _ref.contentBoxSize,
                  contentRect = _ref.contentRect,
                  target = _ref.target;
              if (target && target !== swiper.el) return;
              newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;
              newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;
            });

            if (newWidth !== width || newHeight !== height) {
              swiper.resize.resizeHandler();
            }
          });
          swiper.resize.observer.observe(swiper.el);
        },
        removeObserver: function removeObserver() {
          if (swiper.resize.observer && swiper.resize.observer.unobserve && swiper.el) {
            swiper.resize.observer.unobserve(swiper.el);
            swiper.resize.observer = null;
          }
        },
        resizeHandler: function resizeHandler() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.emit('beforeResize');
          swiper.emit('resize');
        },
        orientationChangeHandler: function orientationChangeHandler() {
          if (!swiper || swiper.destroyed || !swiper.initialized) return;
          swiper.emit('orientationchange');
        }
      }
    });
  },
  on: {
    init: function init(swiper) {
      var window = getWindow();

      if (swiper.params.resizeObserver && supportsResizeObserver()) {
        swiper.resize.createObserver();
        return;
      } // Emit resize


      window.addEventListener('resize', swiper.resize.resizeHandler); // Emit orientationchange

      window.addEventListener('orientationchange', swiper.resize.orientationChangeHandler);
    },
    destroy: function destroy(swiper) {
      var window = getWindow();
      swiper.resize.removeObserver();
      window.removeEventListener('resize', swiper.resize.resizeHandler);
      window.removeEventListener('orientationchange', swiper.resize.orientationChangeHandler);
    }
  }
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}
var Observer = {
  attach: function attach(target, options) {
    if (options === void 0) {
      options = {};
    }

    var window = getWindow();
    var swiper = this;
    var ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;
    var observer = new ObserverFunc(function (mutations) {
      // The observerUpdate event should only be triggered
      // once despite the number of mutations.  Additional
      // triggers are redundant and are very costly
      if (mutations.length === 1) {
        swiper.emit('observerUpdate', mutations[0]);
        return;
      }

      var observerUpdate = function observerUpdate() {
        swiper.emit('observerUpdate', mutations[0]);
      };

      if (window.requestAnimationFrame) {
        window.requestAnimationFrame(observerUpdate);
      } else {
        window.setTimeout(observerUpdate, 0);
      }
    });
    observer.observe(target, {
      attributes: typeof options.attributes === 'undefined' ? true : options.attributes,
      childList: typeof options.childList === 'undefined' ? true : options.childList,
      characterData: typeof options.characterData === 'undefined' ? true : options.characterData
    });
    swiper.observer.observers.push(observer);
  },
  init: function init() {
    var swiper = this;
    if (!swiper.support.observer || !swiper.params.observer) return;

    if (swiper.params.observeParents) {
      var containerParents = swiper.$el.parents();

      for (var i = 0; i < containerParents.length; i += 1) {
        swiper.observer.attach(containerParents[i]);
      }
    } // Observe container


    swiper.observer.attach(swiper.$el[0], {
      childList: swiper.params.observeSlideChildren
    }); // Observe wrapper

    swiper.observer.attach(swiper.$wrapperEl[0], {
      attributes: false
    });
  },
  destroy: function destroy() {
    var swiper = this;
    swiper.observer.observers.forEach(function (observer) {
      observer.disconnect();
    });
    swiper.observer.observers = [];
  }
};
const Observer$1 = {
  name: 'observer',
  params: {
    observer: false,
    observeParents: false,
    observeSlideChildren: false
  },
  create: function create() {
    var swiper = this;
    bindModuleMethods(swiper, {
      observer: _extends({}, Observer, {
        observers: []
      })
    });
  },
  on: {
    init: function init(swiper) {
      swiper.observer.init();
    },
    destroy: function destroy(swiper) {
      swiper.observer.destroy();
    }
  }
};

const modular = {
  useParams: function useParams(instanceParams) {
    var instance = this;
    if (!instance.modules) return;
    Object.keys(instance.modules).forEach(function (moduleName) {
      var module = instance.modules[moduleName]; // Extend params

      if (module.params) {
        extend$1(instanceParams, module.params);
      }
    });
  },
  useModules: function useModules(modulesParams) {
    if (modulesParams === void 0) {
      modulesParams = {};
    }

    var instance = this;
    if (!instance.modules) return;
    Object.keys(instance.modules).forEach(function (moduleName) {
      var module = instance.modules[moduleName];
      var moduleParams = modulesParams[moduleName] || {}; // Add event listeners

      if (module.on && instance.on) {
        Object.keys(module.on).forEach(function (moduleEventName) {
          instance.on(moduleEventName, module.on[moduleEventName]);
        });
      } // Module create callback


      if (module.create) {
        module.create.bind(instance)(moduleParams);
      }
    });
  }
};

/* eslint-disable no-underscore-dangle */
const eventsEmitter = {
  on: function on(events, handler, priority) {
    var self = this;
    if (typeof handler !== 'function') return self;
    var method = priority ? 'unshift' : 'push';
    events.split(' ').forEach(function (event) {
      if (!self.eventsListeners[event]) self.eventsListeners[event] = [];
      self.eventsListeners[event][method](handler);
    });
    return self;
  },
  once: function once(events, handler, priority) {
    var self = this;
    if (typeof handler !== 'function') return self;

    function onceHandler() {
      self.off(events, onceHandler);

      if (onceHandler.__emitterProxy) {
        delete onceHandler.__emitterProxy;
      }

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      handler.apply(self, args);
    }

    onceHandler.__emitterProxy = handler;
    return self.on(events, onceHandler, priority);
  },
  onAny: function onAny(handler, priority) {
    var self = this;
    if (typeof handler !== 'function') return self;
    var method = priority ? 'unshift' : 'push';

    if (self.eventsAnyListeners.indexOf(handler) < 0) {
      self.eventsAnyListeners[method](handler);
    }

    return self;
  },
  offAny: function offAny(handler) {
    var self = this;
    if (!self.eventsAnyListeners) return self;
    var index = self.eventsAnyListeners.indexOf(handler);

    if (index >= 0) {
      self.eventsAnyListeners.splice(index, 1);
    }

    return self;
  },
  off: function off(events, handler) {
    var self = this;
    if (!self.eventsListeners) return self;
    events.split(' ').forEach(function (event) {
      if (typeof handler === 'undefined') {
        self.eventsListeners[event] = [];
      } else if (self.eventsListeners[event]) {
        self.eventsListeners[event].forEach(function (eventHandler, index) {
          if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {
            self.eventsListeners[event].splice(index, 1);
          }
        });
      }
    });
    return self;
  },
  emit: function emit() {
    var self = this;
    if (!self.eventsListeners) return self;
    var events;
    var data;
    var context;

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    if (typeof args[0] === 'string' || Array.isArray(args[0])) {
      events = args[0];
      data = args.slice(1, args.length);
      context = self;
    } else {
      events = args[0].events;
      data = args[0].data;
      context = args[0].context || self;
    }

    data.unshift(context);
    var eventsArray = Array.isArray(events) ? events : events.split(' ');
    eventsArray.forEach(function (event) {
      if (self.eventsAnyListeners && self.eventsAnyListeners.length) {
        self.eventsAnyListeners.forEach(function (eventHandler) {
          eventHandler.apply(context, [event].concat(data));
        });
      }

      if (self.eventsListeners && self.eventsListeners[event]) {
        self.eventsListeners[event].forEach(function (eventHandler) {
          eventHandler.apply(context, data);
        });
      }
    });
    return self;
  }
};

function updateSize() {
  var swiper = this;
  var width;
  var height;
  var $el = swiper.$el;

  if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {
    width = swiper.params.width;
  } else {
    width = $el[0].clientWidth;
  }

  if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {
    height = swiper.params.height;
  } else {
    height = $el[0].clientHeight;
  }

  if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {
    return;
  } // Subtract paddings


  width = width - parseInt($el.css('padding-left') || 0, 10) - parseInt($el.css('padding-right') || 0, 10);
  height = height - parseInt($el.css('padding-top') || 0, 10) - parseInt($el.css('padding-bottom') || 0, 10);
  if (Number.isNaN(width)) width = 0;
  if (Number.isNaN(height)) height = 0;
  extend$1(swiper, {
    width: width,
    height: height,
    size: swiper.isHorizontal() ? width : height
  });
}

function updateSlides() {
  var swiper = this;

  function getDirectionLabel(property) {
    if (swiper.isHorizontal()) {
      return property;
    } // prettier-ignore


    return {
      'width': 'height',
      'margin-top': 'margin-left',
      'margin-bottom ': 'margin-right',
      'margin-left': 'margin-top',
      'margin-right': 'margin-bottom',
      'padding-left': 'padding-top',
      'padding-right': 'padding-bottom',
      'marginRight': 'marginBottom'
    }[property];
  }

  function getDirectionPropertyValue(node, label) {
    return parseFloat(node.getPropertyValue(getDirectionLabel(label)) || 0);
  }

  var params = swiper.params;
  var $wrapperEl = swiper.$wrapperEl,
      swiperSize = swiper.size,
      rtl = swiper.rtlTranslate,
      wrongRTL = swiper.wrongRTL;
  var isVirtual = swiper.virtual && params.virtual.enabled;
  var previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;
  var slides = $wrapperEl.children("." + swiper.params.slideClass);
  var slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;
  var snapGrid = [];
  var slidesGrid = [];
  var slidesSizesGrid = [];
  var offsetBefore = params.slidesOffsetBefore;

  if (typeof offsetBefore === 'function') {
    offsetBefore = params.slidesOffsetBefore.call(swiper);
  }

  var offsetAfter = params.slidesOffsetAfter;

  if (typeof offsetAfter === 'function') {
    offsetAfter = params.slidesOffsetAfter.call(swiper);
  }

  var previousSnapGridLength = swiper.snapGrid.length;
  var previousSlidesGridLength = swiper.slidesGrid.length;
  var spaceBetween = params.spaceBetween;
  var slidePosition = -offsetBefore;
  var prevSlideSize = 0;
  var index = 0;

  if (typeof swiperSize === 'undefined') {
    return;
  }

  if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {
    spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;
  }

  swiper.virtualSize = -spaceBetween; // reset margins

  if (rtl) slides.css({
    marginLeft: '',
    marginTop: ''
  });else slides.css({
    marginRight: '',
    marginBottom: ''
  });
  var slidesNumberEvenToRows;

  if (params.slidesPerColumn > 1) {
    if (Math.floor(slidesLength / params.slidesPerColumn) === slidesLength / swiper.params.slidesPerColumn) {
      slidesNumberEvenToRows = slidesLength;
    } else {
      slidesNumberEvenToRows = Math.ceil(slidesLength / params.slidesPerColumn) * params.slidesPerColumn;
    }

    if (params.slidesPerView !== 'auto' && params.slidesPerColumnFill === 'row') {
      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, params.slidesPerView * params.slidesPerColumn);
    }
  } // Calc slides


  var slideSize;
  var slidesPerColumn = params.slidesPerColumn;
  var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;
  var numFullColumns = Math.floor(slidesLength / params.slidesPerColumn);

  for (var i = 0; i < slidesLength; i += 1) {
    slideSize = 0;
    var slide = slides.eq(i);

    if (params.slidesPerColumn > 1) {
      // Set slides order
      var newSlideOrderIndex = void 0;
      var column = void 0;
      var row = void 0;

      if (params.slidesPerColumnFill === 'row' && params.slidesPerGroup > 1) {
        var groupIndex = Math.floor(i / (params.slidesPerGroup * params.slidesPerColumn));
        var slideIndexInGroup = i - params.slidesPerColumn * params.slidesPerGroup * groupIndex;
        var columnsInGroup = groupIndex === 0 ? params.slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * slidesPerColumn * params.slidesPerGroup) / slidesPerColumn), params.slidesPerGroup);
        row = Math.floor(slideIndexInGroup / columnsInGroup);
        column = slideIndexInGroup - row * columnsInGroup + groupIndex * params.slidesPerGroup;
        newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;
        slide.css({
          '-webkit-box-ordinal-group': newSlideOrderIndex,
          '-moz-box-ordinal-group': newSlideOrderIndex,
          '-ms-flex-order': newSlideOrderIndex,
          '-webkit-order': newSlideOrderIndex,
          order: newSlideOrderIndex
        });
      } else if (params.slidesPerColumnFill === 'column') {
        column = Math.floor(i / slidesPerColumn);
        row = i - column * slidesPerColumn;

        if (column > numFullColumns || column === numFullColumns && row === slidesPerColumn - 1) {
          row += 1;

          if (row >= slidesPerColumn) {
            row = 0;
            column += 1;
          }
        }
      } else {
        row = Math.floor(i / slidesPerRow);
        column = i - row * slidesPerRow;
      }

      slide.css(getDirectionLabel('margin-top'), row !== 0 && params.spaceBetween && params.spaceBetween + "px");
    }

    if (slide.css('display') === 'none') continue; // eslint-disable-line

    if (params.slidesPerView === 'auto') {
      var slideStyles = getComputedStyle(slide[0]);
      var currentTransform = slide[0].style.transform;
      var currentWebKitTransform = slide[0].style.webkitTransform;

      if (currentTransform) {
        slide[0].style.transform = 'none';
      }

      if (currentWebKitTransform) {
        slide[0].style.webkitTransform = 'none';
      }

      if (params.roundLengths) {
        slideSize = swiper.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);
      } else {
        // eslint-disable-next-line
        var width = getDirectionPropertyValue(slideStyles, 'width');
        var paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');
        var paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');
        var marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');
        var marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');
        var boxSizing = slideStyles.getPropertyValue('box-sizing');

        if (boxSizing && boxSizing === 'border-box') {
          slideSize = width + marginLeft + marginRight;
        } else {
          var _slide$ = slide[0],
              clientWidth = _slide$.clientWidth,
              offsetWidth = _slide$.offsetWidth;
          slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);
        }
      }

      if (currentTransform) {
        slide[0].style.transform = currentTransform;
      }

      if (currentWebKitTransform) {
        slide[0].style.webkitTransform = currentWebKitTransform;
      }

      if (params.roundLengths) slideSize = Math.floor(slideSize);
    } else {
      slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;
      if (params.roundLengths) slideSize = Math.floor(slideSize);

      if (slides[i]) {
        slides[i].style[getDirectionLabel('width')] = slideSize + "px";
      }
    }

    if (slides[i]) {
      slides[i].swiperSlideSize = slideSize;
    }

    slidesSizesGrid.push(slideSize);

    if (params.centeredSlides) {
      slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;
      if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
      if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;
      if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
    } else {
      if (params.roundLengths) slidePosition = Math.floor(slidePosition);
      if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);
      slidesGrid.push(slidePosition);
      slidePosition = slidePosition + slideSize + spaceBetween;
    }

    swiper.virtualSize += slideSize + spaceBetween;
    prevSlideSize = slideSize;
    index += 1;
  }

  swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;
  var newSlidesGrid;

  if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {
    $wrapperEl.css({
      width: swiper.virtualSize + params.spaceBetween + "px"
    });
  }

  if (params.setWrapperSize) {
    var _$wrapperEl$css;

    $wrapperEl.css((_$wrapperEl$css = {}, _$wrapperEl$css[getDirectionLabel('width')] = swiper.virtualSize + params.spaceBetween + "px", _$wrapperEl$css));
  }

  if (params.slidesPerColumn > 1) {
    var _$wrapperEl$css2;

    swiper.virtualSize = (slideSize + params.spaceBetween) * slidesNumberEvenToRows;
    swiper.virtualSize = Math.ceil(swiper.virtualSize / params.slidesPerColumn) - params.spaceBetween;
    $wrapperEl.css((_$wrapperEl$css2 = {}, _$wrapperEl$css2[getDirectionLabel('width')] = swiper.virtualSize + params.spaceBetween + "px", _$wrapperEl$css2));

    if (params.centeredSlides) {
      newSlidesGrid = [];

      for (var _i = 0; _i < snapGrid.length; _i += 1) {
        var slidesGridItem = snapGrid[_i];
        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);
        if (snapGrid[_i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);
      }

      snapGrid = newSlidesGrid;
    }
  } // Remove last grid elements depending on width


  if (!params.centeredSlides) {
    newSlidesGrid = [];

    for (var _i2 = 0; _i2 < snapGrid.length; _i2 += 1) {
      var _slidesGridItem = snapGrid[_i2];
      if (params.roundLengths) _slidesGridItem = Math.floor(_slidesGridItem);

      if (snapGrid[_i2] <= swiper.virtualSize - swiperSize) {
        newSlidesGrid.push(_slidesGridItem);
      }
    }

    snapGrid = newSlidesGrid;

    if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {
      snapGrid.push(swiper.virtualSize - swiperSize);
    }
  }

  if (snapGrid.length === 0) snapGrid = [0];

  if (params.spaceBetween !== 0) {
    var _slides$filter$css;

    var key = swiper.isHorizontal() && rtl ? 'marginLeft' : getDirectionLabel('marginRight');
    slides.filter(function (_, slideIndex) {
      if (!params.cssMode) return true;

      if (slideIndex === slides.length - 1) {
        return false;
      }

      return true;
    }).css((_slides$filter$css = {}, _slides$filter$css[key] = spaceBetween + "px", _slides$filter$css));
  }

  if (params.centeredSlides && params.centeredSlidesBounds) {
    var allSlidesSize = 0;
    slidesSizesGrid.forEach(function (slideSizeValue) {
      allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
    });
    allSlidesSize -= params.spaceBetween;
    var maxSnap = allSlidesSize - swiperSize;
    snapGrid = snapGrid.map(function (snap) {
      if (snap < 0) return -offsetBefore;
      if (snap > maxSnap) return maxSnap + offsetAfter;
      return snap;
    });
  }

  if (params.centerInsufficientSlides) {
    var _allSlidesSize = 0;
    slidesSizesGrid.forEach(function (slideSizeValue) {
      _allSlidesSize += slideSizeValue + (params.spaceBetween ? params.spaceBetween : 0);
    });
    _allSlidesSize -= params.spaceBetween;

    if (_allSlidesSize < swiperSize) {
      var allSlidesOffset = (swiperSize - _allSlidesSize) / 2;
      snapGrid.forEach(function (snap, snapIndex) {
        snapGrid[snapIndex] = snap - allSlidesOffset;
      });
      slidesGrid.forEach(function (snap, snapIndex) {
        slidesGrid[snapIndex] = snap + allSlidesOffset;
      });
    }
  }

  extend$1(swiper, {
    slides: slides,
    snapGrid: snapGrid,
    slidesGrid: slidesGrid,
    slidesSizesGrid: slidesSizesGrid
  });

  if (slidesLength !== previousSlidesLength) {
    swiper.emit('slidesLengthChange');
  }

  if (snapGrid.length !== previousSnapGridLength) {
    if (swiper.params.watchOverflow) swiper.checkOverflow();
    swiper.emit('snapGridLengthChange');
  }

  if (slidesGrid.length !== previousSlidesGridLength) {
    swiper.emit('slidesGridLengthChange');
  }

  if (params.watchSlidesProgress || params.watchSlidesVisibility) {
    swiper.updateSlidesOffset();
  }
}

function updateAutoHeight(speed) {
  var swiper = this;
  var activeSlides = [];
  var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
  var newHeight = 0;
  var i;

  if (typeof speed === 'number') {
    swiper.setTransition(speed);
  } else if (speed === true) {
    swiper.setTransition(swiper.params.speed);
  }

  var getSlideByIndex = function getSlideByIndex(index) {
    if (isVirtual) {
      return swiper.slides.filter(function (el) {
        return parseInt(el.getAttribute('data-swiper-slide-index'), 10) === index;
      })[0];
    }

    return swiper.slides.eq(index)[0];
  }; // Find slides currently in view


  if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {
    if (swiper.params.centeredSlides) {
      swiper.visibleSlides.each(function (slide) {
        activeSlides.push(slide);
      });
    } else {
      for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {
        var index = swiper.activeIndex + i;
        if (index > swiper.slides.length && !isVirtual) break;
        activeSlides.push(getSlideByIndex(index));
      }
    }
  } else {
    activeSlides.push(getSlideByIndex(swiper.activeIndex));
  } // Find new height from highest slide in view


  for (i = 0; i < activeSlides.length; i += 1) {
    if (typeof activeSlides[i] !== 'undefined') {
      var height = activeSlides[i].offsetHeight;
      newHeight = height > newHeight ? height : newHeight;
    }
  } // Update Height


  if (newHeight) swiper.$wrapperEl.css('height', newHeight + "px");
}

function updateSlidesOffset() {
  var swiper = this;
  var slides = swiper.slides;

  for (var i = 0; i < slides.length; i += 1) {
    slides[i].swiperSlideOffset = swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop;
  }
}

function updateSlidesProgress(translate) {
  if (translate === void 0) {
    translate = this && this.translate || 0;
  }

  var swiper = this;
  var params = swiper.params;
  var slides = swiper.slides,
      rtl = swiper.rtlTranslate;
  if (slides.length === 0) return;
  if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();
  var offsetCenter = -translate;
  if (rtl) offsetCenter = translate; // Visible Slides

  slides.removeClass(params.slideVisibleClass);
  swiper.visibleSlidesIndexes = [];
  swiper.visibleSlides = [];

  for (var i = 0; i < slides.length; i += 1) {
    var slide = slides[i];
    var slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slide.swiperSlideOffset) / (slide.swiperSlideSize + params.spaceBetween);

    if (params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) {
      var slideBefore = -(offsetCenter - slide.swiperSlideOffset);
      var slideAfter = slideBefore + swiper.slidesSizesGrid[i];
      var isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;

      if (isVisible) {
        swiper.visibleSlides.push(slide);
        swiper.visibleSlidesIndexes.push(i);
        slides.eq(i).addClass(params.slideVisibleClass);
      }
    }

    slide.progress = rtl ? -slideProgress : slideProgress;
  }

  swiper.visibleSlides = $$1(swiper.visibleSlides);
}

function updateProgress(translate) {
  var swiper = this;

  if (typeof translate === 'undefined') {
    var multiplier = swiper.rtlTranslate ? -1 : 1; // eslint-disable-next-line

    translate = swiper && swiper.translate && swiper.translate * multiplier || 0;
  }

  var params = swiper.params;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();
  var progress = swiper.progress,
      isBeginning = swiper.isBeginning,
      isEnd = swiper.isEnd;
  var wasBeginning = isBeginning;
  var wasEnd = isEnd;

  if (translatesDiff === 0) {
    progress = 0;
    isBeginning = true;
    isEnd = true;
  } else {
    progress = (translate - swiper.minTranslate()) / translatesDiff;
    isBeginning = progress <= 0;
    isEnd = progress >= 1;
  }

  extend$1(swiper, {
    progress: progress,
    isBeginning: isBeginning,
    isEnd: isEnd
  });
  if (params.watchSlidesProgress || params.watchSlidesVisibility || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);

  if (isBeginning && !wasBeginning) {
    swiper.emit('reachBeginning toEdge');
  }

  if (isEnd && !wasEnd) {
    swiper.emit('reachEnd toEdge');
  }

  if (wasBeginning && !isBeginning || wasEnd && !isEnd) {
    swiper.emit('fromEdge');
  }

  swiper.emit('progress', progress);
}

function updateSlidesClasses() {
  var swiper = this;
  var slides = swiper.slides,
      params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex,
      realIndex = swiper.realIndex;
  var isVirtual = swiper.virtual && params.virtual.enabled;
  slides.removeClass(params.slideActiveClass + " " + params.slideNextClass + " " + params.slidePrevClass + " " + params.slideDuplicateActiveClass + " " + params.slideDuplicateNextClass + " " + params.slideDuplicatePrevClass);
  var activeSlide;

  if (isVirtual) {
    activeSlide = swiper.$wrapperEl.find("." + params.slideClass + "[data-swiper-slide-index=\"" + activeIndex + "\"]");
  } else {
    activeSlide = slides.eq(activeIndex);
  } // Active classes


  activeSlide.addClass(params.slideActiveClass);

  if (params.loop) {
    // Duplicate to all looped slides
    if (activeSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + realIndex + "\"]").addClass(params.slideDuplicateActiveClass);
    } else {
      $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + realIndex + "\"]").addClass(params.slideDuplicateActiveClass);
    }
  } // Next Slide


  var nextSlide = activeSlide.nextAll("." + params.slideClass).eq(0).addClass(params.slideNextClass);

  if (params.loop && nextSlide.length === 0) {
    nextSlide = slides.eq(0);
    nextSlide.addClass(params.slideNextClass);
  } // Prev Slide


  var prevSlide = activeSlide.prevAll("." + params.slideClass).eq(0).addClass(params.slidePrevClass);

  if (params.loop && prevSlide.length === 0) {
    prevSlide = slides.eq(-1);
    prevSlide.addClass(params.slidePrevClass);
  }

  if (params.loop) {
    // Duplicate to all looped slides
    if (nextSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + nextSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicateNextClass);
    } else {
      $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + nextSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicateNextClass);
    }

    if (prevSlide.hasClass(params.slideDuplicateClass)) {
      $wrapperEl.children("." + params.slideClass + ":not(." + params.slideDuplicateClass + ")[data-swiper-slide-index=\"" + prevSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicatePrevClass);
    } else {
      $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + "[data-swiper-slide-index=\"" + prevSlide.attr('data-swiper-slide-index') + "\"]").addClass(params.slideDuplicatePrevClass);
    }
  }

  swiper.emitSlidesClasses();
}

function updateActiveIndex(newActiveIndex) {
  var swiper = this;
  var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;
  var slidesGrid = swiper.slidesGrid,
      snapGrid = swiper.snapGrid,
      params = swiper.params,
      previousIndex = swiper.activeIndex,
      previousRealIndex = swiper.realIndex,
      previousSnapIndex = swiper.snapIndex;
  var activeIndex = newActiveIndex;
  var snapIndex;

  if (typeof activeIndex === 'undefined') {
    for (var i = 0; i < slidesGrid.length; i += 1) {
      if (typeof slidesGrid[i + 1] !== 'undefined') {
        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {
          activeIndex = i;
        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {
          activeIndex = i + 1;
        }
      } else if (translate >= slidesGrid[i]) {
        activeIndex = i;
      }
    } // Normalize slideIndex


    if (params.normalizeSlideIndex) {
      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;
    }
  }

  if (snapGrid.indexOf(translate) >= 0) {
    snapIndex = snapGrid.indexOf(translate);
  } else {
    var skip = Math.min(params.slidesPerGroupSkip, activeIndex);
    snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);
  }

  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

  if (activeIndex === previousIndex) {
    if (snapIndex !== previousSnapIndex) {
      swiper.snapIndex = snapIndex;
      swiper.emit('snapIndexChange');
    }

    return;
  } // Get real index


  var realIndex = parseInt(swiper.slides.eq(activeIndex).attr('data-swiper-slide-index') || activeIndex, 10);
  extend$1(swiper, {
    snapIndex: snapIndex,
    realIndex: realIndex,
    previousIndex: previousIndex,
    activeIndex: activeIndex
  });
  swiper.emit('activeIndexChange');
  swiper.emit('snapIndexChange');

  if (previousRealIndex !== realIndex) {
    swiper.emit('realIndexChange');
  }

  if (swiper.initialized || swiper.params.runCallbacksOnInit) {
    swiper.emit('slideChange');
  }
}

function updateClickedSlide(e) {
  var swiper = this;
  var params = swiper.params;
  var slide = $$1(e.target).closest("." + params.slideClass)[0];
  var slideFound = false;
  var slideIndex;

  if (slide) {
    for (var i = 0; i < swiper.slides.length; i += 1) {
      if (swiper.slides[i] === slide) {
        slideFound = true;
        slideIndex = i;
        break;
      }
    }
  }

  if (slide && slideFound) {
    swiper.clickedSlide = slide;

    if (swiper.virtual && swiper.params.virtual.enabled) {
      swiper.clickedIndex = parseInt($$1(slide).attr('data-swiper-slide-index'), 10);
    } else {
      swiper.clickedIndex = slideIndex;
    }
  } else {
    swiper.clickedSlide = undefined;
    swiper.clickedIndex = undefined;
    return;
  }

  if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {
    swiper.slideToClickedSlide();
  }
}

const update = {
  updateSize: updateSize,
  updateSlides: updateSlides,
  updateAutoHeight: updateAutoHeight,
  updateSlidesOffset: updateSlidesOffset,
  updateSlidesProgress: updateSlidesProgress,
  updateProgress: updateProgress,
  updateSlidesClasses: updateSlidesClasses,
  updateActiveIndex: updateActiveIndex,
  updateClickedSlide: updateClickedSlide
};

function getSwiperTranslate(axis) {
  if (axis === void 0) {
    axis = this.isHorizontal() ? 'x' : 'y';
  }

  var swiper = this;
  var params = swiper.params,
      rtl = swiper.rtlTranslate,
      translate = swiper.translate,
      $wrapperEl = swiper.$wrapperEl;

  if (params.virtualTranslate) {
    return rtl ? -translate : translate;
  }

  if (params.cssMode) {
    return translate;
  }

  var currentTranslate = getTranslate($wrapperEl[0], axis);
  if (rtl) currentTranslate = -currentTranslate;
  return currentTranslate || 0;
}

function setTranslate(translate, byController) {
  var swiper = this;
  var rtl = swiper.rtlTranslate,
      params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      wrapperEl = swiper.wrapperEl,
      progress = swiper.progress;
  var x = 0;
  var y = 0;
  var z = 0;

  if (swiper.isHorizontal()) {
    x = rtl ? -translate : translate;
  } else {
    y = translate;
  }

  if (params.roundLengths) {
    x = Math.floor(x);
    y = Math.floor(y);
  }

  if (params.cssMode) {
    wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;
  } else if (!params.virtualTranslate) {
    $wrapperEl.transform("translate3d(" + x + "px, " + y + "px, " + z + "px)");
  }

  swiper.previousTranslate = swiper.translate;
  swiper.translate = swiper.isHorizontal() ? x : y; // Check if we need to update progress

  var newProgress;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (translate - swiper.minTranslate()) / translatesDiff;
  }

  if (newProgress !== progress) {
    swiper.updateProgress(translate);
  }

  swiper.emit('setTranslate', swiper.translate, byController);
}

function minTranslate() {
  return -this.snapGrid[0];
}

function maxTranslate() {
  return -this.snapGrid[this.snapGrid.length - 1];
}

function translateTo(translate, speed, runCallbacks, translateBounds, internal) {
  if (translate === void 0) {
    translate = 0;
  }

  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  if (translateBounds === void 0) {
    translateBounds = true;
  }

  var swiper = this;
  var params = swiper.params,
      wrapperEl = swiper.wrapperEl;

  if (swiper.animating && params.preventInteractionOnTransition) {
    return false;
  }

  var minTranslate = swiper.minTranslate();
  var maxTranslate = swiper.maxTranslate();
  var newTranslate;
  if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate; // Update progress

  swiper.updateProgress(newTranslate);

  if (params.cssMode) {
    var isH = swiper.isHorizontal();

    if (speed === 0) {
      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
    } else {
      // eslint-disable-next-line
      if (wrapperEl.scrollTo) {
        var _wrapperEl$scrollTo;

        wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? 'left' : 'top'] = -newTranslate, _wrapperEl$scrollTo.behavior = 'smooth', _wrapperEl$scrollTo));
      } else {
        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;
      }
    }

    return true;
  }

  if (speed === 0) {
    swiper.setTransition(0);
    swiper.setTranslate(newTranslate);

    if (runCallbacks) {
      swiper.emit('beforeTransitionStart', speed, internal);
      swiper.emit('transitionEnd');
    }
  } else {
    swiper.setTransition(speed);
    swiper.setTranslate(newTranslate);

    if (runCallbacks) {
      swiper.emit('beforeTransitionStart', speed, internal);
      swiper.emit('transitionStart');
    }

    if (!swiper.animating) {
      swiper.animating = true;

      if (!swiper.onTranslateToWrapperTransitionEnd) {
        swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {
          if (!swiper || swiper.destroyed) return;
          if (e.target !== this) return;
          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
          swiper.onTranslateToWrapperTransitionEnd = null;
          delete swiper.onTranslateToWrapperTransitionEnd;

          if (runCallbacks) {
            swiper.emit('transitionEnd');
          }
        };
      }

      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);
      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onTranslateToWrapperTransitionEnd);
    }
  }

  return true;
}

const translate = {
  getTranslate: getSwiperTranslate,
  setTranslate: setTranslate,
  minTranslate: minTranslate,
  maxTranslate: maxTranslate,
  translateTo: translateTo
};

function setTransition(duration, byController) {
  var swiper = this;

  if (!swiper.params.cssMode) {
    swiper.$wrapperEl.transition(duration);
  }

  swiper.emit('setTransition', duration, byController);
}

function transitionStart(runCallbacks, direction) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var activeIndex = swiper.activeIndex,
      params = swiper.params,
      previousIndex = swiper.previousIndex;
  if (params.cssMode) return;

  if (params.autoHeight) {
    swiper.updateAutoHeight();
  }

  var dir = direction;

  if (!dir) {
    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
  }

  swiper.emit('transitionStart');

  if (runCallbacks && activeIndex !== previousIndex) {
    if (dir === 'reset') {
      swiper.emit('slideResetTransitionStart');
      return;
    }

    swiper.emit('slideChangeTransitionStart');

    if (dir === 'next') {
      swiper.emit('slideNextTransitionStart');
    } else {
      swiper.emit('slidePrevTransitionStart');
    }
  }
}

function transitionEnd$1(runCallbacks, direction) {
  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var activeIndex = swiper.activeIndex,
      previousIndex = swiper.previousIndex,
      params = swiper.params;
  swiper.animating = false;
  if (params.cssMode) return;
  swiper.setTransition(0);
  var dir = direction;

  if (!dir) {
    if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';
  }

  swiper.emit('transitionEnd');

  if (runCallbacks && activeIndex !== previousIndex) {
    if (dir === 'reset') {
      swiper.emit('slideResetTransitionEnd');
      return;
    }

    swiper.emit('slideChangeTransitionEnd');

    if (dir === 'next') {
      swiper.emit('slideNextTransitionEnd');
    } else {
      swiper.emit('slidePrevTransitionEnd');
    }
  }
}

const transition$1 = {
  setTransition: setTransition,
  transitionStart: transitionStart,
  transitionEnd: transitionEnd$1
};

function slideTo(index, speed, runCallbacks, internal, initial) {
  if (index === void 0) {
    index = 0;
  }

  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  if (typeof index !== 'number' && typeof index !== 'string') {
    throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. [" + typeof index + "] given.");
  }

  if (typeof index === 'string') {
    /**
     * The `index` argument converted from `string` to `number`.
     * @type {number}
     */
    var indexAsNumber = parseInt(index, 10);
    /**
     * Determines whether the `index` argument is a valid `number`
     * after being converted from the `string` type.
     * @type {boolean}
     */

    var isValidNumber = isFinite(indexAsNumber);

    if (!isValidNumber) {
      throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. [" + index + "] given.");
    } // Knowing that the converted `index` is a valid number,
    // we can update the original argument's value.


    index = indexAsNumber;
  }

  var swiper = this;
  var slideIndex = index;
  if (slideIndex < 0) slideIndex = 0;
  var params = swiper.params,
      snapGrid = swiper.snapGrid,
      slidesGrid = swiper.slidesGrid,
      previousIndex = swiper.previousIndex,
      activeIndex = swiper.activeIndex,
      rtl = swiper.rtlTranslate,
      wrapperEl = swiper.wrapperEl,
      enabled = swiper.enabled;

  if (swiper.animating && params.preventInteractionOnTransition || !enabled && !internal && !initial) {
    return false;
  }

  var skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);
  var snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);
  if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;

  if ((activeIndex || params.initialSlide || 0) === (previousIndex || 0) && runCallbacks) {
    swiper.emit('beforeSlideChangeStart');
  }

  var translate = -snapGrid[snapIndex]; // Update progress

  swiper.updateProgress(translate); // Normalize slideIndex

  if (params.normalizeSlideIndex) {
    for (var i = 0; i < slidesGrid.length; i += 1) {
      var normalizedTranslate = -Math.floor(translate * 100);
      var normalizedGird = Math.floor(slidesGrid[i] * 100);
      var normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);

      if (typeof slidesGrid[i + 1] !== 'undefined') {
        if (normalizedTranslate >= normalizedGird && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGird) / 2) {
          slideIndex = i;
        } else if (normalizedTranslate >= normalizedGird && normalizedTranslate < normalizedGridNext) {
          slideIndex = i + 1;
        }
      } else if (normalizedTranslate >= normalizedGird) {
        slideIndex = i;
      }
    }
  } // Directions locks


  if (swiper.initialized && slideIndex !== activeIndex) {
    if (!swiper.allowSlideNext && translate < swiper.translate && translate < swiper.minTranslate()) {
      return false;
    }

    if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {
      if ((activeIndex || 0) !== slideIndex) return false;
    }
  }

  var direction;
  if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset'; // Update Index

  if (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate) {
    swiper.updateActiveIndex(slideIndex); // Update Height

    if (params.autoHeight) {
      swiper.updateAutoHeight();
    }

    swiper.updateSlidesClasses();

    if (params.effect !== 'slide') {
      swiper.setTranslate(translate);
    }

    if (direction !== 'reset') {
      swiper.transitionStart(runCallbacks, direction);
      swiper.transitionEnd(runCallbacks, direction);
    }

    return false;
  }

  if (params.cssMode) {
    var isH = swiper.isHorizontal();
    var t = -translate;

    if (rtl) {
      t = wrapperEl.scrollWidth - wrapperEl.offsetWidth - t;
    }

    if (speed === 0) {
      wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
    } else {
      // eslint-disable-next-line
      if (wrapperEl.scrollTo) {
        var _wrapperEl$scrollTo;

        wrapperEl.scrollTo((_wrapperEl$scrollTo = {}, _wrapperEl$scrollTo[isH ? 'left' : 'top'] = t, _wrapperEl$scrollTo.behavior = 'smooth', _wrapperEl$scrollTo));
      } else {
        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;
      }
    }

    return true;
  }

  if (speed === 0) {
    swiper.setTransition(0);
    swiper.setTranslate(translate);
    swiper.updateActiveIndex(slideIndex);
    swiper.updateSlidesClasses();
    swiper.emit('beforeTransitionStart', speed, internal);
    swiper.transitionStart(runCallbacks, direction);
    swiper.transitionEnd(runCallbacks, direction);
  } else {
    swiper.setTransition(speed);
    swiper.setTranslate(translate);
    swiper.updateActiveIndex(slideIndex);
    swiper.updateSlidesClasses();
    swiper.emit('beforeTransitionStart', speed, internal);
    swiper.transitionStart(runCallbacks, direction);

    if (!swiper.animating) {
      swiper.animating = true;

      if (!swiper.onSlideToWrapperTransitionEnd) {
        swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {
          if (!swiper || swiper.destroyed) return;
          if (e.target !== this) return;
          swiper.$wrapperEl[0].removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
          swiper.$wrapperEl[0].removeEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
          swiper.onSlideToWrapperTransitionEnd = null;
          delete swiper.onSlideToWrapperTransitionEnd;
          swiper.transitionEnd(runCallbacks, direction);
        };
      }

      swiper.$wrapperEl[0].addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);
      swiper.$wrapperEl[0].addEventListener('webkitTransitionEnd', swiper.onSlideToWrapperTransitionEnd);
    }
  }

  return true;
}

function slideToLoop(index, speed, runCallbacks, internal) {
  if (index === void 0) {
    index = 0;
  }

  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var newIndex = index;

  if (swiper.params.loop) {
    newIndex += swiper.loopedSlides;
  }

  return swiper.slideTo(newIndex, speed, runCallbacks, internal);
}

/* eslint no-unused-vars: "off" */
function slideNext(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var params = swiper.params,
      animating = swiper.animating,
      enabled = swiper.enabled;
  if (!enabled) return swiper;
  var increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup;

  if (params.loop) {
    if (animating && params.loopPreventsSlide) return false;
    swiper.loopFix(); // eslint-disable-next-line

    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
  }

  return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);
}

/* eslint no-unused-vars: "off" */
function slidePrev(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  var params = swiper.params,
      animating = swiper.animating,
      snapGrid = swiper.snapGrid,
      slidesGrid = swiper.slidesGrid,
      rtlTranslate = swiper.rtlTranslate,
      enabled = swiper.enabled;
  if (!enabled) return swiper;

  if (params.loop) {
    if (animating && params.loopPreventsSlide) return false;
    swiper.loopFix(); // eslint-disable-next-line

    swiper._clientLeft = swiper.$wrapperEl[0].clientLeft;
  }

  var translate = rtlTranslate ? swiper.translate : -swiper.translate;

  function normalize(val) {
    if (val < 0) return -Math.floor(Math.abs(val));
    return Math.floor(val);
  }

  var normalizedTranslate = normalize(translate);
  var normalizedSnapGrid = snapGrid.map(function (val) {
    return normalize(val);
  });
  var currentSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate)];
  var prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];

  if (typeof prevSnap === 'undefined' && params.cssMode) {
    snapGrid.forEach(function (snap) {
      if (!prevSnap && normalizedTranslate >= snap) prevSnap = snap;
    });
  }

  var prevIndex;

  if (typeof prevSnap !== 'undefined') {
    prevIndex = slidesGrid.indexOf(prevSnap);
    if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;
  }

  return swiper.slideTo(prevIndex, speed, runCallbacks, internal);
}

/* eslint no-unused-vars: "off" */
function slideReset(speed, runCallbacks, internal) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  var swiper = this;
  return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);
}

/* eslint no-unused-vars: "off" */
function slideToClosest(speed, runCallbacks, internal, threshold) {
  if (speed === void 0) {
    speed = this.params.speed;
  }

  if (runCallbacks === void 0) {
    runCallbacks = true;
  }

  if (threshold === void 0) {
    threshold = 0.5;
  }

  var swiper = this;
  var index = swiper.activeIndex;
  var skip = Math.min(swiper.params.slidesPerGroupSkip, index);
  var snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);
  var translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;

  if (translate >= swiper.snapGrid[snapIndex]) {
    // The current translate is on or after the current snap index, so the choice
    // is between the current index and the one after it.
    var currentSnap = swiper.snapGrid[snapIndex];
    var nextSnap = swiper.snapGrid[snapIndex + 1];

    if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {
      index += swiper.params.slidesPerGroup;
    }
  } else {
    // The current translate is before the current snap index, so the choice
    // is between the current index and the one before it.
    var prevSnap = swiper.snapGrid[snapIndex - 1];
    var _currentSnap = swiper.snapGrid[snapIndex];

    if (translate - prevSnap <= (_currentSnap - prevSnap) * threshold) {
      index -= swiper.params.slidesPerGroup;
    }
  }

  index = Math.max(index, 0);
  index = Math.min(index, swiper.slidesGrid.length - 1);
  return swiper.slideTo(index, speed, runCallbacks, internal);
}

function slideToClickedSlide() {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl;
  var slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;
  var slideToIndex = swiper.clickedIndex;
  var realIndex;

  if (params.loop) {
    if (swiper.animating) return;
    realIndex = parseInt($$1(swiper.clickedSlide).attr('data-swiper-slide-index'), 10);

    if (params.centeredSlides) {
      if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {
        swiper.loopFix();
        slideToIndex = $wrapperEl.children("." + params.slideClass + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + params.slideDuplicateClass + ")").eq(0).index();
        nextTick(function () {
          swiper.slideTo(slideToIndex);
        });
      } else {
        swiper.slideTo(slideToIndex);
      }
    } else if (slideToIndex > swiper.slides.length - slidesPerView) {
      swiper.loopFix();
      slideToIndex = $wrapperEl.children("." + params.slideClass + "[data-swiper-slide-index=\"" + realIndex + "\"]:not(." + params.slideDuplicateClass + ")").eq(0).index();
      nextTick(function () {
        swiper.slideTo(slideToIndex);
      });
    } else {
      swiper.slideTo(slideToIndex);
    }
  } else {
    swiper.slideTo(slideToIndex);
  }
}

const slide = {
  slideTo: slideTo,
  slideToLoop: slideToLoop,
  slideNext: slideNext,
  slidePrev: slidePrev,
  slideReset: slideReset,
  slideToClosest: slideToClosest,
  slideToClickedSlide: slideToClickedSlide
};

function loopCreate() {
  var swiper = this;
  var document = getDocument();
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl; // Remove duplicated slides

  $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass).remove();
  var slides = $wrapperEl.children("." + params.slideClass);

  if (params.loopFillGroupWithBlank) {
    var blankSlidesNum = params.slidesPerGroup - slides.length % params.slidesPerGroup;

    if (blankSlidesNum !== params.slidesPerGroup) {
      for (var i = 0; i < blankSlidesNum; i += 1) {
        var blankNode = $$1(document.createElement('div')).addClass(params.slideClass + " " + params.slideBlankClass);
        $wrapperEl.append(blankNode);
      }

      slides = $wrapperEl.children("." + params.slideClass);
    }
  }

  if (params.slidesPerView === 'auto' && !params.loopedSlides) params.loopedSlides = slides.length;
  swiper.loopedSlides = Math.ceil(parseFloat(params.loopedSlides || params.slidesPerView, 10));
  swiper.loopedSlides += params.loopAdditionalSlides;

  if (swiper.loopedSlides > slides.length) {
    swiper.loopedSlides = slides.length;
  }

  var prependSlides = [];
  var appendSlides = [];
  slides.each(function (el, index) {
    var slide = $$1(el);

    if (index < swiper.loopedSlides) {
      appendSlides.push(el);
    }

    if (index < slides.length && index >= slides.length - swiper.loopedSlides) {
      prependSlides.push(el);
    }

    slide.attr('data-swiper-slide-index', index);
  });

  for (var _i = 0; _i < appendSlides.length; _i += 1) {
    $wrapperEl.append($$1(appendSlides[_i].cloneNode(true)).addClass(params.slideDuplicateClass));
  }

  for (var _i2 = prependSlides.length - 1; _i2 >= 0; _i2 -= 1) {
    $wrapperEl.prepend($$1(prependSlides[_i2].cloneNode(true)).addClass(params.slideDuplicateClass));
  }
}

function loopFix() {
  var swiper = this;
  swiper.emit('beforeLoopFix');
  var activeIndex = swiper.activeIndex,
      slides = swiper.slides,
      loopedSlides = swiper.loopedSlides,
      allowSlidePrev = swiper.allowSlidePrev,
      allowSlideNext = swiper.allowSlideNext,
      snapGrid = swiper.snapGrid,
      rtl = swiper.rtlTranslate;
  var newIndex;
  swiper.allowSlidePrev = true;
  swiper.allowSlideNext = true;
  var snapTranslate = -snapGrid[activeIndex];
  var diff = snapTranslate - swiper.getTranslate(); // Fix For Negative Oversliding

  if (activeIndex < loopedSlides) {
    newIndex = slides.length - loopedSlides * 3 + activeIndex;
    newIndex += loopedSlides;
    var slideChanged = swiper.slideTo(newIndex, 0, false, true);

    if (slideChanged && diff !== 0) {
      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
    }
  } else if (activeIndex >= slides.length - loopedSlides) {
    // Fix For Positive Oversliding
    newIndex = -slides.length + activeIndex + loopedSlides;
    newIndex += loopedSlides;

    var _slideChanged = swiper.slideTo(newIndex, 0, false, true);

    if (_slideChanged && diff !== 0) {
      swiper.setTranslate((rtl ? -swiper.translate : swiper.translate) - diff);
    }
  }

  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;
  swiper.emit('loopFix');
}

function loopDestroy() {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params,
      slides = swiper.slides;
  $wrapperEl.children("." + params.slideClass + "." + params.slideDuplicateClass + ",." + params.slideClass + "." + params.slideBlankClass).remove();
  slides.removeAttr('data-swiper-slide-index');
}

const loop = {
  loopCreate: loopCreate,
  loopFix: loopFix,
  loopDestroy: loopDestroy
};

function setGrabCursor(moving) {
  var swiper = this;
  if (swiper.support.touch || !swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;
  var el = swiper.el;
  el.style.cursor = 'move';
  el.style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';
  el.style.cursor = moving ? '-moz-grabbin' : '-moz-grab';
  el.style.cursor = moving ? 'grabbing' : 'grab';
}

function unsetGrabCursor() {
  var swiper = this;

  if (swiper.support.touch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {
    return;
  }

  swiper.el.style.cursor = '';
}

const grabCursor = {
  setGrabCursor: setGrabCursor,
  unsetGrabCursor: unsetGrabCursor
};

function appendSlide(slides) {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params;

  if (params.loop) {
    swiper.loopDestroy();
  }

  if (typeof slides === 'object' && 'length' in slides) {
    for (var i = 0; i < slides.length; i += 1) {
      if (slides[i]) $wrapperEl.append(slides[i]);
    }
  } else {
    $wrapperEl.append(slides);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }
}

function prependSlide(slides) {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex;

  if (params.loop) {
    swiper.loopDestroy();
  }

  var newActiveIndex = activeIndex + 1;

  if (typeof slides === 'object' && 'length' in slides) {
    for (var i = 0; i < slides.length; i += 1) {
      if (slides[i]) $wrapperEl.prepend(slides[i]);
    }

    newActiveIndex = activeIndex + slides.length;
  } else {
    $wrapperEl.prepend(slides);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }

  swiper.slideTo(newActiveIndex, 0, false);
}

function addSlide(index, slides) {
  var swiper = this;
  var $wrapperEl = swiper.$wrapperEl,
      params = swiper.params,
      activeIndex = swiper.activeIndex;
  var activeIndexBuffer = activeIndex;

  if (params.loop) {
    activeIndexBuffer -= swiper.loopedSlides;
    swiper.loopDestroy();
    swiper.slides = $wrapperEl.children("." + params.slideClass);
  }

  var baseLength = swiper.slides.length;

  if (index <= 0) {
    swiper.prependSlide(slides);
    return;
  }

  if (index >= baseLength) {
    swiper.appendSlide(slides);
    return;
  }

  var newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;
  var slidesBuffer = [];

  for (var i = baseLength - 1; i >= index; i -= 1) {
    var currentSlide = swiper.slides.eq(i);
    currentSlide.remove();
    slidesBuffer.unshift(currentSlide);
  }

  if (typeof slides === 'object' && 'length' in slides) {
    for (var _i = 0; _i < slides.length; _i += 1) {
      if (slides[_i]) $wrapperEl.append(slides[_i]);
    }

    newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;
  } else {
    $wrapperEl.append(slides);
  }

  for (var _i2 = 0; _i2 < slidesBuffer.length; _i2 += 1) {
    $wrapperEl.append(slidesBuffer[_i2]);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }

  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
}

function removeSlide(slidesIndexes) {
  var swiper = this;
  var params = swiper.params,
      $wrapperEl = swiper.$wrapperEl,
      activeIndex = swiper.activeIndex;
  var activeIndexBuffer = activeIndex;

  if (params.loop) {
    activeIndexBuffer -= swiper.loopedSlides;
    swiper.loopDestroy();
    swiper.slides = $wrapperEl.children("." + params.slideClass);
  }

  var newActiveIndex = activeIndexBuffer;
  var indexToRemove;

  if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {
    for (var i = 0; i < slidesIndexes.length; i += 1) {
      indexToRemove = slidesIndexes[i];
      if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
    }

    newActiveIndex = Math.max(newActiveIndex, 0);
  } else {
    indexToRemove = slidesIndexes;
    if (swiper.slides[indexToRemove]) swiper.slides.eq(indexToRemove).remove();
    if (indexToRemove < newActiveIndex) newActiveIndex -= 1;
    newActiveIndex = Math.max(newActiveIndex, 0);
  }

  if (params.loop) {
    swiper.loopCreate();
  }

  if (!(params.observer && swiper.support.observer)) {
    swiper.update();
  }

  if (params.loop) {
    swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);
  } else {
    swiper.slideTo(newActiveIndex, 0, false);
  }
}

function removeAllSlides() {
  var swiper = this;
  var slidesIndexes = [];

  for (var i = 0; i < swiper.slides.length; i += 1) {
    slidesIndexes.push(i);
  }

  swiper.removeSlide(slidesIndexes);
}

const manipulation = {
  appendSlide: appendSlide,
  prependSlide: prependSlide,
  addSlide: addSlide,
  removeSlide: removeSlide,
  removeAllSlides: removeAllSlides
};

function onTouchStart(event) {
  var swiper = this;
  var document = getDocument();
  var window = getWindow();
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches,
      enabled = swiper.enabled;
  if (!enabled) return;

  if (swiper.animating && params.preventInteractionOnTransition) {
    return;
  }

  var e = event;
  if (e.originalEvent) e = e.originalEvent;
  var $targetEl = $$1(e.target);

  if (params.touchEventsTarget === 'wrapper') {
    if (!$targetEl.closest(swiper.wrapperEl).length) return;
  }

  data.isTouchEvent = e.type === 'touchstart';
  if (!data.isTouchEvent && 'which' in e && e.which === 3) return;
  if (!data.isTouchEvent && 'button' in e && e.button > 0) return;
  if (data.isTouched && data.isMoved) return; // change target el for shadow root componenet

  var swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';

  if (swipingClassHasValue && e.target && e.target.shadowRoot && event.path && event.path[0]) {
    $targetEl = $$1(event.path[0]);
  }

  if (params.noSwiping && $targetEl.closest(params.noSwipingSelector ? params.noSwipingSelector : "." + params.noSwipingClass)[0]) {
    swiper.allowClick = true;
    return;
  }

  if (params.swipeHandler) {
    if (!$targetEl.closest(params.swipeHandler)[0]) return;
  }

  touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;
  touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;
  var startX = touches.currentX;
  var startY = touches.currentY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore

  var edgeSwipeDetection = params.edgeSwipeDetection || params.iOSEdgeSwipeDetection;
  var edgeSwipeThreshold = params.edgeSwipeThreshold || params.iOSEdgeSwipeThreshold;

  if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {
    if (edgeSwipeDetection === 'prevent') {
      event.preventDefault();
    } else {
      return;
    }
  }

  extend$1(data, {
    isTouched: true,
    isMoved: false,
    allowTouchCallbacks: true,
    isScrolling: undefined,
    startMoving: undefined
  });
  touches.startX = startX;
  touches.startY = startY;
  data.touchStartTime = now();
  swiper.allowClick = true;
  swiper.updateSize();
  swiper.swipeDirection = undefined;
  if (params.threshold > 0) data.allowThresholdMove = false;

  if (e.type !== 'touchstart') {
    var preventDefault = true;
    if ($targetEl.is(data.formElements)) preventDefault = false;

    if (document.activeElement && $$1(document.activeElement).is(data.formElements) && document.activeElement !== $targetEl[0]) {
      document.activeElement.blur();
    }

    var shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;

    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !$targetEl[0].isContentEditable) {
      e.preventDefault();
    }
  }

  swiper.emit('touchStart', e);
}

function onTouchMove(event) {
  var document = getDocument();
  var swiper = this;
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches,
      rtl = swiper.rtlTranslate,
      enabled = swiper.enabled;
  if (!enabled) return;
  var e = event;
  if (e.originalEvent) e = e.originalEvent;

  if (!data.isTouched) {
    if (data.startMoving && data.isScrolling) {
      swiper.emit('touchMoveOpposite', e);
    }

    return;
  }

  if (data.isTouchEvent && e.type !== 'touchmove') return;
  var targetTouch = e.type === 'touchmove' && e.targetTouches && (e.targetTouches[0] || e.changedTouches[0]);
  var pageX = e.type === 'touchmove' ? targetTouch.pageX : e.pageX;
  var pageY = e.type === 'touchmove' ? targetTouch.pageY : e.pageY;

  if (e.preventedByNestedSwiper) {
    touches.startX = pageX;
    touches.startY = pageY;
    return;
  }

  if (!swiper.allowTouchMove) {
    // isMoved = true;
    swiper.allowClick = false;

    if (data.isTouched) {
      extend$1(touches, {
        startX: pageX,
        startY: pageY,
        currentX: pageX,
        currentY: pageY
      });
      data.touchStartTime = now();
    }

    return;
  }

  if (data.isTouchEvent && params.touchReleaseOnEdges && !params.loop) {
    if (swiper.isVertical()) {
      // Vertical
      if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {
        data.isTouched = false;
        data.isMoved = false;
        return;
      }
    } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {
      return;
    }
  }

  if (data.isTouchEvent && document.activeElement) {
    if (e.target === document.activeElement && $$1(e.target).is(data.formElements)) {
      data.isMoved = true;
      swiper.allowClick = false;
      return;
    }
  }

  if (data.allowTouchCallbacks) {
    swiper.emit('touchMove', e);
  }

  if (e.targetTouches && e.targetTouches.length > 1) return;
  touches.currentX = pageX;
  touches.currentY = pageY;
  var diffX = touches.currentX - touches.startX;
  var diffY = touches.currentY - touches.startY;
  if (swiper.params.threshold && Math.sqrt(Math.pow(diffX, 2) + Math.pow(diffY, 2)) < swiper.params.threshold) return;

  if (typeof data.isScrolling === 'undefined') {
    var touchAngle;

    if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {
      data.isScrolling = false;
    } else {
      // eslint-disable-next-line
      if (diffX * diffX + diffY * diffY >= 25) {
        touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;
        data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;
      }
    }
  }

  if (data.isScrolling) {
    swiper.emit('touchMoveOpposite', e);
  }

  if (typeof data.startMoving === 'undefined') {
    if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {
      data.startMoving = true;
    }
  }

  if (data.isScrolling) {
    data.isTouched = false;
    return;
  }

  if (!data.startMoving) {
    return;
  }

  swiper.allowClick = false;

  if (!params.cssMode && e.cancelable) {
    e.preventDefault();
  }

  if (params.touchMoveStopPropagation && !params.nested) {
    e.stopPropagation();
  }

  if (!data.isMoved) {
    if (params.loop) {
      swiper.loopFix();
    }

    data.startTranslate = swiper.getTranslate();
    swiper.setTransition(0);

    if (swiper.animating) {
      swiper.$wrapperEl.trigger('webkitTransitionEnd transitionend');
    }

    data.allowMomentumBounce = false; // Grab Cursor

    if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
      swiper.setGrabCursor(true);
    }

    swiper.emit('sliderFirstMove', e);
  }

  swiper.emit('sliderMove', e);
  data.isMoved = true;
  var diff = swiper.isHorizontal() ? diffX : diffY;
  touches.diff = diff;
  diff *= params.touchRatio;
  if (rtl) diff = -diff;
  swiper.swipeDirection = diff > 0 ? 'prev' : 'next';
  data.currentTranslate = diff + data.startTranslate;
  var disableParentSwiper = true;
  var resistanceRatio = params.resistanceRatio;

  if (params.touchReleaseOnEdges) {
    resistanceRatio = 0;
  }

  if (diff > 0 && data.currentTranslate > swiper.minTranslate()) {
    disableParentSwiper = false;
    if (params.resistance) data.currentTranslate = swiper.minTranslate() - 1 + Math.pow(-swiper.minTranslate() + data.startTranslate + diff, resistanceRatio);
  } else if (diff < 0 && data.currentTranslate < swiper.maxTranslate()) {
    disableParentSwiper = false;
    if (params.resistance) data.currentTranslate = swiper.maxTranslate() + 1 - Math.pow(swiper.maxTranslate() - data.startTranslate - diff, resistanceRatio);
  }

  if (disableParentSwiper) {
    e.preventedByNestedSwiper = true;
  } // Directions locks


  if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  }

  if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {
    data.currentTranslate = data.startTranslate;
  }

  if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {
    data.currentTranslate = data.startTranslate;
  } // Threshold


  if (params.threshold > 0) {
    if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {
      if (!data.allowThresholdMove) {
        data.allowThresholdMove = true;
        touches.startX = touches.currentX;
        touches.startY = touches.currentY;
        data.currentTranslate = data.startTranslate;
        touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;
        return;
      }
    } else {
      data.currentTranslate = data.startTranslate;
      return;
    }
  }

  if (!params.followFinger || params.cssMode) return; // Update active index in free mode

  if (params.freeMode || params.watchSlidesProgress || params.watchSlidesVisibility) {
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  }

  if (params.freeMode) {
    // Velocity
    if (data.velocities.length === 0) {
      data.velocities.push({
        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],
        time: data.touchStartTime
      });
    }

    data.velocities.push({
      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],
      time: now()
    });
  } // Update progress


  swiper.updateProgress(data.currentTranslate); // Update translate

  swiper.setTranslate(data.currentTranslate);
}

function onTouchEnd(event) {
  var swiper = this;
  var data = swiper.touchEventsData;
  var params = swiper.params,
      touches = swiper.touches,
      rtl = swiper.rtlTranslate,
      $wrapperEl = swiper.$wrapperEl,
      slidesGrid = swiper.slidesGrid,
      snapGrid = swiper.snapGrid,
      enabled = swiper.enabled;
  if (!enabled) return;
  var e = event;
  if (e.originalEvent) e = e.originalEvent;

  if (data.allowTouchCallbacks) {
    swiper.emit('touchEnd', e);
  }

  data.allowTouchCallbacks = false;

  if (!data.isTouched) {
    if (data.isMoved && params.grabCursor) {
      swiper.setGrabCursor(false);
    }

    data.isMoved = false;
    data.startMoving = false;
    return;
  } // Return Grab Cursor


  if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {
    swiper.setGrabCursor(false);
  } // Time diff


  var touchEndTime = now();
  var timeDiff = touchEndTime - data.touchStartTime; // Tap, doubleTap, Click

  if (swiper.allowClick) {
    swiper.updateClickedSlide(e);
    swiper.emit('tap click', e);

    if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {
      swiper.emit('doubleTap doubleClick', e);
    }
  }

  data.lastClickTime = now();
  nextTick(function () {
    if (!swiper.destroyed) swiper.allowClick = true;
  });

  if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 || data.currentTranslate === data.startTranslate) {
    data.isTouched = false;
    data.isMoved = false;
    data.startMoving = false;
    return;
  }

  data.isTouched = false;
  data.isMoved = false;
  data.startMoving = false;
  var currentPos;

  if (params.followFinger) {
    currentPos = rtl ? swiper.translate : -swiper.translate;
  } else {
    currentPos = -data.currentTranslate;
  }

  if (params.cssMode) {
    return;
  }

  if (params.freeMode) {
    if (currentPos < -swiper.minTranslate()) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    if (currentPos > -swiper.maxTranslate()) {
      if (swiper.slides.length < snapGrid.length) {
        swiper.slideTo(snapGrid.length - 1);
      } else {
        swiper.slideTo(swiper.slides.length - 1);
      }

      return;
    }

    if (params.freeModeMomentum) {
      if (data.velocities.length > 1) {
        var lastMoveEvent = data.velocities.pop();
        var velocityEvent = data.velocities.pop();
        var distance = lastMoveEvent.position - velocityEvent.position;
        var time = lastMoveEvent.time - velocityEvent.time;
        swiper.velocity = distance / time;
        swiper.velocity /= 2;

        if (Math.abs(swiper.velocity) < params.freeModeMinimumVelocity) {
          swiper.velocity = 0;
        } // this implies that the user stopped moving a finger then released.
        // There would be no events with distance zero, so the last event is stale.


        if (time > 150 || now() - lastMoveEvent.time > 300) {
          swiper.velocity = 0;
        }
      } else {
        swiper.velocity = 0;
      }

      swiper.velocity *= params.freeModeMomentumVelocityRatio;
      data.velocities.length = 0;
      var momentumDuration = 1000 * params.freeModeMomentumRatio;
      var momentumDistance = swiper.velocity * momentumDuration;
      var newPosition = swiper.translate + momentumDistance;
      if (rtl) newPosition = -newPosition;
      var doBounce = false;
      var afterBouncePosition;
      var bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeModeMomentumBounceRatio;
      var needsLoopFix;

      if (newPosition < swiper.maxTranslate()) {
        if (params.freeModeMomentumBounce) {
          if (newPosition + swiper.maxTranslate() < -bounceAmount) {
            newPosition = swiper.maxTranslate() - bounceAmount;
          }

          afterBouncePosition = swiper.maxTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.maxTranslate();
        }

        if (params.loop && params.centeredSlides) needsLoopFix = true;
      } else if (newPosition > swiper.minTranslate()) {
        if (params.freeModeMomentumBounce) {
          if (newPosition - swiper.minTranslate() > bounceAmount) {
            newPosition = swiper.minTranslate() + bounceAmount;
          }

          afterBouncePosition = swiper.minTranslate();
          doBounce = true;
          data.allowMomentumBounce = true;
        } else {
          newPosition = swiper.minTranslate();
        }

        if (params.loop && params.centeredSlides) needsLoopFix = true;
      } else if (params.freeModeSticky) {
        var nextSlide;

        for (var j = 0; j < snapGrid.length; j += 1) {
          if (snapGrid[j] > -newPosition) {
            nextSlide = j;
            break;
          }
        }

        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {
          newPosition = snapGrid[nextSlide];
        } else {
          newPosition = snapGrid[nextSlide - 1];
        }

        newPosition = -newPosition;
      }

      if (needsLoopFix) {
        swiper.once('transitionEnd', function () {
          swiper.loopFix();
        });
      } // Fix duration


      if (swiper.velocity !== 0) {
        if (rtl) {
          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);
        } else {
          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);
        }

        if (params.freeModeSticky) {
          // If freeModeSticky is active and the user ends a swipe with a slow-velocity
          // event, then durations can be 20+ seconds to slide one (or zero!) slides.
          // It's easy to see this when simulating touch with mouse events. To fix this,
          // limit single-slide swipes to the default slide duration. This also has the
          // nice side effect of matching slide speed if the user stopped moving before
          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.
          // For faster swipes, also apply limits (albeit higher ones).
          var moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);
          var currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];

          if (moveDistance < currentSlideSize) {
            momentumDuration = params.speed;
          } else if (moveDistance < 2 * currentSlideSize) {
            momentumDuration = params.speed * 1.5;
          } else {
            momentumDuration = params.speed * 2.5;
          }
        }
      } else if (params.freeModeSticky) {
        swiper.slideToClosest();
        return;
      }

      if (params.freeModeMomentumBounce && doBounce) {
        swiper.updateProgress(afterBouncePosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart(true, swiper.swipeDirection);
        swiper.animating = true;
        $wrapperEl.transitionEnd(function () {
          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;
          swiper.emit('momentumBounce');
          swiper.setTransition(params.speed);
          setTimeout(function () {
            swiper.setTranslate(afterBouncePosition);
            $wrapperEl.transitionEnd(function () {
              if (!swiper || swiper.destroyed) return;
              swiper.transitionEnd();
            });
          }, 0);
        });
      } else if (swiper.velocity) {
        swiper.updateProgress(newPosition);
        swiper.setTransition(momentumDuration);
        swiper.setTranslate(newPosition);
        swiper.transitionStart(true, swiper.swipeDirection);

        if (!swiper.animating) {
          swiper.animating = true;
          $wrapperEl.transitionEnd(function () {
            if (!swiper || swiper.destroyed) return;
            swiper.transitionEnd();
          });
        }
      } else {
        swiper.emit('_freeModeNoMomentumRelease');
        swiper.updateProgress(newPosition);
      }

      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    } else if (params.freeModeSticky) {
      swiper.slideToClosest();
      return;
    } else if (params.freeMode) {
      swiper.emit('_freeModeNoMomentumRelease');
    }

    if (!params.freeModeMomentum || timeDiff >= params.longSwipesMs) {
      swiper.updateProgress();
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }

    return;
  } // Find current slide


  var stopIndex = 0;
  var groupSize = swiper.slidesSizesGrid[0];

  for (var i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {
    var _increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;

    if (typeof slidesGrid[i + _increment] !== 'undefined') {
      if (currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + _increment]) {
        stopIndex = i;
        groupSize = slidesGrid[i + _increment] - slidesGrid[i];
      }
    } else if (currentPos >= slidesGrid[i]) {
      stopIndex = i;
      groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];
    }
  } // Find current slide size


  var ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;
  var increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;

  if (timeDiff > params.longSwipesMs) {
    // Long touches
    if (!params.longSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    if (swiper.swipeDirection === 'next') {
      if (ratio >= params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);
    }

    if (swiper.swipeDirection === 'prev') {
      if (ratio > 1 - params.longSwipesRatio) swiper.slideTo(stopIndex + increment);else swiper.slideTo(stopIndex);
    }
  } else {
    // Short swipes
    if (!params.shortSwipes) {
      swiper.slideTo(swiper.activeIndex);
      return;
    }

    var isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);

    if (!isNavButtonTarget) {
      if (swiper.swipeDirection === 'next') {
        swiper.slideTo(stopIndex + increment);
      }

      if (swiper.swipeDirection === 'prev') {
        swiper.slideTo(stopIndex);
      }
    } else if (e.target === swiper.navigation.nextEl) {
      swiper.slideTo(stopIndex + increment);
    } else {
      swiper.slideTo(stopIndex);
    }
  }
}

function onResize() {
  var swiper = this;
  var params = swiper.params,
      el = swiper.el;
  if (el && el.offsetWidth === 0) return; // Breakpoints

  if (params.breakpoints) {
    swiper.setBreakpoint();
  } // Save locks


  var allowSlideNext = swiper.allowSlideNext,
      allowSlidePrev = swiper.allowSlidePrev,
      snapGrid = swiper.snapGrid; // Disable locks on resize

  swiper.allowSlideNext = true;
  swiper.allowSlidePrev = true;
  swiper.updateSize();
  swiper.updateSlides();
  swiper.updateSlidesClasses();

  if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides) {
    swiper.slideTo(swiper.slides.length - 1, 0, false, true);
  } else {
    swiper.slideTo(swiper.activeIndex, 0, false, true);
  }

  if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {
    swiper.autoplay.run();
  } // Return locks after resize


  swiper.allowSlidePrev = allowSlidePrev;
  swiper.allowSlideNext = allowSlideNext;

  if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {
    swiper.checkOverflow();
  }
}

function onClick(e) {
  var swiper = this;
  if (!swiper.enabled) return;

  if (!swiper.allowClick) {
    if (swiper.params.preventClicks) e.preventDefault();

    if (swiper.params.preventClicksPropagation && swiper.animating) {
      e.stopPropagation();
      e.stopImmediatePropagation();
    }
  }
}

function onScroll() {
  var swiper = this;
  var wrapperEl = swiper.wrapperEl,
      rtlTranslate = swiper.rtlTranslate,
      enabled = swiper.enabled;
  if (!enabled) return;
  swiper.previousTranslate = swiper.translate;

  if (swiper.isHorizontal()) {
    if (rtlTranslate) {
      swiper.translate = wrapperEl.scrollWidth - wrapperEl.offsetWidth - wrapperEl.scrollLeft;
    } else {
      swiper.translate = -wrapperEl.scrollLeft;
    }
  } else {
    swiper.translate = -wrapperEl.scrollTop;
  } // eslint-disable-next-line


  if (swiper.translate === -0) swiper.translate = 0;
  swiper.updateActiveIndex();
  swiper.updateSlidesClasses();
  var newProgress;
  var translatesDiff = swiper.maxTranslate() - swiper.minTranslate();

  if (translatesDiff === 0) {
    newProgress = 0;
  } else {
    newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;
  }

  if (newProgress !== swiper.progress) {
    swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);
  }

  swiper.emit('setTranslate', swiper.translate, false);
}

var dummyEventAttached = false;

function dummyEventListener() {}

function attachEvents() {
  var swiper = this;
  var document = getDocument();
  var params = swiper.params,
      touchEvents = swiper.touchEvents,
      el = swiper.el,
      wrapperEl = swiper.wrapperEl,
      device = swiper.device,
      support = swiper.support;
  swiper.onTouchStart = onTouchStart.bind(swiper);
  swiper.onTouchMove = onTouchMove.bind(swiper);
  swiper.onTouchEnd = onTouchEnd.bind(swiper);

  if (params.cssMode) {
    swiper.onScroll = onScroll.bind(swiper);
  }

  swiper.onClick = onClick.bind(swiper);
  var capture = !!params.nested; // Touch Events

  if (!support.touch && support.pointerEvents) {
    el.addEventListener(touchEvents.start, swiper.onTouchStart, false);
    document.addEventListener(touchEvents.move, swiper.onTouchMove, capture);
    document.addEventListener(touchEvents.end, swiper.onTouchEnd, false);
  } else {
    if (support.touch) {
      var passiveListener = touchEvents.start === 'touchstart' && support.passiveListener && params.passiveListeners ? {
        passive: true,
        capture: false
      } : false;
      el.addEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
      el.addEventListener(touchEvents.move, swiper.onTouchMove, support.passiveListener ? {
        passive: false,
        capture: capture
      } : capture);
      el.addEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);

      if (touchEvents.cancel) {
        el.addEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
      }

      if (!dummyEventAttached) {
        document.addEventListener('touchstart', dummyEventListener);
        dummyEventAttached = true;
      }
    }

    if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {
      el.addEventListener('mousedown', swiper.onTouchStart, false);
      document.addEventListener('mousemove', swiper.onTouchMove, capture);
      document.addEventListener('mouseup', swiper.onTouchEnd, false);
    }
  } // Prevent Links Clicks


  if (params.preventClicks || params.preventClicksPropagation) {
    el.addEventListener('click', swiper.onClick, true);
  }

  if (params.cssMode) {
    wrapperEl.addEventListener('scroll', swiper.onScroll);
  } // Resize handler


  if (params.updateOnWindowResize) {
    swiper.on(device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);
  } else {
    swiper.on('observerUpdate', onResize, true);
  }
}

function detachEvents() {
  var swiper = this;
  var document = getDocument();
  var params = swiper.params,
      touchEvents = swiper.touchEvents,
      el = swiper.el,
      wrapperEl = swiper.wrapperEl,
      device = swiper.device,
      support = swiper.support;
  var capture = !!params.nested; // Touch Events

  if (!support.touch && support.pointerEvents) {
    el.removeEventListener(touchEvents.start, swiper.onTouchStart, false);
    document.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
    document.removeEventListener(touchEvents.end, swiper.onTouchEnd, false);
  } else {
    if (support.touch) {
      var passiveListener = touchEvents.start === 'onTouchStart' && support.passiveListener && params.passiveListeners ? {
        passive: true,
        capture: false
      } : false;
      el.removeEventListener(touchEvents.start, swiper.onTouchStart, passiveListener);
      el.removeEventListener(touchEvents.move, swiper.onTouchMove, capture);
      el.removeEventListener(touchEvents.end, swiper.onTouchEnd, passiveListener);

      if (touchEvents.cancel) {
        el.removeEventListener(touchEvents.cancel, swiper.onTouchEnd, passiveListener);
      }
    }

    if (params.simulateTouch && !device.ios && !device.android || params.simulateTouch && !support.touch && device.ios) {
      el.removeEventListener('mousedown', swiper.onTouchStart, false);
      document.removeEventListener('mousemove', swiper.onTouchMove, capture);
      document.removeEventListener('mouseup', swiper.onTouchEnd, false);
    }
  } // Prevent Links Clicks


  if (params.preventClicks || params.preventClicksPropagation) {
    el.removeEventListener('click', swiper.onClick, true);
  }

  if (params.cssMode) {
    wrapperEl.removeEventListener('scroll', swiper.onScroll);
  } // Resize handler


  swiper.off(device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize);
}

const events = {
  attachEvents: attachEvents,
  detachEvents: detachEvents
};

function setBreakpoint() {
  var swiper = this;
  var activeIndex = swiper.activeIndex,
      initialized = swiper.initialized,
      _swiper$loopedSlides = swiper.loopedSlides,
      loopedSlides = _swiper$loopedSlides === void 0 ? 0 : _swiper$loopedSlides,
      params = swiper.params,
      $el = swiper.$el;
  var breakpoints = params.breakpoints;
  if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return; // Get breakpoint for window width and update parameters

  var breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);
  if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;
  var breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;

  if (breakpointOnlyParams) {
    ['slidesPerView', 'spaceBetween', 'slidesPerGroup', 'slidesPerGroupSkip', 'slidesPerColumn'].forEach(function (param) {
      var paramValue = breakpointOnlyParams[param];
      if (typeof paramValue === 'undefined') return;

      if (param === 'slidesPerView' && (paramValue === 'AUTO' || paramValue === 'auto')) {
        breakpointOnlyParams[param] = 'auto';
      } else if (param === 'slidesPerView') {
        breakpointOnlyParams[param] = parseFloat(paramValue);
      } else {
        breakpointOnlyParams[param] = parseInt(paramValue, 10);
      }
    });
  }

  var breakpointParams = breakpointOnlyParams || swiper.originalParams;
  var wasMultiRow = params.slidesPerColumn > 1;
  var isMultiRow = breakpointParams.slidesPerColumn > 1;
  var wasEnabled = params.enabled;

  if (wasMultiRow && !isMultiRow) {
    $el.removeClass(params.containerModifierClass + "multirow " + params.containerModifierClass + "multirow-column");
    swiper.emitContainerClasses();
  } else if (!wasMultiRow && isMultiRow) {
    $el.addClass(params.containerModifierClass + "multirow");

    if (breakpointParams.slidesPerColumnFill === 'column') {
      $el.addClass(params.containerModifierClass + "multirow-column");
    }

    swiper.emitContainerClasses();
  }

  var directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;
  var needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);

  if (directionChanged && initialized) {
    swiper.changeDirection();
  }

  extend$1(swiper.params, breakpointParams);
  var isEnabled = swiper.params.enabled;
  extend$1(swiper, {
    allowTouchMove: swiper.params.allowTouchMove,
    allowSlideNext: swiper.params.allowSlideNext,
    allowSlidePrev: swiper.params.allowSlidePrev
  });

  if (wasEnabled && !isEnabled) {
    swiper.disable();
  } else if (!wasEnabled && isEnabled) {
    swiper.enable();
  }

  swiper.currentBreakpoint = breakpoint;
  swiper.emit('_beforeBreakpoint', breakpointParams);

  if (needsReLoop && initialized) {
    swiper.loopDestroy();
    swiper.loopCreate();
    swiper.updateSlides();
    swiper.slideTo(activeIndex - loopedSlides + swiper.loopedSlides, 0, false);
  }

  swiper.emit('breakpoint', breakpointParams);
}

function getBreakpoint(breakpoints, base, containerEl) {
  if (base === void 0) {
    base = 'window';
  }

  if (!breakpoints || base === 'container' && !containerEl) return undefined;
  var breakpoint = false;
  var window = getWindow();
  var currentWidth = base === 'window' ? window.innerWidth : containerEl.clientWidth;
  var currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;
  var points = Object.keys(breakpoints).map(function (point) {
    if (typeof point === 'string' && point.indexOf('@') === 0) {
      var minRatio = parseFloat(point.substr(1));
      var value = currentHeight * minRatio;
      return {
        value: value,
        point: point
      };
    }

    return {
      value: point,
      point: point
    };
  });
  points.sort(function (a, b) {
    return parseInt(a.value, 10) - parseInt(b.value, 10);
  });

  for (var i = 0; i < points.length; i += 1) {
    var _points$i = points[i],
        point = _points$i.point,
        value = _points$i.value;

    if (value <= currentWidth) {
      breakpoint = point;
    }
  }

  return breakpoint || 'max';
}

const breakpoints = {
  setBreakpoint: setBreakpoint,
  getBreakpoint: getBreakpoint
};

function prepareClasses(entries, prefix) {
  var resultClasses = [];
  entries.forEach(function (item) {
    if (typeof item === 'object') {
      Object.keys(item).forEach(function (classNames) {
        if (item[classNames]) {
          resultClasses.push(prefix + classNames);
        }
      });
    } else if (typeof item === 'string') {
      resultClasses.push(prefix + item);
    }
  });
  return resultClasses;
}

function addClasses() {
  var swiper = this;
  var classNames = swiper.classNames,
      params = swiper.params,
      rtl = swiper.rtl,
      $el = swiper.$el,
      device = swiper.device,
      support = swiper.support; // prettier-ignore

  var suffixes = prepareClasses(['initialized', params.direction, {
    'pointer-events': support.pointerEvents && !support.touch
  }, {
    'free-mode': params.freeMode
  }, {
    'autoheight': params.autoHeight
  }, {
    'rtl': rtl
  }, {
    'multirow': params.slidesPerColumn > 1
  }, {
    'multirow-column': params.slidesPerColumn > 1 && params.slidesPerColumnFill === 'column'
  }, {
    'android': device.android
  }, {
    'ios': device.ios
  }, {
    'css-mode': params.cssMode
  }], params.containerModifierClass);
  classNames.push.apply(classNames, suffixes);
  $el.addClass([].concat(classNames).join(' '));
  swiper.emitContainerClasses();
}

function removeClasses() {
  var swiper = this;
  var $el = swiper.$el,
      classNames = swiper.classNames;
  $el.removeClass(classNames.join(' '));
  swiper.emitContainerClasses();
}

const classes = {
  addClasses: addClasses,
  removeClasses: removeClasses
};

function loadImage(imageEl, src, srcset, sizes, checkForComplete, callback) {
  var window = getWindow();
  var image;

  function onReady() {
    if (callback) callback();
  }

  var isPicture = $$1(imageEl).parent('picture')[0];

  if (!isPicture && (!imageEl.complete || !checkForComplete)) {
    if (src) {
      image = new window.Image();
      image.onload = onReady;
      image.onerror = onReady;

      if (sizes) {
        image.sizes = sizes;
      }

      if (srcset) {
        image.srcset = srcset;
      }

      if (src) {
        image.src = src;
      }
    } else {
      onReady();
    }
  } else {
    // image already loaded...
    onReady();
  }
}

function preloadImages() {
  var swiper = this;
  swiper.imagesToLoad = swiper.$el.find('img');

  function onReady() {
    if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper.destroyed) return;
    if (swiper.imagesLoaded !== undefined) swiper.imagesLoaded += 1;

    if (swiper.imagesLoaded === swiper.imagesToLoad.length) {
      if (swiper.params.updateOnImagesReady) swiper.update();
      swiper.emit('imagesReady');
    }
  }

  for (var i = 0; i < swiper.imagesToLoad.length; i += 1) {
    var imageEl = swiper.imagesToLoad[i];
    swiper.loadImage(imageEl, imageEl.currentSrc || imageEl.getAttribute('src'), imageEl.srcset || imageEl.getAttribute('srcset'), imageEl.sizes || imageEl.getAttribute('sizes'), true, onReady);
  }
}

const images = {
  loadImage: loadImage,
  preloadImages: preloadImages
};

function checkOverflow() {
  var swiper = this;
  var params = swiper.params;
  var wasLocked = swiper.isLocked;
  var lastSlidePosition = swiper.slides.length > 0 && params.slidesOffsetBefore + params.spaceBetween * (swiper.slides.length - 1) + swiper.slides[0].offsetWidth * swiper.slides.length;

  if (params.slidesOffsetBefore && params.slidesOffsetAfter && lastSlidePosition) {
    swiper.isLocked = lastSlidePosition <= swiper.size;
  } else {
    swiper.isLocked = swiper.snapGrid.length === 1;
  }

  swiper.allowSlideNext = !swiper.isLocked;
  swiper.allowSlidePrev = !swiper.isLocked; // events

  if (wasLocked !== swiper.isLocked) swiper.emit(swiper.isLocked ? 'lock' : 'unlock');

  if (wasLocked && wasLocked !== swiper.isLocked) {
    swiper.isEnd = false;
    if (swiper.navigation) swiper.navigation.update();
  }
}

const checkOverflow$1 = {
  checkOverflow: checkOverflow
};

const defaults = {
  init: true,
  direction: 'horizontal',
  touchEventsTarget: 'container',
  initialSlide: 0,
  speed: 300,
  cssMode: false,
  updateOnWindowResize: true,
  resizeObserver: false,
  nested: false,
  createElements: false,
  enabled: true,
  // Overrides
  width: null,
  height: null,
  //
  preventInteractionOnTransition: false,
  // ssr
  userAgent: null,
  url: null,
  // To support iOS's swipe-to-go-back gesture (when being used in-app).
  edgeSwipeDetection: false,
  edgeSwipeThreshold: 20,
  // Free mode
  freeMode: false,
  freeModeMomentum: true,
  freeModeMomentumRatio: 1,
  freeModeMomentumBounce: true,
  freeModeMomentumBounceRatio: 1,
  freeModeMomentumVelocityRatio: 1,
  freeModeSticky: false,
  freeModeMinimumVelocity: 0.02,
  // Autoheight
  autoHeight: false,
  // Set wrapper width
  setWrapperSize: false,
  // Virtual Translate
  virtualTranslate: false,
  // Effects
  effect: 'slide',
  // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'
  // Breakpoints
  breakpoints: undefined,
  breakpointsBase: 'window',
  // Slides grid
  spaceBetween: 0,
  slidesPerView: 1,
  slidesPerColumn: 1,
  slidesPerColumnFill: 'column',
  slidesPerGroup: 1,
  slidesPerGroupSkip: 0,
  centeredSlides: false,
  centeredSlidesBounds: false,
  slidesOffsetBefore: 0,
  // in px
  slidesOffsetAfter: 0,
  // in px
  normalizeSlideIndex: true,
  centerInsufficientSlides: false,
  // Disable swiper and hide navigation when container not overflow
  watchOverflow: false,
  // Round length
  roundLengths: false,
  // Touches
  touchRatio: 1,
  touchAngle: 45,
  simulateTouch: true,
  shortSwipes: true,
  longSwipes: true,
  longSwipesRatio: 0.5,
  longSwipesMs: 300,
  followFinger: true,
  allowTouchMove: true,
  threshold: 0,
  touchMoveStopPropagation: false,
  touchStartPreventDefault: true,
  touchStartForcePreventDefault: false,
  touchReleaseOnEdges: false,
  // Unique Navigation Elements
  uniqueNavElements: true,
  // Resistance
  resistance: true,
  resistanceRatio: 0.85,
  // Progress
  watchSlidesProgress: false,
  watchSlidesVisibility: false,
  // Cursor
  grabCursor: false,
  // Clicks
  preventClicks: true,
  preventClicksPropagation: true,
  slideToClickedSlide: false,
  // Images
  preloadImages: true,
  updateOnImagesReady: true,
  // loop
  loop: false,
  loopAdditionalSlides: 0,
  loopedSlides: null,
  loopFillGroupWithBlank: false,
  loopPreventsSlide: true,
  // Swiping/no swiping
  allowSlidePrev: true,
  allowSlideNext: true,
  swipeHandler: null,
  // '.swipe-handler',
  noSwiping: true,
  noSwipingClass: 'swiper-no-swiping',
  noSwipingSelector: null,
  // Passive Listeners
  passiveListeners: true,
  // NS
  containerModifierClass: 'swiper-container-',
  // NEW
  slideClass: 'swiper-slide',
  slideBlankClass: 'swiper-slide-invisible-blank',
  slideActiveClass: 'swiper-slide-active',
  slideDuplicateActiveClass: 'swiper-slide-duplicate-active',
  slideVisibleClass: 'swiper-slide-visible',
  slideDuplicateClass: 'swiper-slide-duplicate',
  slideNextClass: 'swiper-slide-next',
  slideDuplicateNextClass: 'swiper-slide-duplicate-next',
  slidePrevClass: 'swiper-slide-prev',
  slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',
  wrapperClass: 'swiper-wrapper',
  // Callbacks
  runCallbacksOnInit: true,
  // Internals
  _emitClasses: false
};

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
var prototypes = {
  modular: modular,
  eventsEmitter: eventsEmitter,
  update: update,
  translate: translate,
  transition: transition$1,
  slide: slide,
  loop: loop,
  grabCursor: grabCursor,
  manipulation: manipulation,
  events: events,
  breakpoints: breakpoints,
  checkOverflow: checkOverflow$1,
  classes: classes,
  images: images
};
var extendedDefaults = {};

var Swiper = /*#__PURE__*/function () {
  function Swiper() {
    var el;
    var params;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {
      params = args[0];
    } else {
      el = args[0];
      params = args[1];
    }

    if (!params) params = {};
    params = extend$1({}, params);
    if (el && !params.el) params.el = el;

    if (params.el && $$1(params.el).length > 1) {
      var swipers = [];
      $$1(params.el).each(function (containerEl) {
        var newParams = extend$1({}, params, {
          el: containerEl
        });
        swipers.push(new Swiper(newParams));
      });
      return swipers;
    } // Swiper Instance


    var swiper = this;
    swiper.__swiper__ = true;
    swiper.support = getSupport();
    swiper.device = getDevice({
      userAgent: params.userAgent
    });
    swiper.browser = getBrowser();
    swiper.eventsListeners = {};
    swiper.eventsAnyListeners = [];

    if (typeof swiper.modules === 'undefined') {
      swiper.modules = {};
    }

    Object.keys(swiper.modules).forEach(function (moduleName) {
      var module = swiper.modules[moduleName];

      if (module.params) {
        var moduleParamName = Object.keys(module.params)[0];
        var moduleParams = module.params[moduleParamName];
        if (typeof moduleParams !== 'object' || moduleParams === null) return;

        if (['navigation', 'pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] === true) {
          params[moduleParamName] = {
            auto: true
          };
        }

        if (!(moduleParamName in params && 'enabled' in moduleParams)) return;

        if (params[moduleParamName] === true) {
          params[moduleParamName] = {
            enabled: true
          };
        }

        if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {
          params[moduleParamName].enabled = true;
        }

        if (!params[moduleParamName]) params[moduleParamName] = {
          enabled: false
        };
      }
    }); // Extend defaults with modules params

    var swiperParams = extend$1({}, defaults);
    swiper.useParams(swiperParams); // Extend defaults with passed params

    swiper.params = extend$1({}, swiperParams, extendedDefaults, params);
    swiper.originalParams = extend$1({}, swiper.params);
    swiper.passedParams = extend$1({}, params); // add event listeners

    if (swiper.params && swiper.params.on) {
      Object.keys(swiper.params.on).forEach(function (eventName) {
        swiper.on(eventName, swiper.params.on[eventName]);
      });
    }

    if (swiper.params && swiper.params.onAny) {
      swiper.onAny(swiper.params.onAny);
    } // Save Dom lib


    swiper.$ = $$1; // Extend Swiper

    extend$1(swiper, {
      enabled: swiper.params.enabled,
      el: el,
      // Classes
      classNames: [],
      // Slides
      slides: $$1(),
      slidesGrid: [],
      snapGrid: [],
      slidesSizesGrid: [],
      // isDirection
      isHorizontal: function isHorizontal() {
        return swiper.params.direction === 'horizontal';
      },
      isVertical: function isVertical() {
        return swiper.params.direction === 'vertical';
      },
      // Indexes
      activeIndex: 0,
      realIndex: 0,
      //
      isBeginning: true,
      isEnd: false,
      // Props
      translate: 0,
      previousTranslate: 0,
      progress: 0,
      velocity: 0,
      animating: false,
      // Locks
      allowSlideNext: swiper.params.allowSlideNext,
      allowSlidePrev: swiper.params.allowSlidePrev,
      // Touch Events
      touchEvents: function touchEvents() {
        var touch = ['touchstart', 'touchmove', 'touchend', 'touchcancel'];
        var desktop = ['mousedown', 'mousemove', 'mouseup'];

        if (swiper.support.pointerEvents) {
          desktop = ['pointerdown', 'pointermove', 'pointerup'];
        }

        swiper.touchEventsTouch = {
          start: touch[0],
          move: touch[1],
          end: touch[2],
          cancel: touch[3]
        };
        swiper.touchEventsDesktop = {
          start: desktop[0],
          move: desktop[1],
          end: desktop[2]
        };
        return swiper.support.touch || !swiper.params.simulateTouch ? swiper.touchEventsTouch : swiper.touchEventsDesktop;
      }(),
      touchEventsData: {
        isTouched: undefined,
        isMoved: undefined,
        allowTouchCallbacks: undefined,
        touchStartTime: undefined,
        isScrolling: undefined,
        currentTranslate: undefined,
        startTranslate: undefined,
        allowThresholdMove: undefined,
        // Form elements to match
        formElements: 'input, select, option, textarea, button, video, label',
        // Last click time
        lastClickTime: now(),
        clickTimeout: undefined,
        // Velocities
        velocities: [],
        allowMomentumBounce: undefined,
        isTouchEvent: undefined,
        startMoving: undefined
      },
      // Clicks
      allowClick: true,
      // Touches
      allowTouchMove: swiper.params.allowTouchMove,
      touches: {
        startX: 0,
        startY: 0,
        currentX: 0,
        currentY: 0,
        diff: 0
      },
      // Images
      imagesToLoad: [],
      imagesLoaded: 0
    }); // Install Modules

    swiper.useModules();
    swiper.emit('_swiper'); // Init

    if (swiper.params.init) {
      swiper.init();
    } // Return app instance


    return swiper;
  }

  var _proto = Swiper.prototype;

  _proto.enable = function enable() {
    var swiper = this;
    if (swiper.enabled) return;
    swiper.enabled = true;

    if (swiper.params.grabCursor) {
      swiper.setGrabCursor();
    }

    swiper.emit('enable');
  };

  _proto.disable = function disable() {
    var swiper = this;
    if (!swiper.enabled) return;
    swiper.enabled = false;

    if (swiper.params.grabCursor) {
      swiper.unsetGrabCursor();
    }

    swiper.emit('disable');
  };

  _proto.setProgress = function setProgress(progress, speed) {
    var swiper = this;
    progress = Math.min(Math.max(progress, 0), 1);
    var min = swiper.minTranslate();
    var max = swiper.maxTranslate();
    var current = (max - min) * progress + min;
    swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);
    swiper.updateActiveIndex();
    swiper.updateSlidesClasses();
  };

  _proto.emitContainerClasses = function emitContainerClasses() {
    var swiper = this;
    if (!swiper.params._emitClasses || !swiper.el) return;
    var classes = swiper.el.className.split(' ').filter(function (className) {
      return className.indexOf('swiper-container') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;
    });
    swiper.emit('_containerClasses', classes.join(' '));
  };

  _proto.getSlideClasses = function getSlideClasses(slideEl) {
    var swiper = this;
    return slideEl.className.split(' ').filter(function (className) {
      return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;
    }).join(' ');
  };

  _proto.emitSlidesClasses = function emitSlidesClasses() {
    var swiper = this;
    if (!swiper.params._emitClasses || !swiper.el) return;
    var updates = [];
    swiper.slides.each(function (slideEl) {
      var classNames = swiper.getSlideClasses(slideEl);
      updates.push({
        slideEl: slideEl,
        classNames: classNames
      });
      swiper.emit('_slideClass', slideEl, classNames);
    });
    swiper.emit('_slideClasses', updates);
  };

  _proto.slidesPerViewDynamic = function slidesPerViewDynamic() {
    var swiper = this;
    var params = swiper.params,
        slides = swiper.slides,
        slidesGrid = swiper.slidesGrid,
        swiperSize = swiper.size,
        activeIndex = swiper.activeIndex;
    var spv = 1;

    if (params.centeredSlides) {
      var slideSize = slides[activeIndex].swiperSlideSize;
      var breakLoop;

      for (var i = activeIndex + 1; i < slides.length; i += 1) {
        if (slides[i] && !breakLoop) {
          slideSize += slides[i].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) breakLoop = true;
        }
      }

      for (var _i = activeIndex - 1; _i >= 0; _i -= 1) {
        if (slides[_i] && !breakLoop) {
          slideSize += slides[_i].swiperSlideSize;
          spv += 1;
          if (slideSize > swiperSize) breakLoop = true;
        }
      }
    } else {
      for (var _i2 = activeIndex + 1; _i2 < slides.length; _i2 += 1) {
        if (slidesGrid[_i2] - slidesGrid[activeIndex] < swiperSize) {
          spv += 1;
        }
      }
    }

    return spv;
  };

  _proto.update = function update() {
    var swiper = this;
    if (!swiper || swiper.destroyed) return;
    var snapGrid = swiper.snapGrid,
        params = swiper.params; // Breakpoints

    if (params.breakpoints) {
      swiper.setBreakpoint();
    }

    swiper.updateSize();
    swiper.updateSlides();
    swiper.updateProgress();
    swiper.updateSlidesClasses();

    function setTranslate() {
      var translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;
      var newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());
      swiper.setTranslate(newTranslate);
      swiper.updateActiveIndex();
      swiper.updateSlidesClasses();
    }

    var translated;

    if (swiper.params.freeMode) {
      setTranslate();

      if (swiper.params.autoHeight) {
        swiper.updateAutoHeight();
      }
    } else {
      if ((swiper.params.slidesPerView === 'auto' || swiper.params.slidesPerView > 1) && swiper.isEnd && !swiper.params.centeredSlides) {
        translated = swiper.slideTo(swiper.slides.length - 1, 0, false, true);
      } else {
        translated = swiper.slideTo(swiper.activeIndex, 0, false, true);
      }

      if (!translated) {
        setTranslate();
      }
    }

    if (params.watchOverflow && snapGrid !== swiper.snapGrid) {
      swiper.checkOverflow();
    }

    swiper.emit('update');
  };

  _proto.changeDirection = function changeDirection(newDirection, needUpdate) {
    if (needUpdate === void 0) {
      needUpdate = true;
    }

    var swiper = this;
    var currentDirection = swiper.params.direction;

    if (!newDirection) {
      // eslint-disable-next-line
      newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';
    }

    if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {
      return swiper;
    }

    swiper.$el.removeClass("" + swiper.params.containerModifierClass + currentDirection).addClass("" + swiper.params.containerModifierClass + newDirection);
    swiper.emitContainerClasses();
    swiper.params.direction = newDirection;
    swiper.slides.each(function (slideEl) {
      if (newDirection === 'vertical') {
        slideEl.style.width = '';
      } else {
        slideEl.style.height = '';
      }
    });
    swiper.emit('changeDirection');
    if (needUpdate) swiper.update();
    return swiper;
  };

  _proto.mount = function mount(el) {
    var swiper = this;
    if (swiper.mounted) return true; // Find el

    var $el = $$1(el || swiper.params.el);
    el = $el[0];

    if (!el) {
      return false;
    }

    el.swiper = swiper;

    var getWrapper = function getWrapper() {
      if (el && el.shadowRoot && el.shadowRoot.querySelector) {
        var res = $$1(el.shadowRoot.querySelector("." + swiper.params.wrapperClass)); // Children needs to return slot items

        res.children = function (options) {
          return $el.children(options);
        };

        return res;
      }

      return $el.children("." + swiper.params.wrapperClass);
    }; // Find Wrapper


    var $wrapperEl = getWrapper();

    if ($wrapperEl.length === 0 && swiper.params.createElements) {
      var document = getDocument();
      var wrapper = document.createElement('div');
      $wrapperEl = $$1(wrapper);
      wrapper.className = swiper.params.wrapperClass;
      $el.append(wrapper);
      $el.children("." + swiper.params.slideClass).each(function (slideEl) {
        $wrapperEl.append(slideEl);
      });
    }

    extend$1(swiper, {
      $el: $el,
      el: el,
      $wrapperEl: $wrapperEl,
      wrapperEl: $wrapperEl[0],
      mounted: true,
      // RTL
      rtl: el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl',
      rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || $el.css('direction') === 'rtl'),
      wrongRTL: $wrapperEl.css('display') === '-webkit-box'
    });
    return true;
  };

  _proto.init = function init(el) {
    var swiper = this;
    if (swiper.initialized) return swiper;
    var mounted = swiper.mount(el);
    if (mounted === false) return swiper;
    swiper.emit('beforeInit'); // Set breakpoint

    if (swiper.params.breakpoints) {
      swiper.setBreakpoint();
    } // Add Classes


    swiper.addClasses(); // Create loop

    if (swiper.params.loop) {
      swiper.loopCreate();
    } // Update size


    swiper.updateSize(); // Update slides

    swiper.updateSlides();

    if (swiper.params.watchOverflow) {
      swiper.checkOverflow();
    } // Set Grab Cursor


    if (swiper.params.grabCursor && swiper.enabled) {
      swiper.setGrabCursor();
    }

    if (swiper.params.preloadImages) {
      swiper.preloadImages();
    } // Slide To Initial Slide


    if (swiper.params.loop) {
      swiper.slideTo(swiper.params.initialSlide + swiper.loopedSlides, 0, swiper.params.runCallbacksOnInit, false, true);
    } else {
      swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);
    } // Attach events


    swiper.attachEvents(); // Init Flag

    swiper.initialized = true; // Emit

    swiper.emit('init');
    swiper.emit('afterInit');
    return swiper;
  };

  _proto.destroy = function destroy(deleteInstance, cleanStyles) {
    if (deleteInstance === void 0) {
      deleteInstance = true;
    }

    if (cleanStyles === void 0) {
      cleanStyles = true;
    }

    var swiper = this;
    var params = swiper.params,
        $el = swiper.$el,
        $wrapperEl = swiper.$wrapperEl,
        slides = swiper.slides;

    if (typeof swiper.params === 'undefined' || swiper.destroyed) {
      return null;
    }

    swiper.emit('beforeDestroy'); // Init Flag

    swiper.initialized = false; // Detach events

    swiper.detachEvents(); // Destroy loop

    if (params.loop) {
      swiper.loopDestroy();
    } // Cleanup styles


    if (cleanStyles) {
      swiper.removeClasses();
      $el.removeAttr('style');
      $wrapperEl.removeAttr('style');

      if (slides && slides.length) {
        slides.removeClass([params.slideVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-slide-index');
      }
    }

    swiper.emit('destroy'); // Detach emitter events

    Object.keys(swiper.eventsListeners).forEach(function (eventName) {
      swiper.off(eventName);
    });

    if (deleteInstance !== false) {
      swiper.$el[0].swiper = null;
      deleteProps(swiper);
    }

    swiper.destroyed = true;
    return null;
  };

  Swiper.extendDefaults = function extendDefaults(newDefaults) {
    extend$1(extendedDefaults, newDefaults);
  };

  Swiper.installModule = function installModule(module) {
    if (!Swiper.prototype.modules) Swiper.prototype.modules = {};
    var name = module.name || Object.keys(Swiper.prototype.modules).length + "_" + now();
    Swiper.prototype.modules[name] = module;
  };

  Swiper.use = function use(module) {
    if (Array.isArray(module)) {
      module.forEach(function (m) {
        return Swiper.installModule(m);
      });
      return Swiper;
    }

    Swiper.installModule(module);
    return Swiper;
  };

  _createClass(Swiper, null, [{
    key: "extendedDefaults",
    get: function get() {
      return extendedDefaults;
    }
  }, {
    key: "defaults",
    get: function get() {
      return defaults;
    }
  }]);

  return Swiper;
}();

Object.keys(prototypes).forEach(function (prototypeGroup) {
  Object.keys(prototypes[prototypeGroup]).forEach(function (protoMethod) {
    Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];
  });
});
Swiper.use([Resize, Observer$1]);

function _extends$1() {
  _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$1.apply(this, arguments);
}
var Navigation = {
  toggleEl: function toggleEl($el, disabled) {
    $el[disabled ? 'addClass' : 'removeClass'](this.params.navigation.disabledClass);
    if ($el[0] && $el[0].tagName === 'BUTTON') $el[0].disabled = disabled;
  },
  update: function update() {
    // Update Navigation Buttons
    var swiper = this;
    var params = swiper.params.navigation;
    var toggleEl = swiper.navigation.toggleEl;
    if (swiper.params.loop) return;
    var _swiper$navigation = swiper.navigation,
        $nextEl = _swiper$navigation.$nextEl,
        $prevEl = _swiper$navigation.$prevEl;

    if ($prevEl && $prevEl.length > 0) {
      if (swiper.isBeginning) {
        toggleEl($prevEl, true);
      } else {
        toggleEl($prevEl, false);
      }

      if (swiper.params.watchOverflow && swiper.enabled) {
        $prevEl[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
      }
    }

    if ($nextEl && $nextEl.length > 0) {
      if (swiper.isEnd) {
        toggleEl($nextEl, true);
      } else {
        toggleEl($nextEl, false);
      }

      if (swiper.params.watchOverflow && swiper.enabled) {
        $nextEl[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
      }
    }
  },
  onPrevClick: function onPrevClick(e) {
    var swiper = this;
    e.preventDefault();
    if (swiper.isBeginning && !swiper.params.loop) return;
    swiper.slidePrev();
  },
  onNextClick: function onNextClick(e) {
    var swiper = this;
    e.preventDefault();
    if (swiper.isEnd && !swiper.params.loop) return;
    swiper.slideNext();
  },
  init: function init() {
    var swiper = this;
    var params = swiper.params.navigation;
    swiper.params.navigation = createElementIfNotDefined(swiper.$el, swiper.params.navigation, swiper.params.createElements, {
      nextEl: 'swiper-button-next',
      prevEl: 'swiper-button-prev'
    });
    if (!(params.nextEl || params.prevEl)) return;
    var $nextEl;
    var $prevEl;

    if (params.nextEl) {
      $nextEl = $$1(params.nextEl);

      if (swiper.params.uniqueNavElements && typeof params.nextEl === 'string' && $nextEl.length > 1 && swiper.$el.find(params.nextEl).length === 1) {
        $nextEl = swiper.$el.find(params.nextEl);
      }
    }

    if (params.prevEl) {
      $prevEl = $$1(params.prevEl);

      if (swiper.params.uniqueNavElements && typeof params.prevEl === 'string' && $prevEl.length > 1 && swiper.$el.find(params.prevEl).length === 1) {
        $prevEl = swiper.$el.find(params.prevEl);
      }
    }

    if ($nextEl && $nextEl.length > 0) {
      $nextEl.on('click', swiper.navigation.onNextClick);
    }

    if ($prevEl && $prevEl.length > 0) {
      $prevEl.on('click', swiper.navigation.onPrevClick);
    }

    extend$1(swiper.navigation, {
      $nextEl: $nextEl,
      nextEl: $nextEl && $nextEl[0],
      $prevEl: $prevEl,
      prevEl: $prevEl && $prevEl[0]
    });

    if (!swiper.enabled) {
      if ($nextEl) $nextEl.addClass(params.lockClass);
      if ($prevEl) $prevEl.addClass(params.lockClass);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    var _swiper$navigation2 = swiper.navigation,
        $nextEl = _swiper$navigation2.$nextEl,
        $prevEl = _swiper$navigation2.$prevEl;

    if ($nextEl && $nextEl.length) {
      $nextEl.off('click', swiper.navigation.onNextClick);
      $nextEl.removeClass(swiper.params.navigation.disabledClass);
    }

    if ($prevEl && $prevEl.length) {
      $prevEl.off('click', swiper.navigation.onPrevClick);
      $prevEl.removeClass(swiper.params.navigation.disabledClass);
    }
  }
};
const Navigation$1 = {
  name: 'navigation',
  params: {
    navigation: {
      nextEl: null,
      prevEl: null,
      hideOnClick: false,
      disabledClass: 'swiper-button-disabled',
      hiddenClass: 'swiper-button-hidden',
      lockClass: 'swiper-button-lock'
    }
  },
  create: function create() {
    var swiper = this;
    bindModuleMethods(swiper, {
      navigation: _extends$1({}, Navigation)
    });
  },
  on: {
    init: function init(swiper) {
      swiper.navigation.init();
      swiper.navigation.update();
    },
    toEdge: function toEdge(swiper) {
      swiper.navigation.update();
    },
    fromEdge: function fromEdge(swiper) {
      swiper.navigation.update();
    },
    destroy: function destroy(swiper) {
      swiper.navigation.destroy();
    },
    'enable disable': function enableDisable(swiper) {
      var _swiper$navigation3 = swiper.navigation,
          $nextEl = _swiper$navigation3.$nextEl,
          $prevEl = _swiper$navigation3.$prevEl;

      if ($nextEl) {
        $nextEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);
      }

      if ($prevEl) {
        $prevEl[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.navigation.lockClass);
      }
    },
    click: function click(swiper, e) {
      var _swiper$navigation4 = swiper.navigation,
          $nextEl = _swiper$navigation4.$nextEl,
          $prevEl = _swiper$navigation4.$prevEl;
      var targetEl = e.target;

      if (swiper.params.navigation.hideOnClick && !$$1(targetEl).is($prevEl) && !$$1(targetEl).is($nextEl)) {
        if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;
        var isHidden;

        if ($nextEl) {
          isHidden = $nextEl.hasClass(swiper.params.navigation.hiddenClass);
        } else if ($prevEl) {
          isHidden = $prevEl.hasClass(swiper.params.navigation.hiddenClass);
        }

        if (isHidden === true) {
          swiper.emit('navigationShow');
        } else {
          swiper.emit('navigationHide');
        }

        if ($nextEl) {
          $nextEl.toggleClass(swiper.params.navigation.hiddenClass);
        }

        if ($prevEl) {
          $prevEl.toggleClass(swiper.params.navigation.hiddenClass);
        }
      }
    }
  }
};

function _extends$2() {
  _extends$2 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$2.apply(this, arguments);
}
var Pagination = {
  update: function update() {
    // Render || Update Pagination bullets/items
    var swiper = this;
    var rtl = swiper.rtl;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
    var $el = swiper.pagination.$el; // Current/Total

    var current;
    var total = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

    if (swiper.params.loop) {
      current = Math.ceil((swiper.activeIndex - swiper.loopedSlides) / swiper.params.slidesPerGroup);

      if (current > slidesLength - 1 - swiper.loopedSlides * 2) {
        current -= slidesLength - swiper.loopedSlides * 2;
      }

      if (current > total - 1) current -= total;
      if (current < 0 && swiper.params.paginationType !== 'bullets') current = total + current;
    } else if (typeof swiper.snapIndex !== 'undefined') {
      current = swiper.snapIndex;
    } else {
      current = swiper.activeIndex || 0;
    } // Types


    if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {
      var bullets = swiper.pagination.bullets;
      var firstIndex;
      var lastIndex;
      var midIndex;

      if (params.dynamicBullets) {
        swiper.pagination.bulletSize = bullets.eq(0)[swiper.isHorizontal() ? 'outerWidth' : 'outerHeight'](true);
        $el.css(swiper.isHorizontal() ? 'width' : 'height', swiper.pagination.bulletSize * (params.dynamicMainBullets + 4) + "px");

        if (params.dynamicMainBullets > 1 && swiper.previousIndex !== undefined) {
          swiper.pagination.dynamicBulletIndex += current - swiper.previousIndex;

          if (swiper.pagination.dynamicBulletIndex > params.dynamicMainBullets - 1) {
            swiper.pagination.dynamicBulletIndex = params.dynamicMainBullets - 1;
          } else if (swiper.pagination.dynamicBulletIndex < 0) {
            swiper.pagination.dynamicBulletIndex = 0;
          }
        }

        firstIndex = current - swiper.pagination.dynamicBulletIndex;
        lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);
        midIndex = (lastIndex + firstIndex) / 2;
      }

      bullets.removeClass(params.bulletActiveClass + " " + params.bulletActiveClass + "-next " + params.bulletActiveClass + "-next-next " + params.bulletActiveClass + "-prev " + params.bulletActiveClass + "-prev-prev " + params.bulletActiveClass + "-main");

      if ($el.length > 1) {
        bullets.each(function (bullet) {
          var $bullet = $$1(bullet);
          var bulletIndex = $bullet.index();

          if (bulletIndex === current) {
            $bullet.addClass(params.bulletActiveClass);
          }

          if (params.dynamicBullets) {
            if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {
              $bullet.addClass(params.bulletActiveClass + "-main");
            }

            if (bulletIndex === firstIndex) {
              $bullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
            }

            if (bulletIndex === lastIndex) {
              $bullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
            }
          }
        });
      } else {
        var $bullet = bullets.eq(current);
        var bulletIndex = $bullet.index();
        $bullet.addClass(params.bulletActiveClass);

        if (params.dynamicBullets) {
          var $firstDisplayedBullet = bullets.eq(firstIndex);
          var $lastDisplayedBullet = bullets.eq(lastIndex);

          for (var i = firstIndex; i <= lastIndex; i += 1) {
            bullets.eq(i).addClass(params.bulletActiveClass + "-main");
          }

          if (swiper.params.loop) {
            if (bulletIndex >= bullets.length - params.dynamicMainBullets) {
              for (var _i = params.dynamicMainBullets; _i >= 0; _i -= 1) {
                bullets.eq(bullets.length - _i).addClass(params.bulletActiveClass + "-main");
              }

              bullets.eq(bullets.length - params.dynamicMainBullets - 1).addClass(params.bulletActiveClass + "-prev");
            } else {
              $firstDisplayedBullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
              $lastDisplayedBullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
            }
          } else {
            $firstDisplayedBullet.prev().addClass(params.bulletActiveClass + "-prev").prev().addClass(params.bulletActiveClass + "-prev-prev");
            $lastDisplayedBullet.next().addClass(params.bulletActiveClass + "-next").next().addClass(params.bulletActiveClass + "-next-next");
          }
        }
      }

      if (params.dynamicBullets) {
        var dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);
        var bulletsOffset = (swiper.pagination.bulletSize * dynamicBulletsLength - swiper.pagination.bulletSize) / 2 - midIndex * swiper.pagination.bulletSize;
        var offsetProp = rtl ? 'right' : 'left';
        bullets.css(swiper.isHorizontal() ? offsetProp : 'top', bulletsOffset + "px");
      }
    }

    if (params.type === 'fraction') {
      $el.find(classesToSelector(params.currentClass)).text(params.formatFractionCurrent(current + 1));
      $el.find(classesToSelector(params.totalClass)).text(params.formatFractionTotal(total));
    }

    if (params.type === 'progressbar') {
      var progressbarDirection;

      if (params.progressbarOpposite) {
        progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';
      } else {
        progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';
      }

      var scale = (current + 1) / total;
      var scaleX = 1;
      var scaleY = 1;

      if (progressbarDirection === 'horizontal') {
        scaleX = scale;
      } else {
        scaleY = scale;
      }

      $el.find(classesToSelector(params.progressbarFillClass)).transform("translate3d(0,0,0) scaleX(" + scaleX + ") scaleY(" + scaleY + ")").transition(swiper.params.speed);
    }

    if (params.type === 'custom' && params.renderCustom) {
      $el.html(params.renderCustom(swiper, current + 1, total));
      swiper.emit('paginationRender', $el[0]);
    } else {
      swiper.emit('paginationUpdate', $el[0]);
    }

    if (swiper.params.watchOverflow && swiper.enabled) {
      $el[swiper.isLocked ? 'addClass' : 'removeClass'](params.lockClass);
    }
  },
  render: function render() {
    // Render Container
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;
    var $el = swiper.pagination.$el;
    var paginationHTML = '';

    if (params.type === 'bullets') {
      var numberOfBullets = swiper.params.loop ? Math.ceil((slidesLength - swiper.loopedSlides * 2) / swiper.params.slidesPerGroup) : swiper.snapGrid.length;

      if (swiper.params.freeMode && !swiper.params.loop && numberOfBullets > slidesLength) {
        numberOfBullets = slidesLength;
      }

      for (var i = 0; i < numberOfBullets; i += 1) {
        if (params.renderBullet) {
          paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);
        } else {
          paginationHTML += "<" + params.bulletElement + " class=\"" + params.bulletClass + "\"></" + params.bulletElement + ">";
        }
      }

      $el.html(paginationHTML);
      swiper.pagination.bullets = $el.find(classesToSelector(params.bulletClass));
    }

    if (params.type === 'fraction') {
      if (params.renderFraction) {
        paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);
      } else {
        paginationHTML = "<span class=\"" + params.currentClass + "\"></span>" + ' / ' + ("<span class=\"" + params.totalClass + "\"></span>");
      }

      $el.html(paginationHTML);
    }

    if (params.type === 'progressbar') {
      if (params.renderProgressbar) {
        paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);
      } else {
        paginationHTML = "<span class=\"" + params.progressbarFillClass + "\"></span>";
      }

      $el.html(paginationHTML);
    }

    if (params.type !== 'custom') {
      swiper.emit('paginationRender', swiper.pagination.$el[0]);
    }
  },
  init: function init() {
    var swiper = this;
    swiper.params.pagination = createElementIfNotDefined(swiper.$el, swiper.params.pagination, swiper.params.createElements, {
      el: 'swiper-pagination'
    });
    var params = swiper.params.pagination;
    if (!params.el) return;
    var $el = $$1(params.el);
    if ($el.length === 0) return;

    if (swiper.params.uniqueNavElements && typeof params.el === 'string' && $el.length > 1) {
      $el = swiper.$el.find(params.el);
    }

    if (params.type === 'bullets' && params.clickable) {
      $el.addClass(params.clickableClass);
    }

    $el.addClass(params.modifierClass + params.type);

    if (params.type === 'bullets' && params.dynamicBullets) {
      $el.addClass("" + params.modifierClass + params.type + "-dynamic");
      swiper.pagination.dynamicBulletIndex = 0;

      if (params.dynamicMainBullets < 1) {
        params.dynamicMainBullets = 1;
      }
    }

    if (params.type === 'progressbar' && params.progressbarOpposite) {
      $el.addClass(params.progressbarOppositeClass);
    }

    if (params.clickable) {
      $el.on('click', classesToSelector(params.bulletClass), function onClick(e) {
        e.preventDefault();
        var index = $$1(this).index() * swiper.params.slidesPerGroup;
        if (swiper.params.loop) index += swiper.loopedSlides;
        swiper.slideTo(index);
      });
    }

    extend$1(swiper.pagination, {
      $el: $el,
      el: $el[0]
    });

    if (!swiper.enabled) {
      $el.addClass(params.lockClass);
    }
  },
  destroy: function destroy() {
    var swiper = this;
    var params = swiper.params.pagination;
    if (!params.el || !swiper.pagination.el || !swiper.pagination.$el || swiper.pagination.$el.length === 0) return;
    var $el = swiper.pagination.$el;
    $el.removeClass(params.hiddenClass);
    $el.removeClass(params.modifierClass + params.type);
    if (swiper.pagination.bullets) swiper.pagination.bullets.removeClass(params.bulletActiveClass);

    if (params.clickable) {
      $el.off('click', classesToSelector(params.bulletClass));
    }
  }
};
const Pagination$1 = {
  name: 'pagination',
  params: {
    pagination: {
      el: null,
      bulletElement: 'span',
      clickable: false,
      hideOnClick: false,
      renderBullet: null,
      renderProgressbar: null,
      renderFraction: null,
      renderCustom: null,
      progressbarOpposite: false,
      type: 'bullets',
      // 'bullets' or 'progressbar' or 'fraction' or 'custom'
      dynamicBullets: false,
      dynamicMainBullets: 1,
      formatFractionCurrent: function formatFractionCurrent(number) {
        return number;
      },
      formatFractionTotal: function formatFractionTotal(number) {
        return number;
      },
      bulletClass: 'swiper-pagination-bullet',
      bulletActiveClass: 'swiper-pagination-bullet-active',
      modifierClass: 'swiper-pagination-',
      // NEW
      currentClass: 'swiper-pagination-current',
      totalClass: 'swiper-pagination-total',
      hiddenClass: 'swiper-pagination-hidden',
      progressbarFillClass: 'swiper-pagination-progressbar-fill',
      progressbarOppositeClass: 'swiper-pagination-progressbar-opposite',
      clickableClass: 'swiper-pagination-clickable',
      // NEW
      lockClass: 'swiper-pagination-lock'
    }
  },
  create: function create() {
    var swiper = this;
    bindModuleMethods(swiper, {
      pagination: _extends$2({
        dynamicBulletIndex: 0
      }, Pagination)
    });
  },
  on: {
    init: function init(swiper) {
      swiper.pagination.init();
      swiper.pagination.render();
      swiper.pagination.update();
    },
    activeIndexChange: function activeIndexChange(swiper) {
      if (swiper.params.loop) {
        swiper.pagination.update();
      } else if (typeof swiper.snapIndex === 'undefined') {
        swiper.pagination.update();
      }
    },
    snapIndexChange: function snapIndexChange(swiper) {
      if (!swiper.params.loop) {
        swiper.pagination.update();
      }
    },
    slidesLengthChange: function slidesLengthChange(swiper) {
      if (swiper.params.loop) {
        swiper.pagination.render();
        swiper.pagination.update();
      }
    },
    snapGridLengthChange: function snapGridLengthChange(swiper) {
      if (!swiper.params.loop) {
        swiper.pagination.render();
        swiper.pagination.update();
      }
    },
    destroy: function destroy(swiper) {
      swiper.pagination.destroy();
    },
    'enable disable': function enableDisable(swiper) {
      var $el = swiper.pagination.$el;

      if ($el) {
        $el[swiper.enabled ? 'removeClass' : 'addClass'](swiper.params.pagination.lockClass);
      }
    },
    click: function click(swiper, e) {
      var targetEl = e.target;

      if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && swiper.pagination.$el.length > 0 && !$$1(targetEl).hasClass(swiper.params.pagination.bulletClass)) {
        if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;
        var isHidden = swiper.pagination.$el.hasClass(swiper.params.pagination.hiddenClass);

        if (isHidden === true) {
          swiper.emit('paginationShow');
        } else {
          swiper.emit('paginationHide');
        }

        swiper.pagination.$el.toggleClass(swiper.params.pagination.hiddenClass);
      }
    }
  }
};

function _extends$3() {
  _extends$3 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$3.apply(this, arguments);
}
var Lazy = {
  loadInSlide: function loadInSlide(index, loadInDuplicate) {
    if (loadInDuplicate === void 0) {
      loadInDuplicate = true;
    }

    var swiper = this;
    var params = swiper.params.lazy;
    if (typeof index === 'undefined') return;
    if (swiper.slides.length === 0) return;
    var isVirtual = swiper.virtual && swiper.params.virtual.enabled;
    var $slideEl = isVirtual ? swiper.$wrapperEl.children("." + swiper.params.slideClass + "[data-swiper-slide-index=\"" + index + "\"]") : swiper.slides.eq(index);
    var $images = $slideEl.find("." + params.elementClass + ":not(." + params.loadedClass + "):not(." + params.loadingClass + ")");

    if ($slideEl.hasClass(params.elementClass) && !$slideEl.hasClass(params.loadedClass) && !$slideEl.hasClass(params.loadingClass)) {
      $images.push($slideEl[0]);
    }

    if ($images.length === 0) return;
    $images.each(function (imageEl) {
      var $imageEl = $$1(imageEl);
      $imageEl.addClass(params.loadingClass);
      var background = $imageEl.attr('data-background');
      var src = $imageEl.attr('data-src');
      var srcset = $imageEl.attr('data-srcset');
      var sizes = $imageEl.attr('data-sizes');
      var $pictureEl = $imageEl.parent('picture');
      swiper.loadImage($imageEl[0], src || background, srcset, sizes, false, function () {
        if (typeof swiper === 'undefined' || swiper === null || !swiper || swiper && !swiper.params || swiper.destroyed) return;

        if (background) {
          $imageEl.css('background-image', "url(\"" + background + "\")");
          $imageEl.removeAttr('data-background');
        } else {
          if (srcset) {
            $imageEl.attr('srcset', srcset);
            $imageEl.removeAttr('data-srcset');
          }

          if (sizes) {
            $imageEl.attr('sizes', sizes);
            $imageEl.removeAttr('data-sizes');
          }

          if ($pictureEl.length) {
            $pictureEl.children('source').each(function (sourceEl) {
              var $source = $$1(sourceEl);

              if ($source.attr('data-srcset')) {
                $source.attr('srcset', $source.attr('data-srcset'));
                $source.removeAttr('data-srcset');
              }
            });
          }

          if (src) {
            $imageEl.attr('src', src);
            $imageEl.removeAttr('data-src');
          }
        }

        $imageEl.addClass(params.loadedClass).removeClass(params.loadingClass);
        $slideEl.find("." + params.preloaderClass).remove();

        if (swiper.params.loop && loadInDuplicate) {
          var slideOriginalIndex = $slideEl.attr('data-swiper-slide-index');

          if ($slideEl.hasClass(swiper.params.slideDuplicateClass)) {
            var originalSlide = swiper.$wrapperEl.children("[data-swiper-slide-index=\"" + slideOriginalIndex + "\"]:not(." + swiper.params.slideDuplicateClass + ")");
            swiper.lazy.loadInSlide(originalSlide.index(), false);
          } else {
            var duplicatedSlide = swiper.$wrapperEl.children("." + swiper.params.slideDuplicateClass + "[data-swiper-slide-index=\"" + slideOriginalIndex + "\"]");
            swiper.lazy.loadInSlide(duplicatedSlide.index(), false);
          }
        }

        swiper.emit('lazyImageReady', $slideEl[0], $imageEl[0]);

        if (swiper.params.autoHeight) {
          swiper.updateAutoHeight();
        }
      });
      swiper.emit('lazyImageLoad', $slideEl[0], $imageEl[0]);
    });
  },
  load: function load() {
    var swiper = this;
    var $wrapperEl = swiper.$wrapperEl,
        swiperParams = swiper.params,
        slides = swiper.slides,
        activeIndex = swiper.activeIndex;
    var isVirtual = swiper.virtual && swiperParams.virtual.enabled;
    var params = swiperParams.lazy;
    var slidesPerView = swiperParams.slidesPerView;

    if (slidesPerView === 'auto') {
      slidesPerView = 0;
    }

    function slideExist(index) {
      if (isVirtual) {
        if ($wrapperEl.children("." + swiperParams.slideClass + "[data-swiper-slide-index=\"" + index + "\"]").length) {
          return true;
        }
      } else if (slides[index]) return true;

      return false;
    }

    function slideIndex(slideEl) {
      if (isVirtual) {
        return $$1(slideEl).attr('data-swiper-slide-index');
      }

      return $$1(slideEl).index();
    }

    if (!swiper.lazy.initialImageLoaded) swiper.lazy.initialImageLoaded = true;

    if (swiper.params.watchSlidesVisibility) {
      $wrapperEl.children("." + swiperParams.slideVisibleClass).each(function (slideEl) {
        var index = isVirtual ? $$1(slideEl).attr('data-swiper-slide-index') : $$1(slideEl).index();
        swiper.lazy.loadInSlide(index);
      });
    } else if (slidesPerView > 1) {
      for (var i = activeIndex; i < activeIndex + slidesPerView; i += 1) {
        if (slideExist(i)) swiper.lazy.loadInSlide(i);
      }
    } else {
      swiper.lazy.loadInSlide(activeIndex);
    }

    if (params.loadPrevNext) {
      if (slidesPerView > 1 || params.loadPrevNextAmount && params.loadPrevNextAmount > 1) {
        var amount = params.loadPrevNextAmount;
        var spv = slidesPerView;
        var maxIndex = Math.min(activeIndex + spv + Math.max(amount, spv), slides.length);
        var minIndex = Math.max(activeIndex - Math.max(spv, amount), 0); // Next Slides

        for (var _i = activeIndex + slidesPerView; _i < maxIndex; _i += 1) {
          if (slideExist(_i)) swiper.lazy.loadInSlide(_i);
        } // Prev Slides


        for (var _i2 = minIndex; _i2 < activeIndex; _i2 += 1) {
          if (slideExist(_i2)) swiper.lazy.loadInSlide(_i2);
        }
      } else {
        var nextSlide = $wrapperEl.children("." + swiperParams.slideNextClass);
        if (nextSlide.length > 0) swiper.lazy.loadInSlide(slideIndex(nextSlide));
        var prevSlide = $wrapperEl.children("." + swiperParams.slidePrevClass);
        if (prevSlide.length > 0) swiper.lazy.loadInSlide(slideIndex(prevSlide));
      }
    }
  },
  checkInViewOnLoad: function checkInViewOnLoad() {
    var window = getWindow();
    var swiper = this;
    if (!swiper || swiper.destroyed) return;
    var $scrollElement = swiper.params.lazy.scrollingElement ? $$1(swiper.params.lazy.scrollingElement) : $$1(window);
    var isWindow = $scrollElement[0] === window;
    var scrollElementWidth = isWindow ? window.innerWidth : $scrollElement[0].offsetWidth;
    var scrollElementHeight = isWindow ? window.innerHeight : $scrollElement[0].offsetHeight;
    var swiperOffset = swiper.$el.offset();
    var rtl = swiper.rtlTranslate;
    var inView = false;
    if (rtl) swiperOffset.left -= swiper.$el[0].scrollLeft;
    var swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiper.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiper.height], [swiperOffset.left + swiper.width, swiperOffset.top + swiper.height]];

    for (var i = 0; i < swiperCoord.length; i += 1) {
      var point = swiperCoord[i];

      if (point[0] >= 0 && point[0] <= scrollElementWidth && point[1] >= 0 && point[1] <= scrollElementHeight) {
        if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line

        inView = true;
      }
    }

    var passiveListener = swiper.touchEvents.start === 'touchstart' && swiper.support.passiveListener && swiper.params.passiveListeners ? {
      passive: true,
      capture: false
    } : false;

    if (inView) {
      swiper.lazy.load();
      $scrollElement.off('scroll', swiper.lazy.checkInViewOnLoad, passiveListener);
    } else if (!swiper.lazy.scrollHandlerAttached) {
      swiper.lazy.scrollHandlerAttached = true;
      $scrollElement.on('scroll', swiper.lazy.checkInViewOnLoad, passiveListener);
    }
  }
};
const Lazy$1 = {
  name: 'lazy',
  params: {
    lazy: {
      checkInView: false,
      enabled: false,
      loadPrevNext: false,
      loadPrevNextAmount: 1,
      loadOnTransitionStart: false,
      scrollingElement: '',
      elementClass: 'swiper-lazy',
      loadingClass: 'swiper-lazy-loading',
      loadedClass: 'swiper-lazy-loaded',
      preloaderClass: 'swiper-lazy-preloader'
    }
  },
  create: function create() {
    var swiper = this;
    bindModuleMethods(swiper, {
      lazy: _extends$3({
        initialImageLoaded: false
      }, Lazy)
    });
  },
  on: {
    beforeInit: function beforeInit(swiper) {
      if (swiper.params.lazy.enabled && swiper.params.preloadImages) {
        swiper.params.preloadImages = false;
      }
    },
    init: function init(swiper) {
      if (swiper.params.lazy.enabled && !swiper.params.loop && swiper.params.initialSlide === 0) {
        if (swiper.params.lazy.checkInView) {
          swiper.lazy.checkInViewOnLoad();
        } else {
          swiper.lazy.load();
        }
      }
    },
    scroll: function scroll(swiper) {
      if (swiper.params.freeMode && !swiper.params.freeModeSticky) {
        swiper.lazy.load();
      }
    },
    'scrollbarDragMove resize _freeModeNoMomentumRelease': function lazyLoad(swiper) {
      if (swiper.params.lazy.enabled) {
        swiper.lazy.load();
      }
    },
    transitionStart: function transitionStart(swiper) {
      if (swiper.params.lazy.enabled) {
        if (swiper.params.lazy.loadOnTransitionStart || !swiper.params.lazy.loadOnTransitionStart && !swiper.lazy.initialImageLoaded) {
          swiper.lazy.load();
        }
      }
    },
    transitionEnd: function transitionEnd(swiper) {
      if (swiper.params.lazy.enabled && !swiper.params.lazy.loadOnTransitionStart) {
        swiper.lazy.load();
      }
    },
    slideChange: function slideChange(swiper) {
      if (swiper.params.lazy.enabled && swiper.params.cssMode) {
        swiper.lazy.load();
      }
    }
  }
};

function _extends$4() {
  _extends$4 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends$4.apply(this, arguments);
}
var Autoplay = {
  run: function run() {
    var swiper = this;
    var $activeSlideEl = swiper.slides.eq(swiper.activeIndex);
    var delay = swiper.params.autoplay.delay;

    if ($activeSlideEl.attr('data-swiper-autoplay')) {
      delay = $activeSlideEl.attr('data-swiper-autoplay') || swiper.params.autoplay.delay;
    }

    clearTimeout(swiper.autoplay.timeout);
    swiper.autoplay.timeout = nextTick(function () {
      var autoplayResult;

      if (swiper.params.autoplay.reverseDirection) {
        if (swiper.params.loop) {
          swiper.loopFix();
          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else if (!swiper.isBeginning) {
          autoplayResult = swiper.slidePrev(swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else if (!swiper.params.autoplay.stopOnLastSlide) {
          autoplayResult = swiper.slideTo(swiper.slides.length - 1, swiper.params.speed, true, true);
          swiper.emit('autoplay');
        } else {
          swiper.autoplay.stop();
        }
      } else if (swiper.params.loop) {
        swiper.loopFix();
        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else if (!swiper.isEnd) {
        autoplayResult = swiper.slideNext(swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else if (!swiper.params.autoplay.stopOnLastSlide) {
        autoplayResult = swiper.slideTo(0, swiper.params.speed, true, true);
        swiper.emit('autoplay');
      } else {
        swiper.autoplay.stop();
      }

      if (swiper.params.cssMode && swiper.autoplay.running) swiper.autoplay.run();else if (autoplayResult === false) {
        swiper.autoplay.run();
      }
    }, delay);
  },
  start: function start() {
    var swiper = this;
    if (typeof swiper.autoplay.timeout !== 'undefined') return false;
    if (swiper.autoplay.running) return false;
    swiper.autoplay.running = true;
    swiper.emit('autoplayStart');
    swiper.autoplay.run();
    return true;
  },
  stop: function stop() {
    var swiper = this;
    if (!swiper.autoplay.running) return false;
    if (typeof swiper.autoplay.timeout === 'undefined') return false;

    if (swiper.autoplay.timeout) {
      clearTimeout(swiper.autoplay.timeout);
      swiper.autoplay.timeout = undefined;
    }

    swiper.autoplay.running = false;
    swiper.emit('autoplayStop');
    return true;
  },
  pause: function pause(speed) {
    var swiper = this;
    if (!swiper.autoplay.running) return;
    if (swiper.autoplay.paused) return;
    if (swiper.autoplay.timeout) clearTimeout(swiper.autoplay.timeout);
    swiper.autoplay.paused = true;

    if (speed === 0 || !swiper.params.autoplay.waitForTransition) {
      swiper.autoplay.paused = false;
      swiper.autoplay.run();
    } else {
      ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
        swiper.$wrapperEl[0].addEventListener(event, swiper.autoplay.onTransitionEnd);
      });
    }
  },
  onVisibilityChange: function onVisibilityChange() {
    var swiper = this;
    var document = getDocument();

    if (document.visibilityState === 'hidden' && swiper.autoplay.running) {
      swiper.autoplay.pause();
    }

    if (document.visibilityState === 'visible' && swiper.autoplay.paused) {
      swiper.autoplay.run();
      swiper.autoplay.paused = false;
    }
  },
  onTransitionEnd: function onTransitionEnd(e) {
    var swiper = this;
    if (!swiper || swiper.destroyed || !swiper.$wrapperEl) return;
    if (e.target !== swiper.$wrapperEl[0]) return;
    ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
      swiper.$wrapperEl[0].removeEventListener(event, swiper.autoplay.onTransitionEnd);
    });
    swiper.autoplay.paused = false;

    if (!swiper.autoplay.running) {
      swiper.autoplay.stop();
    } else {
      swiper.autoplay.run();
    }
  },
  onMouseEnter: function onMouseEnter() {
    var swiper = this;

    if (swiper.params.autoplay.disableOnInteraction) {
      swiper.autoplay.stop();
    } else {
      swiper.autoplay.pause();
    }

    ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
      swiper.$wrapperEl[0].removeEventListener(event, swiper.autoplay.onTransitionEnd);
    });
  },
  onMouseLeave: function onMouseLeave() {
    var swiper = this;

    if (swiper.params.autoplay.disableOnInteraction) {
      return;
    }

    swiper.autoplay.paused = false;
    swiper.autoplay.run();
  },
  attachMouseEvents: function attachMouseEvents() {
    var swiper = this;

    if (swiper.params.autoplay.pauseOnMouseEnter) {
      swiper.$el.on('mouseenter', swiper.autoplay.onMouseEnter);
      swiper.$el.on('mouseleave', swiper.autoplay.onMouseLeave);
    }
  },
  detachMouseEvents: function detachMouseEvents() {
    var swiper = this;
    swiper.$el.off('mouseenter', swiper.autoplay.onMouseEnter);
    swiper.$el.off('mouseleave', swiper.autoplay.onMouseLeave);
  }
};
const Autoplay$1 = {
  name: 'autoplay',
  params: {
    autoplay: {
      enabled: false,
      delay: 3000,
      waitForTransition: true,
      disableOnInteraction: true,
      stopOnLastSlide: false,
      reverseDirection: false,
      pauseOnMouseEnter: false
    }
  },
  create: function create() {
    var swiper = this;
    bindModuleMethods(swiper, {
      autoplay: _extends$4({}, Autoplay, {
        running: false,
        paused: false
      })
    });
  },
  on: {
    init: function init(swiper) {
      if (swiper.params.autoplay.enabled) {
        swiper.autoplay.start();
        var document = getDocument();
        document.addEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);
        swiper.autoplay.attachMouseEvents();
      }
    },
    beforeTransitionStart: function beforeTransitionStart(swiper, speed, internal) {
      if (swiper.autoplay.running) {
        if (internal || !swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.pause(speed);
        } else {
          swiper.autoplay.stop();
        }
      }
    },
    sliderFirstMove: function sliderFirstMove(swiper) {
      if (swiper.autoplay.running) {
        if (swiper.params.autoplay.disableOnInteraction) {
          swiper.autoplay.stop();
        } else {
          swiper.autoplay.pause();
        }
      }
    },
    touchEnd: function touchEnd(swiper) {
      if (swiper.params.cssMode && swiper.autoplay.paused && !swiper.params.autoplay.disableOnInteraction) {
        swiper.autoplay.run();
      }
    },
    destroy: function destroy(swiper) {
      swiper.autoplay.detachMouseEvents();

      if (swiper.autoplay.running) {
        swiper.autoplay.stop();
      }

      var document = getDocument();
      document.removeEventListener('visibilitychange', swiper.autoplay.onVisibilityChange);
    }
  }
};

var CAROUSEL_CONTAINER_CLASS = '.swiper_products_tile_carousel_container';
var SWIPER_NEXT_BUTTON_CLASS = '.swiper-button-next';
var SWIPER_PREV_BUTTON_CLASS = '.swiper-button-prev';
var SWIPER_CAROUSEL_CLASS = '.swiper_products_tile_carousel';
var SWIPER_SLIDE_CLASS = '.swiper-slide';

function createOnPageResize(swiper) {
  return function () {
    if (window.innerWidth >= 640) {
      swiper.params.loop = true;
    } else {
      swiper.params.loop = false;
      swiper.params.freeMode = false;
      swiper.params.slidesPerView = 'auto';
    }

    swiper.update();
  };
}

function initCarousel(element) {
  var nextElement = element.querySelector(SWIPER_NEXT_BUTTON_CLASS);
  var prevElement = element.querySelector(SWIPER_PREV_BUTTON_CLASS);
  var carousel = element.querySelector(SWIPER_CAROUSEL_CLASS);
  console.log(nextElement, prevElement, carousel);
  var carouselSwiper = new Swiper(carousel, {
    slidesPerView: 'auto',
    spaceBetween: 0,
    lazy: true,
    navigation: {
      nextEl: nextElement,
      prevEl: prevElement
    },
    breakpoints: {
      640: {
        // when window width is >= 640px
        freeMode: false,
        slidesPerView: 3,
        slidesPerGroup: 3,
        centeredSlides: false,
        centeredSlidesBounds: false,
        loop: true
      },
      1024: {
        freeMode: false,
        slidesPerView: 4,
        slidesPerGroup: 4,
        centeredSlides: false,
        centeredSlidesBounds: false,
        loop: true
      },
      1300: {
        freeMode: false,
        slidesPerView: 5,
        slidesPerGroup: 5,
        centeredSlides: false,
        centeredSlidesBounds: false,
        loop: true
      },
      1600: {
        freeMode: false,
        slidesPerView: 6,
        slidesPerGroup: 6,
        centeredSlides: false,
        centeredSlidesBounds: false,
        loop: true
      }
    },
    on: {
      init: function init() {
        $(SWIPER_SLIDE_CLASS).addClass('loaded');
      }
    }
  });
  var onPageResize = createOnPageResize(carouselSwiper);
  window.addEventListener('resize', function () {
    onPageResize();
  });
}

function initCarousels() {
  var carouselContainers = document.querySelectorAll(CAROUSEL_CONTAINER_CLASS);
  var carousels = Array.prototype.slice.call(carouselContainers);
  carousels.forEach(function (carousel) {
    initCarousel(carousel);
  });
}
/**
 * Put all functions that need to run on product-page load here
 */


var init = function init() {
  Swiper.use([Navigation$1, Pagination$1, Lazy$1, Autoplay$1]);
  initCarousels();
};

// @ts-check
/**
 * Icon prefix
 */

var ICON_PREFIX = CSS_PREFIX + "Icon-";
/**
 * SUFFIXES
 */

/**
 * Container (e.g., for Handlebars)
 */

var CONTAINER_SUFFIX = '-container';
/**
 * Template (e.g., for Handlebars)
 */

var TEMPLATE_SUFFIX = '-template';
/**
 * Global inventory type
 */

var INVENTORY_TYPE = window.vars.inventoryType;
var OUT_OF_STOCK_HANDLING = window.vars.outOfStockHandling;
/**
 * TAGS
 */

/**
 * The product tag that indicates that the product will not be restocked
 * @see https://app.gitbook.com/@decathlonusa/s/shopify/implemented-features-documentation/product-page-v1#sold-out-logic
 */

var NON_FOLLOWED_TAG = 'NonFollowed';
/**
 * CSS Classes
 */

/**
 * The CSS classes used to update the UI on variant changes
 */

var IS_ACTIVE_CLASS = CSS_PREFIX + "is-active";
var IS_TRANSITIONING_CLASS = CSS_PREFIX + "is-transitioning";
var IS_OUT_OF_STOCK_CLASS = CSS_PREFIX + "is-outofstock";
var IS_SOLD_OUT_CLASS = CSS_PREFIX + "is-soldout";
var VALIDATION_MESSAGE_CLASS = JS_PREFIX + "validation-message";
/**
 * TEXT CONSTANTS
 */

/**
 * Text used to update UI elements
 * @todo Use translation keys
 */

var PRODUCT_PAGE_COPY = {
  SELECT_A_SIZE: 'Select a size',
  ADD_TO_CART: 'Add to Cart',
  SOLD_OUT: 'Sold Out',
  EMAIL_ME_WHEN_IN_STOCK: 'Email Me When Available',
  OUT_OF_STOCK: 'Out of stock',
  ALL_SIZES_OUT_OF_STOCK: 'Out of stock.',
  NEW_MODEL_IN_DESIGN: 'New model in design',
  OUT_OF_STOCK_RECENTLY_CHANGED: 'Out of stock. Inventory recently changed.',
  INVENTORY_RECENTLY_CHANGED: 'Inventory recently changed',
  ALL_AVAILABLE_PRODUCTS_IN_CART: 'All available products are in your cart.',

  /**
   * @param {string | number} quantity
   * @returns {string}
   */
  allInStockProductsInYourCart: function allInStockProductsInYourCart(quantity) {
    return "All in stock products are now in your cart. " + quantity + " " + (Number(quantity) === 1 ? 'was' : 'were') + " added.";
  },

  /**
   * Provides the proper UI text to display
   * • If quantity 0 left => "0 left"
   * • If quantity > 0 => "Only X left"
   * @todo Consider moving out of constants because different values can be returned
   * @param {string | number} quantity
   * @returns {string}
   */
  limitedQuantityLeft: function limitedQuantityLeft(quantity) {
    return quantity === 0 ? quantity + " left" : "Only " + quantity + " left";
  }
};
/*
 * CSS class that sets content to a fixed (no scroll) state
 */

var FIXED_CLASS = CSS_PREFIX + "content-is-fixed";
/*
 * CSS class that indicates an element should hide vertical overflow
 */

var HIDE_OVERFLOW_Y_CLASS = CSS_UTILITY_PREFIX + "overflowYNone";
/**
 * CSS class used by components that need an "open" state
 */

var IS_OPEN = CSS_PREFIX + "is-open";

// @ts-check

/**
 * #mk70af
 * Remove declaration of jquery here. Use the global jQuery declaration instead with the global declaration of slick carousel.
 * 
 */

/**
 * Root element(s)
 */

var CONTAINER_CAROUSEL_SELECTOR = "." + JS_PREFIX + "SlickCarouselContainer";
var CONTAINER_CAROUSEL_ACTIVE_SELECTOR = CONTAINER_CAROUSEL_SELECTOR + "." + IS_ACTIVE_CLASS;
var FEATURE_CAROUSEL_SELECTOR = "." + JS_PREFIX + "SlickCarouselFeature";
var FEATURE_CAROUSEL_ACTIVE_SELECTOR = FEATURE_CAROUSEL_SELECTOR + "." + IS_ACTIVE_CLASS;
var THUMBNAIL_CAROUSEL_SELECTOR = "." + JS_PREFIX + "SlickCarouselThumbnail";
var THUMBNAIL_CAROUSEL_ACTIVE_SELECTOR = THUMBNAIL_CAROUSEL_SELECTOR + "." + IS_ACTIVE_CLASS;
var SLIDE_CAROUSEL_SELECTOR = "." + JS_PREFIX + "SlickCarouselSlide";
var $galleryCounter = $("." + JS_PREFIX + "ProductGallery-countValue");
/**
 * Global active carousel index
 */

var activeSlideIndex = 0;
/**
 * Boolean check that all carousel slide totals are equal
 */

var allSlideTotalsMatch = true;
/**
 * Main carousel instance
 */

var $featureCarouselInstance = null;
/**
 * Thumbnail carousel instance
 */

var $thumbnailCarouselInstance = null;
/**
 * Partial carousel settings
 */

var THUMB_SLIDES_TO_SHOW = 5;
/**
 * Number of thumbnails that fit within view
 */

var THUMB_SLIDES_SCROLL_GATE = 5;
/**
 * Utility class that adds cursor: grab;
 */

var THUMB_CURSOR_GRAB_CLASS = CSS_UTILITY_PREFIX + "cursorGrab";
/**
 * Load carousel images
 */

var loadImages = function loadImages() {
  $(CONTAINER_CAROUSEL_ACTIVE_SELECTOR + " " + SLIDE_CAROUSEL_SELECTOR).each(function () {
    var $slide = $(this); // Remove placeholder background color once image has loaded

    $slide.on('load', function () {
      $slide.removeClass(CSS_UTILITY_PREFIX + "bgSilver " + CSS_UTILITY_PREFIX + "bgWhite");
    });

    if (!$slide.attr('srcset')) {
      var srcset = $slide.data('srcset');
      $slide.attr('srcset', srcset);
    }

    if (!$slide.attr('sizes')) {
      var sizes = $slide.data('sizes');
      $slide.attr('sizes', sizes);
    }

    if (!$slide.attr('src')) {
      // This is called data-carousel-src because there is a global script which
      // modifies data-src
      var src = $slide.data('carousel-src');
      $slide.attr('src', src);
    }
  });
};
/**
 * Checks whether all variant slide totals are equal
 */


var initAllSlideTotalsMatch = function initAllSlideTotalsMatch() {
  var previousSlideTotal = null;
  $(FEATURE_CAROUSEL_SELECTOR).each(function (index, featureCarousel) {
    var slideTotal = $(featureCarousel).children().length;

    if (previousSlideTotal !== null && slideTotal !== previousSlideTotal) {
      allSlideTotalsMatch = false;
      return false;
    }

    previousSlideTotal = slideTotal;
  });
};
/**
 * Returns the slide count of Slick Carousel elements
 *
 * @return {Number} Total slide element count
 */


var getSlideCount = function getSlideCount() {
  var _this = this;

  var slidesTraversed;
  var swipedSlide;
  var centerOffset = this.options.centerMode === true ? this.slideWidth * Math.floor(this.options.slidesToShow / 2) : 0;

  if (this.options.swipeToSlide === true) {
    /**
     * $slideTrack references the container element for the individual slides
     */
    this.$slideTrack.find('.slick-slide').each(function (index, slide) {
      var offsetPoint = slide.offsetLeft;
      var outerSize = $(slide).outerWidth();

      if (_this.options.vertical === true) {
        offsetPoint = slide.offsetTop;
        outerSize = $(slide).outerHeight();
      }

      if (offsetPoint - centerOffset + outerSize / 2 > _this.swipeLeft * -1) {
        swipedSlide = slide;
        return false;
      }
    });
    slidesTraversed = Math.abs(Number($(swipedSlide).attr('data-slick-index')) - this.currentSlide) || 1;
    return slidesTraversed;
  }

  return this.options.slidesToScroll;
};
/**
 * Returns the available indexes of Slick Carousel slides
 *
 * @returns {Array} Collection of navigable slide indexes
 */


var getNavigableIndexes = function getNavigableIndexes() {
  var breakPoint = 0;
  var counter = 0;
  var indexes = [];
  var max;

  if (this.options.infinite === false) {
    max = this.slideCount;
  } else {
    breakPoint = this.options.slideCount * -1;
    counter = this.options.slideCount * -1;
    max = this.slideCount * 2;
  }

  while (breakPoint < max) {
    indexes.push(breakPoint);
    breakPoint = counter + this.options.slidesToScroll;
    counter += this.options.slidesToScroll <= this.options.slidesToShow ? this.options.slidesToScroll : this.options.slidesToShow;
  }

  return indexes;
};
/**
 * Slick Carousel bugfix; allows swipeToSlide on vertical orientation
 * @see https://github.com/kenwheeler/slick/issues/1962
 */


var improveCarouselSwipeResponse = function improveCarouselSwipeResponse() {
  $(THUMBNAIL_CAROUSEL_ACTIVE_SELECTOR).each(function () {
    // @ts-ignore
    this.slick.getSlideCount = getSlideCount; // @ts-ignore

    this.slick.getNavigableIndexes = getNavigableIndexes;
  });
};
/**
 * Counter UI text format helper
 *
 * Formats the counter text for UI display.
 *
 * @param {Object} obj Counter data
 * @param {Number} obj.currentIndex The active index of shown carousel slide
 * @param {Number} obj.total The total count of the active carousel slides
 * @returns {string} Formatted text for UI display
 */


var formatCounterText = function formatCounterText(_ref) {
  var currentIndex = _ref.currentIndex,
      total = _ref.total;
  return currentIndex + 1 + "/" + total;
};
/**
 * Update carousel gallery counter value
 * @param {Object} counterData An object containing counter data
 */


var updateGalleryCounter = function updateGalleryCounter(counterData) {
  $galleryCounter.text(formatCounterText(counterData));
};
/**
 * Adjust cursor for thumbnails to indicate scrolling when available
 * @param {Number} thumbnailCount The active thumbnail total
 */


var updateThumbnailCursors = function updateThumbnailCursors(thumbnailCount) {
  var buttonElements = $(THUMBNAIL_CAROUSEL_ACTIVE_SELECTOR + " button");

  if (thumbnailCount > THUMB_SLIDES_SCROLL_GATE) {
    buttonElements.addClass(THUMB_CURSOR_GRAB_CLASS);
  } else {
    buttonElements.removeClass(THUMB_CURSOR_GRAB_CLASS);
  }
};
/**
 * Initialize carousel
 */


var initCarousel = function initCarousel() {
  var $featureCarouselActive = null;
  $featureCarouselActive = $(FEATURE_CAROUSEL_ACTIVE_SELECTOR);
  var $thumbnailCarouselActive = $(THUMBNAIL_CAROUSEL_ACTIVE_SELECTOR);
  var activeSlideTotal = $(FEATURE_CAROUSEL_ACTIVE_SELECTOR + ":first " + SLIDE_CAROUSEL_SELECTOR + ":not(.slick-cloned)").length;
  /**
   * Reset index when all slides do not match in length
   */

  if (!allSlideTotalsMatch) {
    activeSlideIndex = 0;
  }
  /**
   * Visit link for Slick configuration options
   * @see https://kenwheeler.github.io/slick/
   */


  var sharedConfig = {
    arrows: false,
    infinite: true,
    initialSlide: activeSlideIndex
  };
  /**
   * Keep activeSlideIndex in sync with active slide
   * Keep gallery counter in sync with active slide value and slide total
   */

  $featureCarouselActive.on('afterChange', function (event, slick, currentSlide) {
    activeSlideIndex = currentSlide;
    updateGalleryCounter({
      currentIndex: activeSlideIndex,
      total: slick.slideCount
    });
  });
  /**
   * On Slick initialization, set gallery counter active slide value and slide total
   */

  $featureCarouselActive.on('init', function () {
    updateGalleryCounter({
      currentIndex: activeSlideIndex,
      total: activeSlideTotal
    });
    loadImages();
    updateThumbnailCursors(activeSlideTotal);
  });
  $featureCarouselInstance = $featureCarouselActive.slick(Object.assign({}, sharedConfig, {
    asNavFor: $thumbnailCarouselActive,
    slidesToShow: 1,
    waitForAnimate: false
  }));
  $thumbnailCarouselInstance = $thumbnailCarouselActive.slick(Object.assign({}, sharedConfig, {
    asNavFor: $featureCarouselActive,
    focusOnSelect: true,
    slidesToShow: THUMB_SLIDES_TO_SHOW,
    vertical: true,
    verticalSwiping: true,
    swipeToSlide: true,
    touchThreshold: 30
  }));
  improveCarouselSwipeResponse();
};
/**
 * Add required active classes to elements
 * @param {string} containerClass Class name of container element
 */


var prepCarousel = function prepCarousel(containerClass) {
  $(containerClass).addClass(IS_ACTIVE_CLASS);
  $(containerClass + " > " + FEATURE_CAROUSEL_SELECTOR).addClass(IS_ACTIVE_CLASS);
  $(containerClass + " > " + THUMBNAIL_CAROUSEL_SELECTOR).addClass(IS_ACTIVE_CLASS);
};
/**
 * Destroy and clean up carousel
 */


var destroyCarousel = function destroyCarousel() {
  var $containerCarouselActive = $(CONTAINER_CAROUSEL_ACTIVE_SELECTOR);
  var $featureCarouselActive = $(FEATURE_CAROUSEL_ACTIVE_SELECTOR);
  var $thumbnailCarouselActive = $(THUMBNAIL_CAROUSEL_ACTIVE_SELECTOR);
  $featureCarouselInstance.slick('unslick');
  $thumbnailCarouselInstance.slick('unslick');
  $featureCarouselInstance.off();
  $thumbnailCarouselInstance.off();
  $featureCarouselActive.removeClass(IS_ACTIVE_CLASS);
  $thumbnailCarouselActive.removeClass(IS_ACTIVE_CLASS);
  $containerCarouselActive.removeClass(IS_ACTIVE_CLASS);
};
/**
 * Watch for window resize event (debounced), refresh carousel
 */


var handleWindowResize = function handleWindowResize() {
  var timeout = null;
  $(window).resize(function () {
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      var $featureCarouselActive = $(FEATURE_CAROUSEL_ACTIVE_SELECTOR);
      var $thumbnailCarouselActive = $(THUMBNAIL_CAROUSEL_ACTIVE_SELECTOR); // Sync slide index when switching between carousels (desktop vs mobile carousels)

      $featureCarouselInstance.slick('slickGoTo', activeSlideIndex);
      $thumbnailCarouselInstance.slick('slickGoTo', activeSlideIndex);
    }, 250);
  });
};
/**
 * Reset active carousel to represent new color
 * @param {string} color
 */


var onColorSelect = function onColorSelect(color) {
  var containerClass = CONTAINER_CAROUSEL_SELECTOR + "[data-color=\"" + color.toLowerCase() + "\"]"; // Breaking up the work into separate tasks because Slick clogs the main thread a lot

  var timeout1 = setTimeout(function () {
    clearTimeout(timeout1);
    destroyCarousel();
    prepCarousel(containerClass);
  }, 100);
  var timeout2 = setTimeout(function () {
    clearTimeout(timeout2);
    initCarousel();
  }, 150);
};
/**
 * Put all functions that need to run on product-page load here
 */

var init$1 = function init() {
  initAllSlideTotalsMatch();
  initCarousel$1();
  handleWindowResize();
};

/**
 * Root element(s)
 */

var $slideCarousel = jQuery("." + JS_PREFIX + "CarouselContextSlide");
/**
 * Load carousel images
 */

var loadImages$1 = function loadImages() {
  $slideCarousel.each(function () {
    var $slide = jQuery(this);

    if (!$slide.attr('srcset')) {
      var srcset = $slide.data('srcset');
      $slide.attr('srcset', srcset);
    }

    if (!$slide.attr('sizes')) {
      var sizes = $slide.data('sizes');
      $slide.attr('sizes', sizes);
    }

    if (!$slide.attr('src')) {
      // This is called data-carousel-src because there is a global script which
      // modifies data-src
      var _srcset = $slide.data('carousel-src');

      $slide.attr('src', _srcset);
    }
  });
};
/**
 * Put all functions that need to run on product-page load here
 */


var init$2 = function init() {
  loadImages$1();
};

/**
 * Attach listeners to open collapse elements
 */

var initCollapse = function initCollapse() {
  jQuery('[data-collapse]').on('click', function () {
    jQuery(this).toggleClass('expanded');
    jQuery(".de-collapse#" + jQuery(this).data('collapse')).toggleClass('expanded');
  });
};
/**
 * Put all functions that need to run on product-page load here
 */


var init$3 = function init() {
  initCollapse();
};

// @ts-check
var productsJSON = window.productJSON;
var variantsJSON = productsJSON.variants;
var COLOR_INDEX = productsJSON.options.indexOf('Color');
var SIZE_INDEX = productsJSON.options.indexOf('Size');
var MODEL_INDEX = productsJSON.options.indexOf('Model Code');
var COLOR_OPTION = "option" + (COLOR_INDEX + 1);
var SIZE_OPTION = "option" + (SIZE_INDEX + 1);
var MODEL_OPTION = "option" + (MODEL_INDEX + 1);
/**
 * @todo Make `MIN_QUANTITY_THRESHOLD` threshold dynamic based on theme settings
 */

var MIN_QUANTITY_THRESHOLD = 5;
/**
 * Searches for a given tag in the product tags
 *
 * @param {string} tag The tag to search for
 * @returns {boolean}
 */

var isTagFound = function isTagFound(tag) {
  return productsJSON.tags.includes(tag);
};
/**
 * Helper to get the variant based on a color & size or ID
 *
 * @param {Object} obj The selected options data
 * @param {string} [obj.size] The selected size option
 * @param {string} [obj.color] The selected color option
 * @param {number} [obj.id] A product variant ID
 * @param {Array} [obj.source = variantsJSON] The array to filter to find a
 * product variant
 * @returns {Variant | undefined} A product variant object
 */


var getSelectedVariant = function getSelectedVariant(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      size = _ref.size,
      color = _ref.color,
      id = _ref.id,
      _ref$source = _ref.source,
      source = _ref$source === void 0 ? variantsJSON : _ref$source;

  if (!Array.isArray(source) || !id && (!color || !size)) {
    return;
  }

  return source.find(function (variant) {
    return variant[SIZE_OPTION] === size && variant[COLOR_OPTION] === color || variant.id === id;
  });
};
/**
 * Helper to determine if a product is an "End Of Life" product
 * @see https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#sold-out-logic
 * @returns {boolean}
 */

var isNonFollowedProduct = function isNonFollowedProduct() {
  return isTagFound(NON_FOLLOWED_TAG);
};
/**
 * Helper to determine if a product has varied prices
 *
 * @returns {boolean}
 */

var isProductPricingVaried = function isProductPricingVaried() {
  var manualCompareAtPrices = productsJSON.variants.map(function (v) {
    return v.compare_at_price;
  });

  var manualCompareAtPriceVaries = function manualCompareAtPriceVaries(manualCompareAtPrices) {
    return manualCompareAtPrices.every(function (v) {
      return v === manualCompareAtPrices[0];
    });
  };

  return productsJSON.price_varies || manualCompareAtPriceVaries;
};
/**
 * Gets model code from variant
 *
 * @param {Variant} variant
 * @returns {string} Variant model code
 */

var getModelCodeFromVariant = function getModelCodeFromVariant(variant) {
  return variant[MODEL_OPTION];
};
/**
 * Filters for available variants
 *
 * @returns {Variant[]} An array of available variants
 */

var availableVariants = function availableVariants() {
  return variantsJSON.filter(isVariantAvailable);
};
/**
 * Returns all options (option1) that share a variant with given option (option2)
 *
 * @param {Object} params An object
 * @param {string} params.searchOption Title of option to find matches in
 * @param {string} params.findOption Title of option to match
 * @param {string | undefined} params.value Value of option to find matches in
 * @param {Array} params.variants Array of variants to filter on
 * @returns {Array} Options with matches to given option
 */

var getOptionCombinations = function getOptionCombinations(_ref3) {
  var searchOption = _ref3.searchOption,
      findOption = _ref3.findOption,
      value = _ref3.value,
      variants = _ref3.variants;
  return variants.reduce(function (accArray, variant) {
    if (!accArray.includes(variant[searchOption])) {
      if (value) {
        if (value === variant[findOption]) {
          accArray.push(variant[searchOption]);
        }
      } else {
        accArray.push(variant[searchOption]);
      }
    }

    return accArray;
  }, []);
};
/**
 * Gets existing colors from size
 *
 * @param {string} size A size value
 * @returns {Array} Existing colors
 */


var getExistingColorsFromSize = function getExistingColorsFromSize(size) {
  return getOptionCombinations({
    searchOption: COLOR_OPTION,
    findOption: SIZE_OPTION,
    value: size,
    variants: variantsJSON
  });
};
/**
 * Gets existing sizes from color
 *
 * @param {string} color A color value
 * @returns {Array} Existing sizes
 */

var getExistingSizesFromColor = function getExistingSizesFromColor(color) {
  return getOptionCombinations({
    searchOption: SIZE_OPTION,
    findOption: COLOR_OPTION,
    value: color,
    variants: variantsJSON
  });
};
/**
 * Gets available colors from size
 *
 * @param {string} size A size value
 * @returns {Array} Available colors
 */

var getAvailableColorsFromSize = function getAvailableColorsFromSize(size) {
  return getOptionCombinations({
    searchOption: COLOR_OPTION,
    findOption: SIZE_OPTION,
    value: size,
    variants: availableVariants()
  });
};
/**
 * Gets available sizes from color
 *
 * @param {string} color A color value
 * @returns {Array} Available sizes
 */

var getAvailableSizesFromColor = function getAvailableSizesFromColor(color) {
  return getOptionCombinations({
    searchOption: SIZE_OPTION,
    findOption: COLOR_OPTION,
    value: color,
    variants: availableVariants()
  });
};
/**
 * @typedef {Object} VariantOptions
 * @property {string | null} size
 * @property {string | null} color
 * @property {string | null} model
 */

/**
 * @param {Variant} variant
 * @returns {VariantOptions}
 */

var getVariantOptions = function getVariantOptions(variant) {
  return {
    size: variant[SIZE_OPTION],
    color: variant[COLOR_OPTION],
    model: variant[MODEL_OPTION]
  };
};
/**
 * Helper to know if a product variant is available
 * @param {Variant} variant
 * @returns {boolean}
 */

var isVariantAvailable = function isVariantAvailable(variant) {
  var variantInventory = window.productJSON.variants.find(function (v) {
    return v.id === variant.id;
  });
  var variantLocationsInventory = (window.inventories || {})[variant.id];
  var isAvailable = false;

  if (variantLocationsInventory) {
    var inventoryItem = variantLocationsInventory.inventoryItem;
    var delivery = inventoryItem.delivery,
        locations = inventoryItem.locations;
    var filteredLocations = locations.filter(function (loc) {
      return loc.available > 0;
    });
    isAvailable = filteredLocations.length > 0 || delivery.available > 0;
  } else {
    return variant && variant.available;
  } // return variant && variant.available;


  return isAvailable;
};
/**
 * Helper to know if a product variant is "out of stock"
 * @see https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#sold-out-logic
 * @param {Variant} variant
 * @returns {boolean}
 */

var isVariantOutOfStock = function isVariantOutOfStock(variant) {
  return !isVariantAvailable(variant) && !isNonFollowedProduct();
};
/**
 * Helper to know if a product variant is "sold out"
 * @see https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#sold-out-logic
 * @param {Variant} variant
 * @returns {boolean}
 */

var isVariantSoldOut = function isVariantSoldOut(variant) {
  return !isVariantAvailable(variant) && isNonFollowedProduct();
};
/**
 * Helper to know if a product variant is "Click & Collect"
 * @param {Variant} variant
 * @returns {boolean}
 */

var isVariantCC = function isVariantCC(variant) {
  var v = window.vars.productJSON.variants.find(function (obj) {
    return obj.id === variant.id;
  });
  return v.cc || false;
};
/**
 * Helper to determine if a given variant has quantity above the minimum threshold
 * @param {Variant} variant
 * @returns {boolean}
 */

var variantHasSufficientQuantity = function variantHasSufficientQuantity(variant) {
  return variant.inventory_quantity >= MIN_QUANTITY_THRESHOLD;
};

var initialState = {
  color: null,
  selectedOption: null
};
var state = createState(initialState);
var $swatches = jQuery("." + JS_PREFIX + "ColorSwatches");
var swatchOptionEls = document.querySelectorAll("." + JS_PREFIX + "ColorSwatches-option");
var $colorSwatchesOptions = jQuery(swatchOptionEls);
var $colorInfo = jQuery("." + JS_PREFIX + "ColorInfo");

var updateColorUIState = function updateColorUIState(selectedOption) {
  // Visually unselect all options then select current options
  $colorSwatchesOptions.removeClass(IS_ACTIVE_CLASS);
  jQuery(selectedOption).addClass(IS_ACTIVE_CLASS);
};

var selectFirstSwatch = function selectFirstSwatch() {
  var firstAvailableVariant = availableVariants()[0];
  var color = firstAvailableVariant && getVariantOptions(firstAvailableVariant).color;
  var firstSwatch = color && $colorSwatchesOptions.toArray().find(function (el) {
    return el.value === color;
  }) || $colorSwatchesOptions.get(0);

  if (firstSwatch) {
    firstSwatch.click();
  }
};

var render = function render(_ref) {
  var selectedOption = _ref.selectedOption,
      color = _ref.color;
  updateColorUIState(selectedOption);
  $colorInfo.text(color);
};

state.onChange(render);
var handleColorSelect = function handleColorSelect(callback) {
  state.onChange(function (_ref2) {
    var color = _ref2.color;
    return callback(color);
  }, function (state) {
    return [state.color];
  });
};

var onColorSelect$1 = function onColorSelect() {
  state.updateState({
    // @ts-ignore
    color: jQuery(this).val(),
    selectedOption: this
  });
};

var selectSingleColorOptions = function selectSingleColorOptions() {
  if ($colorSwatchesOptions.length === 1) {
    $colorSwatchesOptions[0].click();
  }
};

var init$4 = function init() {
  $colorSwatchesOptions.on('click', onColorSelect$1);
  selectSingleColorOptions();
};

var initialState$1 = {
  size: null,
  selectedOption: null,
  variant: null,
  color: null
};
var state$1 = createState(initialState$1);
var $swatches$1 = jQuery("." + JS_PREFIX + "SizeSwatches");
var swatchOptionEls$1 = document.querySelectorAll("." + JS_PREFIX + "SizeSwatches-option");
var validationTextEl = document.querySelector("." + VALIDATION_MESSAGE_CLASS);
var stockMessageTextEl = document.querySelector('.js-de-stock-info-message');
var $sizeSwatchesOptions = jQuery(swatchOptionEls$1);
var $sizeInfo = jQuery("." + JS_PREFIX + "SizeInfo");

var updateSizeUIState = function updateSizeUIState(selectedOption) {
  // Visually unselect all options then select current options
  $sizeSwatchesOptions.removeClass(IS_ACTIVE_CLASS);
  jQuery(selectedOption).addClass(IS_ACTIVE_CLASS);
};

var render$1 = function render(_ref) {
  var selectedOption = _ref.selectedOption,
      size = _ref.size,
      variant = _ref.variant,
      color = _ref.color;
  $swatches$1.toggleClass(IS_HIDDEN_CLASS, getExistingSizesFromColor(color).length === 1);
  updateSizeUIState(selectedOption);
  $sizeInfo.text(variant ? size : PRODUCT_PAGE_COPY.SELECT_A_SIZE);
};

state$1.onChange(render$1);
var onColorSelect$2 = function onColorSelect(color) {
  var existingSizes = getExistingSizesFromColor(color); // If there is only one size for the currently selected color, select that size

  if (existingSizes.length === 1) {
    var onlyApplicableSize = existingSizes[0];

    if (onlyApplicableSize !== state$1.getState().size) {
      var target = $sizeSwatchesOptions.filter(function (_index, el) {
        return el.value === onlyApplicableSize;
      }).get(0);
      onSizeSelect.bind(target)();
    }
  }

  state$1.updateState({
    color: color
  });
}; // Change cb to callback

var handleSizeSelect = function handleSizeSelect(callback) {
  state$1.onChange(function (_ref2) {
    var size = _ref2.size;
    return callback(size);
  }, function (state) {
    return [state.size];
  });
};

var onSizeSelect = function onSizeSelect() {
  state$1.updateState({
    // @ts-ignore
    size: jQuery(this).val(),
    selectedOption: this
  });
  resetMissingSizeInfo();
};

var onVariantSelect = function onVariantSelect(variant) {
  state$1.updateState({
    variant: variant
  });
  resetMissingSizeInfo();
};

var showMissingSizeInfo = function showMissingSizeInfo() {
  if (validationTextEl) {
    validationTextEl.textContent = PRODUCT_PAGE_COPY.SELECT_A_SIZE;
  }

  if (stockMessageTextEl && stockMessageTextEl.textContent && validationTextEl.textContent !== '') {
    stockMessageTextEl.textContent = '';
  }
};

var resetMissingSizeInfo = function resetMissingSizeInfo() {
  if (validationTextEl) {
    validationTextEl.textContent = '';
  }
};

var handleAddToCartAttemptWithNoVariant = function handleAddToCartAttemptWithNoVariant() {
  // Can't add to cart if no size is selected
  showMissingSizeInfo();
};
var init$5 = function init() {
  $sizeSwatchesOptions.on('click', onSizeSelect);
};

/**
 * @param {string} c
 */

var isFlagClass = function isFlagClass(c) {
  return (// IE doesn't support string#startsWith, so we are using a regex instead of polyfill
    c.match(new RegExp("^" + CSS_UTILITY_PREFIX + "bg")) || c.match(new RegExp("^" + CSS_UTILITY_PREFIX + "text(?:White|Black|Blue)")) || c.match(new RegExp("^" + CSS_UTILITY_PREFIX + "hidden"))
  );
};
/**
 * @typedef State
 * @property {Variant | null} variant
 * @property {boolean} isShown
 */

/** @type {State} */


var initialState$2 = {
  isShown: true,
  variant: null
};
var state$2 = createState(initialState$2);
/**
 * Updates product flags UI when variant changes
 * @param {Variant} variant
 */

var onVariantSelect$1 = function onVariantSelect(variant) {
  state$2.updateState({
    variant: variant
  });
};
var showProductFlags = function showProductFlags() {
  state$2.updateState({
    isShown: true
  });
};
var hideProductFlags = function hideProductFlags() {
  state$2.updateState({
    isShown: false
  });
};
/**
 * @param {Element} el
 * @param {string[]} classes
 */

var removeClasses$1 = function removeClasses(el) {
  for (var _len = arguments.length, classes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    classes[_key - 1] = arguments[_key];
  }

  return classes.forEach(function (c) {
    return el.classList.remove(c);
  });
};
/**
 * @param {Element} el
 * @param {string[]} classes
 */


var addClasses$1 = function addClasses(el) {
  for (var _len2 = arguments.length, classes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    classes[_key2 - 1] = arguments[_key2];
  }

  return classes.forEach(function (c) {
    return el.classList.add(c);
  });
};
/**
 * Updates the DOM to match the state
 * @param {State} state
 */


var render$2 = function render(_ref) {
  var variant = _ref.variant,
      isShown = _ref.isShown;
  var product = window.productJSON;
  var isOnSale = variant ? variant.compare_at_price > variant.price : product.compare_at_price > product.price;
  var productFlagEls = document.querySelectorAll("." + JS_PREFIX + "ProductFlag[data-flag=\"{ product.id }\"]");
  if (!productFlagEls) return;
  /**
   * Updates the flag with the updated text and css classes
   * @param {string | null} label The new text for the flag
   * @param {string} newClasses The css classes to apply to the flag
   */

  var updateFlag = function updateFlag(label, newClasses) {
    return productFlagEls.forEach(function (el) {
      var classesToRemove = _toConsumableArray(el.classList).filter(isFlagClass);

      removeClasses$1.apply(void 0, [el].concat(_toConsumableArray(classesToRemove)));
      if (newClasses) addClasses$1.apply(void 0, [el].concat(_toConsumableArray(newClasses.split(/\s+/g))));
      if (!isShown || !label) el.classList.add(IS_HIDDEN_CLASS);
      el.innerHTML = label;
    });
  }; // IF YOU UPDATE THIS
  // You must also update the corresponding liquid code for server-render
  // ./snippets/product-flag.liquid
  // Last call flag needs to take priority over other flags


  if (isOnSale) {
    updateFlag('Sale', 'de-u-bgRed de-u-textWhite');
  } else if (product.tags.includes('Innovation')) {
    updateFlag('Innovation', 'de-u-bgLime de-u-textBlack');
  } else if (product.tags.includes('new')) {
    updateFlag('New Release', 'de-u-bgBlue de-u-textWhite');
  } else {
    updateFlag(null, ''); // The flag will hide
  }
};

state$2.onChange(render$2);

// @ts-check
var videojs = window.videojs; // 960 roughly equates to the media query variable $breakpoint-lg

var LARGE_BREAKPOINT = 960; // When element is within viewport

var IS_INTERSECTING = CSS_PREFIX + "is-intersecting"; // Create array for player IDs

var players = []; // Create array for error video IDs

var errorVideoIds = [];
var $videoCarousel = jQuery('.js-de-slick--videos');
var $thumbnailCarousel = jQuery('.js-de-slick--videos-thumbnails');
/** -- Helper functions -- */

/**
 * Handle all players' play event
 *
 * @param {Event} event The handler event object
 */

var onPlay = function onPlay(event) {
  // Determine which player the event is coming from
  var id =
  /** @type {HTMLElement} */
  event.target.id; // Loop through the array of players

  for (var i = 0; i < players.length; i++) {
    // Get the player(s) that did not trigger the play event
    if (players[i].id() !== id) {
      // Pause the other player(s)
      videojs(players[i].id()).pause();
    }
  }
};
/**
 * Track all players' errors or error events
 *
 * @param {string} videoId - The ID of the video in error
 */


var trackVideosWithErrors = function trackVideosWithErrors(videoId) {
  // Build the product URL
  var productURL = window.location.host + window.location.pathname; // Send an event to Google Analytics, only one per broken video

  if (!errorVideoIds.includes(videoId)) {
    window.dataLayer.push({
      event: 'video-is-broken',
      videoId: videoId,
      productURL: productURL
    });
    errorVideoIds.push(videoId);
  }
};
/**
 * Return a trimmed version of the video player's `referenceId`
 * @param {string} referenceId
 */


var trimVideoReferenceId = function trimVideoReferenceId(referenceId) {
  return referenceId.replace(/ref:|_1/g, '').trim();
};
/**
 * Get a video id from a video error event
 *
 * @param {HTMLElement} videoEl - A video error event
 * @returns {string} - The video's id
 */


var getIDFromVideoElement = function getIDFromVideoElement(videoEl) {
  return trimVideoReferenceId(videoEl.dataset.videoId);
};
/**
 * Get the first video player
 *
 * @returns {Object|null}
 */


var getFirstVideoPlayer = function getFirstVideoPlayer() {
  return players[0] && 'id' in players[0] ? videojs(players[0].id()) : null;
};
/**
 * Control the first video player
 *
 * @param {'play' | 'pause'} action
 */


var controlFirstVideoPlayer = function controlFirstVideoPlayer(action) {
  var player = getFirstVideoPlayer();
  player && player[action]();
};
/**
 * Play the first video player
 */


var pauseFirstVideoPlayer = function pauseFirstVideoPlayer() {
  return controlFirstVideoPlayer('pause');
};
/**
 * Pause the first video player
 */


var playFirstVideoPlayer = function playFirstVideoPlayer() {
  return controlFirstVideoPlayer('play');
};
/** -- Page load setup -- */
// Load poster images into DOM for slick slider navigation


jQuery(window).on('load', function () {
  var $posterImages = jQuery('.js-de-slick--videos .vjs-poster');
  $posterImages.each(function (index) {
    var count = index + 1;
    jQuery(".js-de-slick--videos-thumbnails .js-de-AdditionalVideos-thumb-" + count).attr('src', jQuery(this).css('background-image').replace(/^url\(['"](.+)['"]\)/, '$1'));
  }); // Create carousel with videos

  $videoCarousel.slick({
    asNavFor: $thumbnailCarousel,
    arrows: false,
    swipe: false
  }); // Pause video on current slide before slide change

  $videoCarousel.on('beforeChange', function (event, slick, currentSlide, nextSlide) {
    if (currentSlide !== nextSlide && videojs) {
      // Pause video (currentSlide+1 to skip over square video, which is first element in players[])
      videojs(players[currentSlide + 1].id()).pause();
    }
  }); // Create carousel with video thumbnails

  $thumbnailCarousel.slick({
    slidesToShow: 4,
    slidesToScroll: 1,
    asNavFor: $videoCarousel,
    focusOnSelect: true,
    swipeToSlide: true,
    touchThreshold: 30
  });
});
/** -- Video Initialization -- */

var initializeVideoJS = function initializeVideoJS() {
  videojs = window.videojs;
  var $toggleButton = jQuery('.js-de-toggle-media');
  var $viewImagesCTA = jQuery('.js-de-view-images');
  var $watchVideoCTA = jQuery('.js-de-watch-video');
  var $galleryVideo = jQuery('.js-de-galleryVideo');
  var $imageCount = jQuery('.js-de-ProductGallery-count');

  var switchToImages = function switchToImages() {
    // Remove Video, switch to Images
    $toggleButton.removeClass('js-de-toggle');
    $watchVideoCTA.removeClass('de-u-hidden');
    $viewImagesCTA.addClass('de-u-hidden');
    $galleryVideo.addClass('de-u-hidden');
    showProductFlags();
    $imageCount.removeClass('de-u-hidden'); // Pause Video

    pauseFirstVideoPlayer();
  };

  var switchToVideo = function switchToVideo() {
    // Add Video
    $toggleButton.addClass('js-de-toggle');
    hideProductFlags();
    $imageCount.addClass('de-u-hidden');
    $viewImagesCTA.removeClass('de-u-hidden');
    $watchVideoCTA.addClass('de-u-hidden');
    $galleryVideo.removeClass('de-u-hidden'); // Play Video

    playFirstVideoPlayer();
  };

  $swatches.on('ColorSwatches:select', switchToImages); // Attach click event to 'Watch Videos' button to toggle between video and image

  $toggleButton.click(function () {
    if ($toggleButton.hasClass('js-de-toggle')) {
      switchToImages();
    } else {
      switchToVideo();
    }
  }); // Video Player Keys

  var videoPlayerKeys = Object.keys(videojs.getPlayers()); // +++  Determine the available player IDs +++//

  for (var x = 0; x < videoPlayerKeys.length; x++) {
    // Assign the player name to setPlayer
    var setPlayer = videoPlayerKeys[x]; // Define the ready event for the player

    videojs(setPlayer).ready(function () {
      // Assign this player to a variable
      var myPlayer = this;
      var videoLoadError = myPlayer.error && myPlayer.error() && myPlayer.error().code;
      var referenceId = myPlayer.mediainfo && myPlayer.mediainfo.referenceId && trimVideoReferenceId(myPlayer.mediainfo.referenceId); // Assign and event listener for play event

      myPlayer.on('play', onPlay); // Push the player to the players array

      players.push(myPlayer); // Handle videos that don't work on page load

      if (videoLoadError && referenceId) {
        trackVideosWithErrors(referenceId);
      } // Assign an event listener for a video player error event


      myPlayer.on('error', function (event) {
        trackVideosWithErrors(getIDFromVideoElement(
        /** @type {HTMLElement} */
        event.target));
      });
    });
  }
  /**
   * Watch for window resize event (debounced), pause gallery video
   */


  var timeout = null;
  jQuery(window).resize(function () {
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      if (jQuery(window).width() >= LARGE_BREAKPOINT) {
        // Pause Video
        pauseFirstVideoPlayer();
        showProductFlags();
      }
    }, 250);
  });
  /**
   * Determine when element is within viewport
   * Confirm IntersectionObserver is available on the global object
   */

  if (window.IntersectionObserver) {
    /**
     * Trigger function when a video player componenet is within viewport
     * @see IntersectionObserver https://css-tricks.com/a-few-functional-uses-for-intersection-observer-to-know-when-an-element-is-in-view/
     */
    var observerOptions = {
      rootMargin: "0px 0px -" + $videoCarousel.height() + "px 0px"
    }; // Toggle class that shows or hides controller bar/play button

    var handleObserver = function handleObserver(entries) {
      return entries.forEach(function (entry) {
        return entry.isIntersecting ? entry.target.classList.add(IS_INTERSECTING) : entry.target.classList.remove(IS_INTERSECTING);
      });
    }; // Create new Observer instance


    var observer = new IntersectionObserver(handleObserver, observerOptions); // Add a watcher to each video player component

    $videoCarousel.each(function (index, videoElement) {
      return observer.observe(videoElement);
    });
  }
};

if (videojs) {
  initializeVideoJS();
} else {
  // Test if video carousel exists
  var script = document.querySelector("." + JS_PREFIX + "brightcove-script");

  if (script) {
    script.addEventListener('load', function () {
      if (window.videojs) {
        initializeVideoJS();
      }
    });
  }
}

/**
 * Module-specific constants
 */

var ACCORDION_SELECTOR = "." + JS_PREFIX + "Accordion";
var ACCORDION_HEADER_SELECTOR = ACCORDION_SELECTOR + "-header";
var CLICK_EVENT = 'click';
/**
 * Handler for when an accordion header button is clicked
 *
 * @this accordionHeaderButton The triggered button element
 */

var onButtonClick = function onButtonClick() {
  var accordion = this.closest(ACCORDION_SELECTOR);

  if (accordion) {
    var currentToggleState = accordion.classList.toggle(IS_OPEN);
    this.setAttribute('aria-expanded', String(currentToggleState));
  }
};
/**
 * Initializes functionality by setting up event binding
 */


var init$6 = function init() {
  document.querySelectorAll(ACCORDION_HEADER_SELECTOR).forEach(function (element) {
    return element.addEventListener(CLICK_EVENT, onButtonClick);
  });
};

function pushStockInfoToDataLayer(modelNumber) {
  window.vars.pushInventory = window.vars.pushInventory || [];
  window.vars.pushInventory.push(modelNumber);

  if (!window.inventories) {
    return false;
  }

  if (window.vars.pushInventory.length > 0) {
    var uniqueModels = _toConsumableArray(new Set(window.vars.pushInventory)); // console.log(uniqueModels);


    uniqueModels.forEach(function (model) {
      push(model);
    });
    window.vars.pushInventory.length = 0;
  }
}

function push(modelNumber) {
  // console.log('Pushing ' + modelNumber);
  // Determine stock status
  var simpleInventory = {};

  for (var _i = 0, _Object$entries = Object.entries(window.inventories); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _Object$entries[_i],
        key = _Object$entries$_i[0],
        obj = _Object$entries$_i[1];
    var modelNum = obj.title.split(' ');
    modelNum = modelNum[modelNum.length - 1];
    simpleInventory[modelNum] = simpleInventory[modelNum] || {
      stock: 0,
      stockStatus: []
    };
    var onlineInventory = obj.inventoryItem.delivery;

    if (onlineInventory) {
      simpleInventory[modelNum].stockStatus.push(onlineInventory.inStock > 0);
      simpleInventory[modelNum].stock += onlineInventory.available;
    } else {
      simpleInventory[modelNum].stockStatus.push(false);
    }
  }

  var stockStatusArray = simpleInventory[modelNumber].stockStatus;
  var stockStatus = 'Not Available';

  if (stockStatusArray.every(function (item) {
    return item === true;
  })) {
    stockStatus = 'Fully Available';
  } else if (stockStatusArray.some(function (item) {
    return item === true;
  })) {
    stockStatus = 'Partially Available';
  }

  window.vars.productStockInfo = window.vars.productStockInfo || {};
  window.vars.productStockInfo.dynamic = {
    'Model Number': modelNumber,
    'Stock Status': stockStatus
  };
  var event = {
    'event': 'stockLevel'
  };
  var stockEventPayload = Object.assign({}, window.vars.productStockInfo.static, window.vars.productStockInfo.dynamic, event); // console.log(stockEventPayload);

  dataLayer.push(stockEventPayload);
}

var demoInventory = {
  id: 'demo',
  locations: [],
  stateLocations: [],
  delivery: {},
  favStore: window.vars.favStore,
  state: null,
  code: JSON.parse(localStorage.getItem('state_code')) || null,
  collapsed: true
};
var emptyData = {
  favStore: window.vars.favStore
};
var storesSort = window.masterStores.map(function (a) {
  return a.name;
});

var militaryTo12hFormat = function militaryTo12hFormat(time) {
  var militaryHours = Number(time.substring(0, 2));
  var militaryMinutes = time.substring(2, 4);
  var hours = (militaryHours + 11) % 12 + 1;
  var amOrPm = militaryHours < 12 || militaryHours === 24 ? 'am' : 'pm';
  return hours + ":" + militaryMinutes + amOrPm;
};

function addMasterStoresData(inventoryItem, state) {
  inventoryItem.locations = inventoryItem.locations.filter(function (loc) {
    return storesSort.indexOf(loc.name) !== -1;
  });
  var onlineItem = inventoryItem.locations.filter(function (store) {
    return window.onlineInventoryStores.indexOf(store.name) !== -1;
  });
  inventoryItem.online = onlineItem;
  var duplicateStores = window.masterStores.filter(function (loc) {
    return loc.duplicate;
  });
  duplicateStores.forEach(function (loc) {
    var alreadyAdded = inventoryItem.locations.find(function (obj) {
      return obj.name === loc.name;
    });

    if (!alreadyAdded) {
      var thisLoc = inventoryItem.locations.find(function (obj) {
        return obj.name === loc.duplicate;
      });

      if (thisLoc) {
        var duplicateLoc = JSON.parse(JSON.stringify(thisLoc));
        duplicateLoc.name = loc.name;
        inventoryItem.locations.push(duplicateLoc);
      }
    }
  });

  var _loop = function _loop(i) {
    var masterLoc = window.masterStores[i];
    var thisLoc = inventoryItem.locations.find(function (obj) {
      return obj.name === masterLoc.name;
    }); // Check the current weekday to show Genesus store hours on product page

    weekday = new Date().getDay();
    openHour = masterLoc['hours_' + (masterLoc.is_same_hours_weekly ? 0 : weekday) + '_open'];
    closeHour = masterLoc['hours_' + (masterLoc.is_same_hours_weekly ? 0 : weekday) + '_close'];

    if (openHour === '0000' && closeHour === '0000') {
      weekday = weekday + 1;

      if (weekday > 6) {
        weekday = 0;
      }

      openHour = masterLoc['hours_' + weekday + '_open'];
      closeHour = masterLoc['hours_' + weekday + '_close']; //console.log(weekday);
    } // Create abbreviation for each weekday & get the abbreviation for the current day


    days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];

    for (d = 0; d < 7; d++) {
      day = days[d];

      if (weekday === d) {
        nameDay = day;
      }
    }

    if (thisLoc) {
      thisLoc.title = masterLoc.title;

      if (thisLoc.available > 0) {
        thisLoc.ready = '<span>' + masterLoc.ready + '</span>';
      } else {
        thisLoc.ready = '<span>Unavailable</span>';
      }

      if (thisLoc.available > 2) {
        thisLoc.availability = {
          class: 'in',
          text: 'In Stock'
        };
      } else if (thisLoc.available > 0) {
        thisLoc.availability = {
          class: 'low',
          text: 'Low Stock'
        };
      } else {
        thisLoc.availability = {
          class: 'out',
          text: 'Out of Stock'
        };
      }

      variantWeight = window.vars.selectedVariant.weight; // If a product weight is higher than 22kg, then the item not available for C&C at Genesis store

      if (thisLoc.name === 'Genesis' && variantWeight >= 22000) {
        thisLoc.availability = {
          class: 'out',
          text: 'Out of Stock'
        };
      }

      formattedOpenHour = militaryTo12hFormat(openHour);
      formattedCloseHour = militaryTo12hFormat(closeHour);
      thisLoc.is_same_hours_weekly = masterLoc.is_same_hours_weekly;

      if (thisLoc.is_same_hours_weekly === true) {
        thisLoc.hours = 'Open ' + formattedOpenHour + '-' + formattedCloseHour;
      } else {
        thisLoc.hours = nameDay + ' ' + formattedOpenHour + '-' + formattedCloseHour;
      }

      thisLoc.street1 = masterLoc.street1;
      thisLoc.city = masterLoc.city;
      thisLoc.zip = masterLoc.zip;
      thisLoc.state = masterLoc.state;
      thisLoc.tooltip_hours = masterLoc.tooltip_hours;
      thisLoc.fullHours = masterLoc.fullHours;
      thisLoc.announcement = masterLoc.announcement;
    } else {
      var _thisLoc2;

      var _formattedOpenHour = militaryTo12hFormat(openHour);

      var _formattedCloseHour = militaryTo12hFormat(closeHour);

      if (masterLoc.is_same_hours_weekly === true) {
        thisLoc_hours = 'Open ' + _formattedOpenHour + '-' + _formattedCloseHour;
      } else {
        thisLoc_hours = nameDay + ' ' + _formattedOpenHour + '-' + _formattedCloseHour;
      }

      var _thisLoc = (_thisLoc2 = {
        name: masterLoc.name,
        title: masterLoc.title,
        ready: 'Unavailable',
        availability: {
          class: 'out',
          text: 'Out of Stock'
        },
        hours: thisLoc_hours,
        tooltip_hours: masterLoc.tooltip_hours,
        fullHours: masterLoc.fullHours,
        announcement: masterLoc.announcement,
        street1: masterLoc.street1,
        city: masterLoc.city,
        zip: masterLoc.zip,
        state: masterLoc.state
      }, _thisLoc2["tooltip_hours"] = masterLoc.tooltip_hours, _thisLoc2["fullHours"] = masterLoc.fullHours, _thisLoc2["announcement"] = masterLoc.announcement, _thisLoc2);

      inventoryItem.locations.push(_thisLoc);
    }
  };

  for (var i = window.masterStores.length - 1; i >= 0; i--) {
    var weekday;
    var openHour;
    var closeHour;
    var weekday;
    var weekday;
    var openHour;
    var closeHour;
    var days;
    var d;
    var day;
    var nameDay;
    var variantWeight;
    var formattedOpenHour;
    var formattedCloseHour;
    var thisLoc_hours;
    var thisLoc_hours;

    _loop(i);
  }

  inventoryItem.locations.sort(function (a, b) {
    return storesSort.indexOf(a.name) > storesSort.indexOf(b.name) ? 1 : storesSort.indexOf(b.name) > storesSort.indexOf(a.name) ? -1 : 0;
  });
  inventoryItem.locations = inventoryItem.locations.filter(function (loc) {
    return window.ccStores.indexOf(loc.name) !== -1;
  });
  inventoryItem.stateLocations = inventoryItem.locations.filter(function (loc) {
    return !(state && state.length) || state.indexOf(loc.state) !== -1;
  });

  if (window.vars.favStore) {
    inventoryItem.favStore = window.vars.favStore;
    inventoryItem.locations.sort(function (a, b) {
      return window.vars.favStore.name === b.name ? 1 : window.vars.favStore.name === a.name ? -1 : 0;
    });
  }

  return inventoryItem;
}
/**
 * Attach listeners to open collapse elements
 */


var initInventoryLocations = function initInventoryLocations() {
  document.addEventListener('tomitProductLoaded', function (e, data) {
    // alert('PRODUCT LOADED');
    window.inventories = window.tomitProductInventoryInfo.activeProduct.variants;

    for (var i = window.vars.productJSON.variants.length - 1; i >= 0; i--) {
      var v = window.vars.productJSON.variants[i];

      if (window.inventories[v.id]) ; else {
        window.inventories[v.id] = {
          id: v.id,
          sku: v.sku,
          title: v.title,
          inventoryItem: {
            id: "1",
            locations: []
          }
        };
      }
    }

    Object.values(window.inventories).forEach(function (variant) {
      var locs = variant.inventoryItem.locations;
      var onlineInventoryLocs = locs.filter(function (loc) {
        return window.onlineInventoryStores.indexOf(loc.name) !== -1;
      });
      var onlineInventoryItem;

      if (onlineInventoryLocs.length > 0) {
        var totalAvailable = onlineInventoryLocs.map(function (loc) {
          return loc.available;
        }).reduce(function (a, b) {
          return a + b;
        }, 0);
        onlineInventoryItem = {
          name: 'Delivery',
          available: totalAvailable,
          inStock: totalAvailable > 0 ? 1 : 0,
          hours: '2-6 day delivery in Metro areas',
          availability: {
            class: totalAvailable > 2 ? 'in' : totalAvailable > 0 ? 'low' : 'out',
            text: totalAvailable > 2 ? 'In Stock' : totalAvailable > 0 ? 'Low Stock' : 'Out of Stock'
          },
          ready: totalAvailable > 0 ? 'Available for delivery' : 'Unavailable for delivery'
        };
      } else {
        onlineInventoryItem = {
          name: 'Delivery',
          available: 0,
          inStock: 0,
          ready: 'Unavailable for delivery',
          availability: {
            class: 'out',
            text: 'Out of Stock'
          },
          hours: '2-6 day delivery in Metro areas'
        };
      }

      variant.inventoryItem.delivery = onlineInventoryItem;
    });

    for (var _i = window.vars.productJSON.variants.length - 1; _i >= 0; _i--) {
      var vId = window.vars.productJSON.variants[_i].id;
      var vInv = window.inventories[vId].inventoryItem;
      var onlineAvailability = vInv.delivery;
      window.vars.productJSON.variants[_i].cc = false;

      if (onlineAvailability.inStock) {
        window.vars.productJSON.variants[_i].cc = false;
      } else if (vInv.locations.length > 0) {
        window.vars.productJSON.variants[_i].cc = true;

        if (window.vars.selectedVariant && vId === window.vars.selectedVariant.id) {
          if (jQuery('#AddToCartText').text() === 'Add to Cart') {
            jQuery('#AddToCartText').text('Click & Collect');
          }
        }
      }
    }

    if (window.vars.selectedVariant === null) {
      window.inventoryLocationsDisplay.changeVariant(null);
      var currentModel = jQuery('.js-de-ModelCode-text').text(); //console.log('push the stock');

      pushStockInfoToDataLayer(currentModel);
    } else {
      window.inventoryLocationsDisplay.changeVariant(window.vars.selectedVariant.id);
      window.vueATC.changeVariant(window.vars.selectedVariant.id);
      var titleParts = window.vars.selectedVariant.title.split(' ');
      var currentModel = titleParts[titleParts.length - 1]; //console.log('push the stock');

      pushStockInfoToDataLayer(currentModel);
    }
  });
  window.inventoryLocationsDisplay = new Vue({
    el: '#locsContainer',
    data: JSON.parse(JSON.stringify(demoInventory)),
    methods: {
      changeWholeData: function changeWholeData(newData) {
        var _this = this;

        var extraData = {
          state: newData.state || this.$data.state,
          collapsed: newData.collapsed || this.$data.collapsed,
          code: newData.code || this.$data.code
        };
        newData = Object.assign({}, newData, extraData);
        Object.keys(this.$data).forEach(function (key) {
          return _this.$data[key] = null;
        });
        Object.entries(newData).forEach(function (entry) {
          return Vue.set(_this.$data, entry[0], entry[1]);
        });
      },
      changeVariant: function changeVariant(variant) {
        if (!window.inventories) {
          Vue.set(this.$data, 'id', 'error');
        } else if (variant === null) {
          this.changeWholeData(emptyData);
        } else {
          this.changeWholeData(addMasterStoresData(window.inventories[variant].inventoryItem, this.$data.state));
        }
      },
      evaluateState: function evaluateState() {
        var error = jQuery('#postcodeError');
        var message = jQuery('#deliveryLocationMessage');
        var code = jQuery('#deliveryLocation');
        var stateInput = jQuery('[name="state"]');
        var rawCode = stateInput.val();
        var fullCode = rawCode;
        console.log(state, rawCode);

        if (this.isAustralianState(rawCode)) {
          var state = [];
          var postcode = parseInt(rawCode);

          if (postcode >= 1000 && postcode <= 1999 || postcode >= 2000 && postcode <= 2599 || postcode >= 2619 && postcode <= 2899 || postcode >= 2921 && postcode <= 2999) {
            state.push('NSW');
            state.push('ACT');
            fullCode += ' (NSW/ACT)';
          } else if (postcode >= 200 && postcode <= 299 || postcode >= 2600 && postcode <= 2618 || postcode >= 2900 && postcode <= 2920) {
            state.push('NSW');
            state.push('ACT');
            fullCode += ' (NSW/ACT)';
          } else if (postcode >= 3000 && postcode <= 3999 || postcode >= 8000 && postcode <= 8999) {
            state.push('VIC');
            fullCode += ' (VIC)';
          } else if (postcode >= 4000 && postcode <= 4999 || postcode >= 9000 && postcode <= 9999) {
            state.push('QLD');
            fullCode += ' (QLD)';
          } else if (postcode >= 5000 && postcode <= 5999) {
            state.push('SA');
            fullCode += ' (SA)';
          } else if (postcode >= 6000 && postcode <= 6999) {
            state.push('WA');
            fullCode += ' (WA)';
          } else if (postcode >= 7000 && postcode <= 7799 || postcode >= 7800 && postcode <= 7999) {
            state.push('TAS');
            fullCode += ' (TAS)';
          } else if (postcode >= 800 && postcode <= 899 || postcode >= 900 && postcode <= 999) {
            state.push('NT');
            fullCode += ' (NT)';
          }

          if (state.length > 0) {
            code.text(fullCode);
            message.slideDown();
            error.slideUp();
            this.$data.state = state;
            this.$data.collapsed = false;
            localStorage.setItem('state_array', JSON.stringify(state));
            localStorage.setItem('state_code', JSON.stringify(rawCode));

            if (window.vars.selectedVariant === null) {
              this.changeVariant(null);
            } else {
              this.changeVariant(window.vars.selectedVariant.id);
            }
          } else {
            error.slideDown();
          }
        } else {
          error.slideDown();
        }
      },
      isAustralianState: function isAustralianState(postcode) {
        var regex = /^\d{4}$/g;
        return postcode.match(regex);
      },
      clearCode: function clearCode() {
        Vue.set(this.$data, 'code', null);
        Vue.set(this.$data, 'state', null);

        if (window.vars.selectedVariant === null) {
          this.changeVariant(null);
        } else {
          this.changeVariant(window.vars.selectedVariant.id);
        }
      }
    }
  });
  jQuery('[name="state"]').on('keypress', function (e) {
    if (e.which == 13) {
      e.preventDefault();
      jQuery('#checkState').click();
    }
  });
};
/**
 * Put all functions that need to run on product-page load here
 */


var init$7 = function init() {
  initInventoryLocations();
};

/* eslint-disable */
var validationTextEl$1 = document.querySelector('.js-de-validation-message');
var variantInventory = window.firstVariant;
variantInventory.tagged_bis_hidden = window.vars.productJSON.tags.includes('bis-hidden');
variantInventory.is_size_selected = false;
variantInventory.artificially_unavailable = false;
var translations = window.translations.product_stock;
var IN_STOCK_CLASS = 'in_stock';
var LOW_STOCK_CLASS = 'low_stock';
var addToCartDrawerEnabled = window.add_to_cart_drawer_enabled;

var initVueATC = function initVueATC() {
  window.vueATC = new Vue({
    el: '#addToCartButton',
    data: variantInventory,
    methods: {
      changeWholeData: function changeWholeData(newData) {
        var _this = this;

        var extraData = {
          tagged_bis_hidden: window.vars.productJSON.tags.includes('bis-hidden'),
          is_size_selected: newData && newData.option2 ? true : false
        };
        newData = Object.assign({}, newData, extraData);
        Object.keys(this.$data).forEach(function (key) {
          return _this.$data[key] = null;
        });
        Object.entries(newData).forEach(function (entry) {
          return Vue.set(_this.$data, entry[0], entry[1]);
        });
      },
      changeVariant: function changeVariant(variant) {
        var variantInventory = window.productJSON.variants.find(function (v) {
          return v.id === variant;
        }); // Use Shopify availability on load while remote inventory is being loaded

        if (variantInventory && variantInventory.available) {
          jQuery('.js-de-stock-info-message').text(translations.in_stock);
          jQuery('.js-de-stock-info-message').addClass(IN_STOCK_CLASS).removeClass(LOW_STOCK_CLASS).css({
            "display": "block"
          });
        }

        var variantLocationsInventory = (window.inventories || {})[variant];
        var calculatedInventory = variantLocationsInventory ? this.mutateWithLocations(variantInventory, variantLocationsInventory) : variantInventory;
        this.changeWholeData(calculatedInventory);
      },
      mutateWithLocations: function mutateWithLocations(variantInventory, variantLocationsInventory) {
        var mutatedInventory = variantInventory;
        var inventoryItem = variantLocationsInventory.inventoryItem;
        var delivery = inventoryItem.delivery,
            locations = inventoryItem.locations,
            online = inventoryItem.online;
        /*
          'locations' from itemInventory already only account for stores which have Click & Collect enabled in Settings
          This checks whether the specific product is available in any of those locations, or in delivery/online and sets availability accordingly.
        */
        // Filter locations that have at least one available product in stock

        var filteredLocations = locations.filter(function (loc) {
          return loc.available > 0;
        });
        var filteredOnline = online.filter(function (item) {
          return item.available > 0;
        }); // item is available if there is at least one stock in any location or delivery/online
        // mutatedInventory.available = (delivery.available > 0 || filteredLocations.length > 0 || filteredOnline.length > 0);

        mutatedInventory.available = filteredLocations.length > 0 || delivery.available > 0;
        mutatedInventory.artificially_unavailable = locations.length < 1 && delivery.available < 1;

        if (filteredLocations.length < 1 && delivery.available < 1) {
          jQuery('.js-de-validation-message').text('Out of stock');
        }

        var availablePerLocation = filteredLocations.map(function (location) {
          return location.available;
        });
        var locationsAvailable = 0;

        if (availablePerLocation.length > 0) {
          locationsAvailable = availablePerLocation.reduce(function (a, b) {
            return a + b;
          }, 0);
        }

        var stockInfoMessage = '';
        var stockAddClass = '';
        var stockRemoveClass = ''; // If variant is in stock for delivery in locations contributing to online inventory

        if (delivery.available > 2) {
          stockInfoMessage = translations.in_stock;
          stockAddClass = IN_STOCK_CLASS;
          stockRemoveClass = LOW_STOCK_CLASS;
        } else if (delivery.available <= 2 && delivery.available > 0) {
          stockInfoMessage = translations.low_stock;
          stockAddClass = LOW_STOCK_CLASS;
          stockRemoveClass = IN_STOCK_CLASS;
        } else {
          // If variant is NOT in stock for delivery but available in locations offering Click & Collect
          if (locationsAvailable > 0) {
            stockInfoMessage = translations.pickup_only;
            stockAddClass = LOW_STOCK_CLASS;
            stockRemoveClass = IN_STOCK_CLASS;
          }
        }

        jQuery('.js-de-stock-info-message').text(stockInfoMessage);
        jQuery('.js-de-stock-info-message').addClass(stockAddClass).removeClass(stockRemoveClass);

        if (jQuery('.js-de-stock-info-message').text().length > 0) {
          jQuery('.js-de-stock-info-message').css({
            "display": "block"
          });
        } else {
          jQuery('.js-de-stock-info-message').css({
            "display": "none"
          });
        }

        return mutatedInventory;
      },
      showModal: function showModal(variantId, isEmailButton, event) {
        jQuery('.js-de-Drawer-toggle').data("drawer-action", ''); // Trying to add a product to cart without selecting a size

        if (!this.$data.is_size_selected) {
          event.preventDefault();
          validationTextEl$1.textContent = "Select a size";
          jQuery('.js-de-stock-info-message').text('');
          return;
        } // Trying to add a product to cart when variant doesn't exist


        var variant = window.productJSON.variants.find(function (v) {
          return v.id === variantId;
        });

        if (!variant) {
          event.preventDefault();
          validationTextEl$1.textContent = "Unavailable";
          jQuery('.js-de-stock-info-message').text('');
          return;
        } // Opens Back in Stock Popover Modal


        if (isEmailButton) {
          event.preventDefault();
          window.BISPopover.show({
            variantId: variantId
          });
          jQuery('#addToCartButton .js-de-Drawer-toggle').attr("data-drawer-action", '');
          var BISPopoverEl = document.querySelector('#BIS_frame');
          var BISPopoverEmailInputEl = BISPopoverEl.contentDocument.querySelector('#email_address');
          var customer = window.Shopify.customer;

          if (BISPopoverEmailInputEl && customer) {
            BISPopoverEmailInputEl.value = customer.email;
          }

          return;
        } else {
          if (addToCartDrawerEnabled) {
            jQuery('#addToCartButton .js-de-Drawer-toggle').attr("data-drawer-action", 'open');
          }
        }
      }
    }
  });
};
/**
 * Put all functions that need to run on product-page load here
 */


var init$8 = function init() {
  initVueATC();
};

// @ts-check
/**
 * Reviews-specific values
 */

var CUSTOMER_REVIEW = 'CustomerReview';
/**
 * The CSS class on the button used to get more reviews
 */

var MORE_REVIEWS_BUTTON_CLASS = JS_PREFIX + "moreReviewsButton";
/**
 * The CSS class on the button used to get more reviews
 */

var MORE_REVIEWS_BUTTON_TEXT_CLASS = MORE_REVIEWS_BUTTON_CLASS + "-text";
/**
 * The CSS class on the button used to get more reviews
 */

var MORE_REVIEWS_BUTTON_LOADING_TEXT_CLASS = MORE_REVIEWS_BUTTON_CLASS + "-loadingText";
/**
 * The CSS class on the button used to get more reviews
 */

var REVIEWS_LOADING_CLASS = JS_PREFIX + "LoadingReviews";
/**
 * Timeout for delaying showing loading state after calls to the revies API
 */

var REVIEWS_LOADING_TIMEOUT = 200;
/**
 * The CSS class on a review block
 */

var REVIEW_CLASS = "" + JS_PREFIX + CUSTOMER_REVIEW;
/**
 * The CSS class on the reviews container block
 */

var REVIEWS_CONTAINER_CLASS = "" + JS_PREFIX + CUSTOMER_REVIEW + "s";
/**
 * The CSS class on a preloaded review block
 */

var REVIEW_PRELOADED_CLASS = "" + JS_PREFIX + CUSTOMER_REVIEW + "-preloaded";
/**
 * The CSS class on the reviews sort select
 */

var REVIEW_SORT_SELECT = "" + JS_PREFIX + CUSTOMER_REVIEW + "-sort";
/**
 * The CSS class on reviews rating elements (assigned a star-rating value)
 */

var REVIEW_FILTER = "" + JS_PREFIX + CUSTOMER_REVIEW + "-filter";
/** The CSS class on the element that displays the current filter if it exists */

var REVIEW_FILTER_STATUS = "" + JS_PREFIX + CUSTOMER_REVIEW + "-filterStatus";
/** The CSS class on the element within the filter status that shows the number of stars */

var REVIEW_FILTER_STAR_VALUE = "" + JS_PREFIX + CUSTOMER_REVIEW + "-filterStarValue";
/** The CSS class on the clear filter button */

var REVIEW_CLEAR_FILTER = "" + JS_PREFIX + CUSTOMER_REVIEW + "-clearFilter";
/** The CSS class on the review summary text (N out of 5 stars). This gets used as a clear button as well */

var REVIEW_SUMMARY_CLEAR_FILTER = JS_PREFIX + "ReviewSummary-starsSummary";
/**
 * The CSS ID on a reviews container block
 */

var REVIEWS_CONTAINER_SELECTOR = "" + CSS_PREFIX + CUSTOMER_REVIEW + "s";
/* ----- */

/**
 * Multiplier for converting ratings stars (1-5) to a percentage
 */

var STAR_RATING_PERCENTAGE_MULTIPLIER = 20;
/**
 * Base URL for querying the Decathlon Reviews API
 */

var REVIEWS_BASE_URL = 'https://reviews.decathlon.com/api/en_US/review/list';
/**
 * Base query parameters for the Decathlon Reviews API
 */

var REVIEWS_BASE_QUERY_PARAMS = {
  site: 1132,
  type: 1,
  // Origin is not a real parameter for the API.
  // We are using it to force the API to use a separate cache for separate domains.
  // Otherwise it will return the cached access-control-allow-origin header when you switch domains
  origin: location.origin
};
/**
 * Constants used for Handlebars partials
 */

var VERIFIED_PURCHASE_ICON_TEMPLATE_ID = 'verified_purchase_icon';
var VOTING_ICON_TEMPLATE_ID = 'helpful_icon';
var LOGO_WITHOUT_BACKGROUND_TEMPLATE_ID = 'logo_no_bg';
/**
 * Element dataset variables
 */

/**
 * Star rating value from rows in the review matrix, for filtering
 */

var STAR_RATING = 'starRating';

/**
 * The model code and, total pre-rendered reviews value, and reviews-per-page value
 * are retrieved from a data attribute in the UI.
 * Model code is necessary for calling the Reviews API
 */

var jsReviewsEl = document.querySelector("." + REVIEWS_CONTAINER_CLASS) || {
  dataset: {}
};
var totalPrerenderedReviews = jsReviewsEl.dataset.totalPrerenderedReviews;
var modelCode = jsReviewsEl.dataset.modelCode;
var reviewsPerPage = jsReviewsEl.dataset.reviewsPerPage;
/**
 * Confirm that the total number of pre-rendered reviews is (a number greater than 0 and) evenly divisible by
 * the reviews-per-page number (also a number, greater than 0)
 * If this value is false, it will stop attempts to do paginated API requests (see below)
 */

var validReviewNumbers = !isNaN(parseInt(totalPrerenderedReviews, 10)) && !isNaN(parseInt(reviewsPerPage, 10)) && totalPrerenderedReviews > 0 && reviewsPerPage > 0 && totalPrerenderedReviews % reviewsPerPage === 0;

/**
 * Queries to get different sets of reviews
 */
/**
 * Get the NodeList of server-rendered reviews (this will remain static,
 * so no need for a function)
 */

var prerenderedReviewList = document.querySelectorAll("." + REVIEW_PRELOADED_CLASS);
/**
 * Get all reviews, loaded from the API or pre-rendered
 * @returns A NodeList of all reviews
 */

var getAllReviews = function getAllReviews() {
  return document.querySelectorAll("." + REVIEW_CLASS);
};
/**
 * Get all reviews that have been loaded from the API (i.e., were not pre-rendered on page load)
 * @returns A NodeList of all non-preloaded reviews
 */

var getLoadedReviews = function getLoadedReviews() {
  return document.querySelectorAll("." + REVIEW_CLASS + ":not(." + REVIEW_PRELOADED_CLASS + ")");
};
/**
 * Get the sort select
 */

/** @type HTMLSelectElement */

var reviewsSortSelect = document.querySelector("." + REVIEW_SORT_SELECT);

// @ts-check
var originalReviewsSortFilterState = {
  // The default sort, to be used on page load
  sort: 'createdAt',
  page: 1,
  // The default sort direction, to be used on page load
  direction: 'desc',
  // The ratings filter, which is none on page load
  notes: ''
};
/**
 * This will be used for holding state to control load/sort/filter interactions
 * @type {ReviewsState}
 */

var originalReviewsState = Object.assign({}, originalReviewsSortFilterState, {
  reviewsPerPage: reviewsPerPage,
  // The number of pre-rendered reviews will be set when the main script runs
  prerenderedReviews: 0,
  loading: false,
  isMoreReviewRequest: false
});

var _createState = createState(originalReviewsState),
    setReviewsState = _createState.updateState,
    getReviewsState = _createState.getState,
    onReviewsStateChange = _createState.onChange;
var setPrerenderedReviewsOnState = function setPrerenderedReviewsOnState() {
  setReviewsState({
    prerenderedReviews: prerenderedReviewList.length
  });
};
/**
 * Checks whether the `sort`, `direction`, and `notes` values
 * have been set back to the original (default) state
 * The default state is
 * 1. 'sort':'createdAt'
 * 2. 'direction':'desc'
 * 3. 'notes': '' (means this param to filter by rating, if passed, is ignored; same as not being set)
 * When this evaluates to true, the page will behave as it did on first load,
 * incrementally showing pre-rendered reviews until it needs to call to the API for more.
 * @returns {boolean}
 */

var getIsDefaultQuery = function getIsDefaultQuery() {
  var _getReviewsState = getReviewsState(),
      sort = _getReviewsState.sort,
      direction = _getReviewsState.direction,
      notes = _getReviewsState.notes;

  return originalReviewsState.sort === sort && originalReviewsState.direction === direction && originalReviewsState.notes === notes;
};
/**
 * Set up a query for getting filtered reviews
 * Resets query pagination, sort, and direction, takes in a `notes` (aka, rating) value for the next query
 * @param {string} notes - A value to use to query for reviews with a particular rating
 */

var setReviewsStateForFilter = function setReviewsStateForFilter(notes) {
  setReviewsState(Object.assign({}, originalReviewsSortFilterState, {
    notes: notes
  }));
};
var clearFilter = function clearFilter() {
  // Reset both filter and sort, per client request
  setReviewsState(originalReviewsSortFilterState);
};
/**
 * Set up a query for getting sorted reviews
 * Resets query pagination and notes (aka, ratings filter)
 * and sets sort and direction variables for the next query
 * @param {Object} params
 * @param {string | undefined} params.sort - Sort to use for next API query
 * @param {string | undefined} params.direction - Direction to use for next
 * API query
 */

var setReviewsStateForSort = function setReviewsStateForSort(_ref) {
  var sort = _ref.sort,
      direction = _ref.direction;
  setReviewsState(Object.assign({}, originalReviewsSortFilterState, {
    sort: sort,
    direction: direction
  }));
};

/**
 * Helpers for querying and displaying ratings and reviews
 */
/**
 * Add a ratings percentage value to each review object
 * @param {Object[]} [reviews=[]] Array of reviews data objects
 * @returns {Object[]} Modified reviews array
 */

var addRatingsPercentage = function addRatingsPercentage(reviews) {
  if (reviews === void 0) {
    reviews = [];
  }

  return reviews.map(function (review) {
    if (review.note) {
      // Multiply the note (a.k.a., rating, scale 1-5) by the multiplier to get a percentage value
      review.rating_percentage = review.note * STAR_RATING_PERCENTAGE_MULTIPLIER;
    }

    return review;
  });
};

// @ts-check

/**
 * Attempt to create a Date object from an ISO-format timestamp.
 * If the raw timestamp does not return a Date object,
 * try to add a colon in the offset portion of the string and
 * pass again to the Date constructor.
 * Meant to handle issues parsing timestamps from Shopify on iOS
 * @see https://stackoverflow.com/questions/6427204/date-parsing-in-javascript-is-different-between-safari-and-chrome#49138448
 * (Note that none of the referenced solutions seemed to work as desired)
 * @param {string} timestamp - An ISO-format timestamp
 * @returns {Date|null} - A JavaScript Date object or null if the
 * Date could not be created
 */
var createDateObject = function createDateObject(timestamp) {
  var date = new Date(timestamp);

  if (isNaN(date.getMonth())) {
    /**
     * Original timestamps are in the format "2018-09-12T08:52:30+0200"
     * If parsing fails, modTimestamp is set to have timezone
     * offset digits separated by a colon, e.g. "2018-09-12T08:52:30+02:00"
     */
    var modTimestamp = timestamp.replace(/([+-]\d{2})(\d{2})$/, '$1:$2');
    date = new Date(modTimestamp);
  }

  return isNaN(date.getMonth()) ? null : date;
};

// @ts-check
/**
 * A wrapper to check the existence of Handlebars before running code that expects it (an unchecked external gloabal defined in Rollup)
 * @param {function} callback A function to call if Handlebars exists
 * @returns {function} A function that takes any params and executes the callback, or a noop if Handlebars isn't available
 * @example handlebarsCheck(myFunction)([parameters])
 */

var handlebarsCheck = function handlebarsCheck(callback) {
  return Handlebars ? function (params) {
    callback(params);
  } : function () {
    console.error('Cannot load new reviews. Missing templating engine.');
    return false;
  };
};
/**
 * Closure for containing caching variables around the exported function, templateNewReviews
 */

var _templateNewReviews = function _templateNewReviews() {
  /**
   * Create naive cache for reused elements and variables used in templating
   */
  var reviewsContainerEl = null;
  var reviewsTplEl = null;
  var reviewsTemplateFn = null;
  var reviewsTemplateSource = null;
  /**
   * Function that takes in review data and uses a Handlebars compiled template function to
   * render a new set of reviews and insert them into the reviews container element
   * @param {Object[]} [reviews=[]] Review data retrieved from the reviews API
   * @returns (*) rendered HTML
   */

  return function (reviews) {
    if (reviews === void 0) {
      reviews = [];
    }

    /**
     * Get Handlebars templates and containers, used cached values when set
     */
    reviewsTplEl = reviewsTplEl || document.getElementById("" + REVIEWS_CONTAINER_SELECTOR + TEMPLATE_SUFFIX);
    reviewsContainerEl = reviewsContainerEl || document.getElementById("" + REVIEWS_CONTAINER_SELECTOR + CONTAINER_SUFFIX);
    /**
     * Compile the reviews template for use after getting new review data
     */

    reviewsTemplateSource = reviewsTemplateSource || reviewsTplEl && reviewsTplEl.innerHTML;
    reviewsTemplateFn = reviewsTemplateFn || reviewsTemplateSource && Handlebars.compile(reviewsTemplateSource);
    /**
     * If the template function or container are missing, just return
     */

    if (!(typeof reviewsTemplateFn === 'function') || !(reviewsContainerEl && typeof reviewsContainerEl.insertAdjacentHTML === 'function')) {
      throw new Error('We do not have a Handlebars templating function or a viable container for rendering.');
    }

    var newReviewsHTML = reviewsTemplateFn({
      reviews: addRatingsPercentage(reviews)
    });

    if (newReviewsHTML) {
      return reviewsContainerEl.insertAdjacentHTML('beforeend', newReviewsHTML);
    }

    throw new Error('Templating new reviews failed');
  };
};
/**
 * Exports the closured function with caching
 */


var templateNewReviews = _templateNewReviews();
/**
 * An initialization function for registering Handlebars partials and helpers
 */

var _handlebarsInit = function _handlebarsInit() {
  /**
   * Get elements for registering partials
   */
  var verifiedPurchaseIconTplEl = document.getElementById(ICON_PREFIX + "verifiedPurchase" + TEMPLATE_SUFFIX);
  var helpfulIconTplEl = document.getElementById(ICON_PREFIX + "helpful" + TEMPLATE_SUFFIX);
  var logoNoBgEl = document.getElementById(ICON_PREFIX + "logoNoBg" + TEMPLATE_SUFFIX);
  /**
   * Register handlebars helpers
   */

  /**
   * Output the wrapped markup if any of the conditions are true.
   * @params {*} Values to be tested for truthiness or falsiness
   * Example usage:
   * {{#if_or cond1 cond2 cond3}}
   *  <p>At least one is true</p>
   * {{/if_or}}
   */

  Handlebars.registerHelper('if_or', function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var options = args[args.length - 1];
    var vals = args.slice(0, -1);
    var truthy = vals.some(function (val) {
      return Boolean(val);
    });

    if (truthy) {
      return options.fn(this);
    }

    return options.inverse(this);
  });
  /**
   * Output a date timestamp formatted as d/m/YYYY
   * If the date object is not created, output an empty string
   * @params {string} timestamp - Timestamp string
   * Example usage:
   * {{date_format some_date_timestamp}}
   */

  Handlebars.registerHelper('date_format', function (timestamp) {
    var date = createDateObject(timestamp);
    return date ? date.getMonth() + 1 + "/" + date.getDate() + "/" + date.getFullYear() : '';
  });
  /**
   * Register handlebars partials (SVG icon snippets) to inject into JS-templated reviews
   */

  if (verifiedPurchaseIconTplEl) {
    Handlebars.registerPartial(VERIFIED_PURCHASE_ICON_TEMPLATE_ID, verifiedPurchaseIconTplEl.innerHTML);
  }

  if (helpfulIconTplEl) {
    Handlebars.registerPartial(VOTING_ICON_TEMPLATE_ID, helpfulIconTplEl.innerHTML);
  }

  if (logoNoBgEl) {
    Handlebars.registerPartial(LOGO_WITHOUT_BACKGROUND_TEMPLATE_ID, logoNoBgEl.innerHTML);
  }
};

var handlebarsInit = handlebarsCheck(_handlebarsInit);

function encode(obj, pfx) {
  var k,
      i,
      tmp,
      str = '';

  for (k in obj) {
    if ((tmp = obj[k]) !== void 0) {
      if (Array.isArray(tmp)) {
        for (i = 0; i < tmp.length; i++) {
          str && (str += '&');
          str += encodeURIComponent(k) + '=' + encodeURIComponent(tmp[i]);
        }
      } else {
        str && (str += '&');
        str += encodeURIComponent(k) + '=' + encodeURIComponent(tmp);
      }
    }
  }

  return (pfx || '') + str;
}

function toValue(mix) {
  if (!mix) return '';
  var str = decodeURIComponent(mix);
  if (str === 'false') return false;
  if (str === 'true') return true;
  return +str * 0 === 0 ? +str : str;
}

function decode(str) {
  var tmp,
      k,
      out = {},
      arr = str.split('&');

  while (tmp = arr.shift()) {
    tmp = tmp.split('=');
    k = tmp.shift();

    if (out[k] !== void 0) {
      out[k] = [].concat(out[k], toValue(tmp.shift()));
    } else {
      out[k] = toValue(tmp.shift());
    }
  }

  return out;
}

// @ts-check
/**
 * Get product review data for a product by model code
 * @param {Object} params
 * @param {string} params.modelCode A "model code" provided from DEC reviews
 * metafields
 * @param {Object} [params.queryParams] Extra query parameters to be added to
 * the request (optional)
 * @returns {Promise<Object>} The review data
 * @throws Will throw if the model code cannot be obtained from the template
 */

var fetchProductReviewsData = function fetchProductReviewsData(_ref) {
  var modelCode = _ref.modelCode,
      queryParams = _ref.queryParams;
  var params = Object.assign({
    offer: modelCode
  }, REVIEWS_BASE_QUERY_PARAMS, queryParams);
  return fetch(REVIEWS_BASE_URL + "?" + encode(params)).then(function (res) {
    return res.json();
  });
};
/**
 * Wrapper for requesting product review data
 * @param {Object} queryParams Additional parameters needed for a particular
 * request (e.g. sort, direction)
 * @returns {Promise<Object>} Data from the request for reviews
 */


var fetchReviews = function fetchReviews(queryParams) {
  /**
   * Check for necessary model code value before calling the API - also cannot
   * be an empty string
   */

  if (typeof modelCode === 'string' && modelCode) {
    return fetchProductReviewsData({
      modelCode: modelCode,
      queryParams: queryParams
    });
  }

  return Promise.reject(new Error('Missing a Model Code. Cannot get new review data.'));
};

// @ts-check
/**
 * Hide an element with utility class (display: none)
 * @param {Element | null | undefined} el
 */

var hideElement = function hideElement(el) {
  if (el) el.classList.add(IS_HIDDEN_CLASS);
};
/**
 * Remove hiding utility class from an element
 * @param {Element | null | undefined} el
 */

var showElement = function showElement(el) {
  if (el) el.classList.remove(IS_HIDDEN_CLASS);
};

var moreReviewsEl;
var defaultButtonTextEl;
var loadingButtonTextEl;
var loadingReviewsEl;
/** @type {HTMLElement[]} */

var reviewFilterEls;
/** @type {HTMLElement} */

var reviewFilterStatusEl;
/** @type {HTMLElement} */

var reviewFilterStarValueEl;
var loadingTimeout = null;
var wasLoading = false;
/**
 * Hides all reviews that aren't currently hidden
 * @TODO - A11y analysis here
 */

var hideAllReviews = function hideAllReviews() {
  return getAllReviews().forEach(function (review) {
    return review.classList.add(IS_HIDDEN_CLASS);
  });
};
/**
 * Unhide a set number of reviews (based on the `reviewsPerPage` value obtained
 * from the template)
 * @param {Object} params
 * @param {Object[]} [params.reviews=[]] Array of review elements
 * @param {boolean} [params.reset] Whether to reset to hiding all reviews before
 * showing the initial set
 */


var showMoreReviews = function showMoreReviews(_temp) {
  var _ref = _temp === void 0 ? {
    reviews: [],
    reset: false
  } : _temp,
      reviews = _ref.reviews,
      reset = _ref.reset;

  var reviewsToUpdate;

  if (reset) {
    hideAllReviews();
    reviewsToUpdate = reviews;
  } else {
    reviewsToUpdate = reviews
    /**
     * Filter out only reviews that are hidden, of the set that was passed in
     */
    .filter(function (review) {
      return review.classList.contains(IS_HIDDEN_CLASS);
    });
  }
  /**
   * Unhide only reviews up to the reviewsPerPage value (minus 1, zero-indexed)
   */


  reviewsToUpdate.some(function (review, index) {
    review.classList.remove(IS_HIDDEN_CLASS);
    return index === reviewsPerPage - 1;
  });
};
/**
 * Fully remove all reviews that were dynamically loaded (i.e., not pre-loaded
 * with the page)
 */


var clearLoadedReviews = function clearLoadedReviews() {
  getLoadedReviews().forEach(function (review) {
    return review.parentNode.removeChild(review);
  });
};
/**
 * Removes all dynamically loaded reviews and then hides
 * all reviews
 * To be used before fetching new reviews from the API, with
 * updated query parameters (e.g., on changing sort type)
 */


var resetReviews = function resetReviews() {
  clearLoadedReviews();
  hideAllReviews();
};
/**
 * Cancel a trigger to set loading state
 */


var cancelLoadingState = function cancelLoadingState() {
  if (loadingTimeout) clearTimeout(loadingTimeout);
  loadingTimeout = null;
};
/**
 * Set loading state after a timeout
 */


var setLoadingState = function setLoadingState() {
  cancelLoadingState();
  loadingTimeout = setTimeout(function () {
    return setReviewsState({
      loading: true
    });
  }, REVIEWS_LOADING_TIMEOUT);
};
/**
 * Fetches reviews from the API and renders the data to the page using a
 * Handlebars templating function
 * @param {boolean} [isMoreReviewRequest] - Is a request for additional reviews
 * (rather than a new sort or filter request)
 */


var loadNewReviews = function loadNewReviews(isMoreReviewRequest) {
  /**
   * Trigger a loading state, with timeout
   */
  setLoadingState();
  /**
   * Set state to reflect whether this is a request for additional reviews, or
   * a sort or filter
   */

  setReviewsState({
    isMoreReviewRequest: Boolean(isMoreReviewRequest)
  });
  /**
   * Get the list of all reviews currently rendered (dynamically loaded and
   * server-rendered)
   */

  var renderedReviewList = getAllReviews();
  /**
   * Get values currently registered on the state object
   * `prerenderedReviews`, `sort`, `direction`, and `notes`
   * won't be redefined before making a request
   * `page` may be redefined, so assign as a `let`
   */

  var currentState = getReviewsState();
  var prerenderedReviews = currentState.prerenderedReviews,
      sort = currentState.sort,
      direction = currentState.direction,
      notes = currentState.notes;
  var page = currentState.page;
  /**
   * If there are server-rendered reviews on the page, and not yet any
   * dynamically loaded reviews, set the `reviewsState` object, page value for
   * the upcoming API call.
   * This number will be the total number of pre-rendered reviews divided
   * by the default paginated value (used in every API call), plus one
   * (the next page)
   */

  if (getIsDefaultQuery() && prerenderedReviews > 0 && renderedReviewList.length === prerenderedReviews) {
    /**
     * Set page to a new value,
     * then update the state's `page` value
     */
    page = prerenderedReviews / reviewsPerPage + 1;
    setReviewsState({
      page: page
    });
  }
  /**
   * Get more reviews from the API to display, setting the page value for the call
   * Set the query parameter (nb) for number of reviews to request from the API
   * to the value from the template
   */


  fetchReviews({
    page: page,
    sort: sort,
    direction: direction,
    notes: notes,
    nb: reviewsPerPage
  }).then(function (data) {
    if (!data || !Array.isArray(data.items)) {
      throw new Error('Review data not successfully retrieved from the API');
    }

    if (!isMoreReviewRequest) {
      resetReviews();
    }

    return templateNewReviews(data.items);
  })
  /**
   * After successfully updating the template, increment `reviewsState.page`
   * for the subsequent request
   */

  /**
   * Unset loading state, no matter what happens
   * `Promise.finally` may not be available, so unset in both `then` and `catch`
   */
  .then(function () {
    cancelLoadingState();
    setReviewsState({
      page: getReviewsState().page + 1,
      loading: false
    });
  }).catch(function (error) {
    console.error(error);
    cancelLoadingState();
    setReviewsState({
      loading: false
    });
  });
};
/**
 * Handle getting more reviews
 *
 * On page load, this begins by displaying more (hidden) server-rendered reviews,
 * then transitions to loading more from the API.
 * On sorted and filtered lists, will need to immediately go to the API.
 * @param {Event} event
 */

var moreReviewsRequestHandler = function moreReviewsRequestHandler(event) {
  event.preventDefault(); // Convert the prerenderedReviewList to an Array for running Array helpers on the NodeList

  var prerenderedReviewListArray = _toConsumableArray(prerenderedReviewList); // Get the number of visible, server-rendered reviews


  var visiblePrerenderedReviews = prerenderedReviewListArray.filter(function (review) {
    return !review.classList.contains(IS_HIDDEN_CLASS);
  }).length;
  /**
   * If sort/filter are set to defalt and there are server-rendered reviews on the page
   * and the total number exceeds what's visible, just show more
   * (Note: 0 is not GT 0 - if that's the case, there are no server-rendered reviews)
   */

  if (getReviewsState().prerenderedReviews > visiblePrerenderedReviews && getIsDefaultQuery()) {
    showMoreReviews({
      reviews: prerenderedReviewListArray
    });
  } else {
    /**
     * See `validReviewNumbers`. If the total number of pre-rendered reviews
     * (> 0) is not evenly divisible by the default number of reviews per page
     * to load, do not try to make paginated requests for more reviews, and
     * output an error to the console
     */
    if (!validReviewNumbers) {
      console.error("Total number of pre-rendered reviews and reviews-per-page are not in\n        sync. Cannot dynamically calculate paginated requests for more reviews.");
      return;
    }
    /**
     * Need to load and dynamically display reviews after calling the API
     * Passed to the `handlebarsCheck` helper to ensure errors aren't thrown.
     * In this case, inform `loadNewReviews` that this is a request for
     * more reviews, not a sort or filter event.
     */


    handlebarsCheck(loadNewReviews)(true);
  }
};
/**
 * Removes all dynamically loaded reviews
 * and then starts to show pre-loaded (pre-rendered) reviews,
 * as is the default on page load
 */


var resetDefaultReviewsDisplay = function resetDefaultReviewsDisplay() {
  clearLoadedReviews();
  showMoreReviews({
    reviews: _toConsumableArray(prerenderedReviewList),
    reset: true
  });
};
/**
 * Entry point for initializing 'Get more reviews' functionality
 */

var moreReviewsInit = function moreReviewsInit() {
  moreReviewsEl = document.querySelector("." + MORE_REVIEWS_BUTTON_CLASS);
  defaultButtonTextEl = document.querySelector("." + MORE_REVIEWS_BUTTON_TEXT_CLASS);
  loadingButtonTextEl = document.querySelector("." + MORE_REVIEWS_BUTTON_LOADING_TEXT_CLASS);
  loadingReviewsEl = document.querySelector("." + REVIEWS_LOADING_CLASS);
  moreReviewsEl && moreReviewsEl.addEventListener('click', moreReviewsRequestHandler); // @ts-ignore

  reviewFilterEls = _toConsumableArray(document.querySelectorAll("button." + REVIEW_FILTER));
  reviewFilterStatusEl = document.querySelector("." + REVIEW_FILTER_STATUS);
  reviewFilterStarValueEl = document.querySelector("." + REVIEW_FILTER_STAR_VALUE);
};
/**
 * Visually marks reviews that will be replaced by a new set of reviews after
 * data is returned from an API request
 */

var addUnloadingStyleToReviews = function addUnloadingStyleToReviews() {
  document.querySelectorAll("." + REVIEW_CLASS).forEach(function (review) {
    return review.classList.add(IS_TRANSITIONING_CLASS);
  });
};
/**
 * Visually unmarks reviews after data is returned from an API request
 */


var removeUnloadingStyleFromReviews = function removeUnloadingStyleFromReviews() {
  document.querySelectorAll("." + REVIEW_CLASS).forEach(function (review) {
    return review.classList.remove(IS_TRANSITIONING_CLASS);
  });
};
/**
 * Show various loading state updates in the UI, depending on the type of API
 * request being made.
 * @param {boolean} isMoreReviewRequest - Is a request for additional reviews
 * (rather than a new sort or filter request)
 */


var showLoadingState = function showLoadingState(isMoreReviewRequest) {
  wasLoading = true;
  moreReviewsEl && moreReviewsEl.setAttribute('disabled', '');
  showElement(loadingButtonTextEl);
  hideElement(defaultButtonTextEl);

  if (!isMoreReviewRequest) {
    showElement(loadingReviewsEl);
    addUnloadingStyleToReviews();
  }
};
/**
 * Remove loading state updates from the UI
 */


var removeLoadingState = function removeLoadingState() {
  wasLoading = false;
  moreReviewsEl && moreReviewsEl.removeAttribute('disabled');
  hideElement(loadingButtonTextEl);
  showElement(defaultButtonTextEl);
  hideElement(loadingReviewsEl);
  removeUnloadingStyleFromReviews();
};
/**
 * Render function for updating the UI during loading of new reviews
 * Triggers loading state only after a pre-defined, short timeout
 * @param {import('./state').ReviewsState} reviewsState
 */


var renderLoading = function renderLoading(_ref2) {
  var loading = _ref2.loading,
      isMoreReviewRequest = _ref2.isMoreReviewRequest;

  if (loading) {
    return showLoadingState(isMoreReviewRequest);
  }

  if (wasLoading) {
    removeLoadingState();
  }
};
/**
 * The UI-loading render function is passed to the state change function returned
 * from `create-state.js`
 */


onReviewsStateChange(renderLoading);
/**
 * @param {import('./state').ReviewsState} state
 */

var renderSortFilterUI = function renderSortFilterUI(_ref3) {
  var notes = _ref3.notes,
      sort = _ref3.sort,
      direction = _ref3.direction;

  // Switch the sort dropdown back to the original value if the state matches the original sort
  if (reviewsSortSelect && sort === originalReviewsSortFilterState.sort && direction === originalReviewsSortFilterState.direction) {
    reviewsSortSelect.selectedIndex = 0;
  }

  reviewFilterEls.forEach(function (el) {
    if (el.dataset[STAR_RATING] === notes) {
      el.classList.add(IS_ACTIVE_CLASS);
    } else {
      el.classList.remove(IS_ACTIVE_CLASS);
    }
  });

  if (notes) {
    reviewFilterStarValueEl.textContent = " " + notes + " star";
    showElement(reviewFilterStatusEl);
  } else {
    hideElement(reviewFilterStatusEl);
  }
};

onReviewsStateChange(renderSortFilterUI);
onReviewsStateChange(function () {
  /**
   * If the default sort is selected (compared with the page-load default state),
   * call to reset the default display, using pre-loaded reviews. Otherwise,
   * reset the UI and call to get new reviews using a different sort query.
   */
  if (getIsDefaultQuery()) {
    resetDefaultReviewsDisplay();
  } else {
    loadNewReviews();
  }
}, function (state) {
  return [state.sort, state.direction, state.notes];
});

// @ts-check
/**
 * Takes sorting parameters from data attributes on the sort select's options
 * and determines whether to reset the default reviews display (most recent first)
 * or to get more reviews with the appropriate `sort` and `direction` parameters
 * @param {Object} event
 */

var reviewsSortHandler = function reviewsSortHandler(event) {
  var options = event.target.options;
  var selectedIndex = event.target.selectedIndex;

  if (!options || isNaN(selectedIndex)) {
    return;
  }

  var selectedOption = options[selectedIndex];
  /**
   * Set the correct sort parameters on the state object
   * Also set the page back to the default, initial state
   */

  setReviewsStateForSort({
    sort: selectedOption && selectedOption.dataset.sortType,
    direction: selectedOption && selectedOption.dataset.sortDirection
  });
};
/**
 * Initialize the change listener for the reviews sorting select element
 */


var reviewsSortInit = function reviewsSortInit() {
  reviewsSortSelect && reviewsSortSelect.addEventListener('change', reviewsSortHandler);
};

/**
 * Very simple vanilla JS event delegator
 * @TODO - For some reason I can't figure out, removing listeners appears not
 * to be working
 * Leaving as-is for future debugging
 * In current use cases, we do not need to remove these event listeners, but
 * would be a nice-to-have for other use cases
 * @param {Object} params
 * @param {string} [params.base='document'] params.base - The base element to
 * delegate from
 * @param {string} params.selector - The selector to target
 * @param {string} params.type - The type of even to listen for or remove
 * @param {function} params.callback - The event listener callback to bind or
 * remove binding to
 * @param {string} params.listenerName - The name to use to register the
 * listener, which would otherwise be anonymous.
 * Allows removal of previously registered listeners
 * @param {Boolean} [params.remove=false] - Whether to remove this listener binding
 * @param {Boolean} [params.useCapture=false] - Whether to use only the capture
 * phase to register the listener
 */
var delegateEvent = function () {
  // Create a closure and an object to hold events to be registered and de-registered
  var events = {};
  return function (_ref) {
    var _ref$base = _ref.base,
        base = _ref$base === void 0 ? 'document' : _ref$base,
        selector = _ref.selector,
        type = _ref.type,
        callback = _ref.callback,
        listenerName = _ref.listenerName,
        _ref$remove = _ref.remove,
        remove = _ref$remove === void 0 ? false : _ref$remove,
        _ref$useCapture = _ref.useCapture,
        useCapture = _ref$useCapture === void 0 ? false : _ref$useCapture;

    if (!selector || !type || !callback || !listenerName) {
      console.error('Event delegator missing required params');
      return;
    }

    events[listenerName] = function (e) {
      for (var target = e.target; target && target !== this; target = target.parentNode) {
        if (target.matches(selector)) {
          callback.call(target, e);
          break;
        }
      }
    };

    if (remove) {
      window[base].removeEventListener(type, events[listenerName], useCapture);
      delete events[listenerName];
      return;
    }

    window[base].addEventListener(type, events[listenerName], useCapture);
  };
}();

// @ts-check
/**
 * Handler for clicks on rows in the Reviews Ratings Matrix
 * 1. Gets the rating from data on the element
 * 2. Sets state for the upcoming API query
 * 3. Resets any previous sort selection
 * 4. Clears out previously loaded reviews and hides the page-loaded reviews
 * 5. Makes a query to get new, filtered-by-rating reviews and update the UI
 * @TODO - Analyze for any accessibility improvements
 * @this HTMLDivElement
 */

var reviewFilterHandler = function reviewFilterHandler() {
  var rating = this.dataset && this.dataset[STAR_RATING];

  if (!rating) {
    return;
  }

  setReviewsStateForFilter(rating);
};
/**
 * Settings passed to event delegation module
 */


var filterEventDelegationSettings = {
  selector: "." + REVIEW_FILTER,
  type: 'click',
  callback: reviewFilterHandler,
  listenerName: 'reviewFilterListener'
};
var reviewsFilteringInit = function reviewsFilteringInit() {
  delegateEvent(filterEventDelegationSettings);
  var clearReviewFilterButtons = document.querySelectorAll("." + REVIEW_CLEAR_FILTER + ",." + REVIEW_SUMMARY_CLEAR_FILTER);
  clearReviewFilterButtons.forEach(function (btn) {
    return btn.addEventListener('click', clearFilter);
  });
};

/**
 * Ratings & Reviews
 * Works with server-rendered reviews on page load.
 * Uses a Reviews API to fetch ratings and reviews data,
 * renders or re-renders via Handlebars templates onto the page.
 */
/**
 * Put all functions that need to run on product-page load here
 * 1. Register Handlebars partials and helpers
 * 2. Initialize handling for displaying (and fetching) more reviews
 * 3. Initialize handling for sorting reviews
 * 4. Initialize handling of voting for reviews and answers
 */

var reviewsInit = function reviewsInit() {
  setPrerenderedReviewsOnState();
  handlebarsInit();
  moreReviewsInit();
  reviewsSortInit();
  reviewsFilteringInit();
};

// @ts-check
/*  @todo Move color & size swatches logic out of this module and into
    the `ColorSwatches` & `SizeSwatches` modules */

var colorSwatchesSelector = "." + JS_PREFIX + "ColorSwatches-option";
var sizeSwatchesSelector = "." + JS_PREFIX + "SizeSwatches-option";
/*  Checks product attributes for the "End of Life" tag and specifies whether the
    unavailable state is "sold out" or "out of stock." */

var getUnavailableCssClass = function getUnavailableCssClass() {
  if (isNonFollowedProduct()) {
    return IS_SOLD_OUT_CLASS;
  }

  return IS_OUT_OF_STOCK_CLASS;
}; // @todo Can this logic be handled in the ColorSwatches/SizeSwatches modules?


var updateOptions = function updateOptions(elements, opts) {
  elements.each(function () {
    var element = this;
    var value = element.value; // Removing and adding are done separately because the nonexistent class and unavailable class could be the same thing

    element.classList.remove(opts.nonexistentClass);
    element.classList.remove(opts.unavailableClass);

    if (!opts.existingOptions.includes(value)) {
      element.classList.add(opts.nonexistentClass);
    }

    if (!opts.availableOptions.includes(value)) {
      element.classList.add(opts.unavailableClass);
    }
  });
}; // @todo Consider moving this logic to `ColorSwatches` & `SizeSwatches` modules


var updateOptionStates = function updateOptionStates(_ref) {
  var size = _ref.size,
      color = _ref.color,
      variant = _ref.variant;
  var colorSwatches = jQuery(colorSwatchesSelector);
  var sizeSwatches = jQuery(sizeSwatchesSelector); // Update swatches with classes to display state in UI

  updateOptions(sizeSwatches, {
    existingOptions: getExistingSizesFromColor(color),
    nonexistentClass: IS_HIDDEN_CLASS,
    availableOptions: getAvailableSizesFromColor(color),
    unavailableClass: getUnavailableCssClass()
  });
  updateOptions(colorSwatches, {
    existingOptions: getExistingColorsFromSize( // If there is a variant selected, then grey out the variants that don't exist for the current size
    // if there is no variant selected (meaning either size is not selected, or the selected size doesn't exist for this color)
    // then we display them all as not-greyed-out
    variant && size),
    nonexistentClass: IS_OUT_OF_STOCK_CLASS,
    availableOptions: getAvailableColorsFromSize( // If there is a variant selected, then grey out the variants that aren't available for the current size
    // if there is no variant selected (meaning either size is not selected, or the selected size doesn't exist for this color)
    // then we display them all as not-greyed-out
    variant && size),
    unavailableClass: getUnavailableCssClass()
  });
};

// @ts-check
/**
 * Attach JS to the Shopify Timber theme <select> element
 * @todo Consider removing jQuery dependency
 */

var $MasterSelect = jQuery('#productSelect');
/**
 * We want to keep the master `<select>` input  and the URL up-do-date with the
 * selection size/color combination.
 *
 * @param {Variant} variant
 */

var onVariantSelect$2 = function onVariantSelect(variant) {
  // We can then update the master `<select>` input with the variant ID
  // @todo Consider removing jQuery dependency
  $MasterSelect.val(variant.id);
};

var CURRENT_PRICE_CSS_CLASS = JS_PREFIX + "CurrentPrice";
var CROSSED_OUT_PRICE_CSS_CLASS = JS_PREFIX + "CrossedOutPrice";
var PRICE_LABEL_CSS_CLASS = JS_PREFIX + "PriceLabel";
var PRICE_AMOUNT_LABEL_CSS_CLASS = JS_PREFIX + "PriceAmount";
var AFTERPAY_PRICE_CSS_CLASS = JS_PREFIX + "AfterpayPrice";
var RRP_PRICE_CSS_CLASS = JS_PREFIX + "RRPPrice"; // Multiple price elements exist in the DOM because there
// are different ones for smaller vs larger viewports, use `querySelectorAll`

/** @type {NodeListOf<HTMLElement>} */

var currentPriceEls = document.querySelectorAll("." + CURRENT_PRICE_CSS_CLASS);
/** @type {NodeListOf<HTMLElement>} */

var crossedOutPriceEls = document.querySelectorAll("." + CROSSED_OUT_PRICE_CSS_CLASS);
/** @type {NodeListOf<HTMLElement>} */

var afterpayPriceEls = document.querySelectorAll("." + AFTERPAY_PRICE_CSS_CLASS);
var rrpPriceEls = document.querySelectorAll("." + RRP_PRICE_CSS_CLASS);
/**
 * Formats default Shopify price value, which is in cents,
 * to display format: $X.XX
 *
 * @param {number} price The price to format for display
 * @returns {string} A formatted price string (or blank string)
 */

var formatPrice = function formatPrice(price) {
  if (price) {
    // @TODO Use 'utilities/price-format' utility functions
    return "$" + (price / 100).toFixed(2);
  }

  return '';
};
/**
 * Generates a formatted price, ranged if needed
 *
 * @param {Object} obj
 * @param {number} obj.minPrice
 * @param {number} obj.maxPrice
 * @returns {string} A formatted price to display
 */


var formatPriceRange = function formatPriceRange(_ref) {
  var minPrice = _ref.minPrice,
      maxPrice = _ref.maxPrice;
  return minPrice === maxPrice ? // Show a single `price` when there is no range
  formatPrice(maxPrice) : // Show variants' `price` range
  formatPrice(minPrice) + " \u2013 " + formatPrice(maxPrice);
};
/**
 * Gets all prices for a given variant color
 *
 * @todo Consider using transducers if variants quantity is larger
 * @see: https://medium.com/javascript-scene/transducers-efficient-data-processing-pipelines-in-javascript-7985330fe73d
 *
 * @param {string} color A variant color
 * @returns {Array} An array of prices
 */


var getPricesByVariantColor = function getPricesByVariantColor(color) {
  return variantsJSON.filter(function (variant) {
    return getVariantOptions(variant).color === color;
  }).map(function (variant) {
    return variant.price;
  });
};
/**
 * Gets all `compare_at_price` values for a given variant color
 *
 * @todo Consider using transducers if variants quantity is larger
 * @see: https://medium.com/javascript-scene/transducers-efficient-data-processing-pipelines-in-javascript-7985330fe73d
 *
 * @param {string} color A variant color
 * @returns {Array} An array of `compare_at_price` values
 */


var getCompareAtPricesByColor = function getCompareAtPricesByColor(color) {
  return variantsJSON.filter(function (variant) {
    return getVariantOptions(variant).color === color;
  }).map(function (variant) {
    return variant.compare_at_price;
  });
};
/**
 * Helper to know if an HTML element is a crossed-out price element
 *
 * @param {HTMLElement} el
 * @returns {Boolean}
 */


var isCrossedOutPriceEl = function isCrossedOutPriceEl(el) {
  return el.classList.contains(CROSSED_OUT_PRICE_CSS_CLASS);
};
/**
 * Helper that renders the price for a given set of HTML elements
 *
 * @param {Object} params
 * @param {NodeListOf<HTMLElement>} params.priceEls The price elements list
 * @param {string} [params.displayPrice=''] The price to render
 * @param {Boolean} [params.compareAtPrice=false] Should display as sale price?
 */


var render$3 = function render(_ref2) {
  var priceEls = _ref2.priceEls,
      _ref2$displayPrice = _ref2.displayPrice,
      displayPrice = _ref2$displayPrice === void 0 ? '' : _ref2$displayPrice,
      _ref2$compareAtPrice = _ref2.compareAtPrice,
      compareAtPrice = _ref2$compareAtPrice === void 0 ? false : _ref2$compareAtPrice,
      _ref2$afterpayPrice = _ref2.afterpayPrice,
      afterpayPrice = _ref2$afterpayPrice === void 0 ? false : _ref2$afterpayPrice;
  priceEls.forEach(function (priceEl) {
    /** @type {HTMLElement | null} */
    var labelEl = priceEl.querySelector("." + PRICE_LABEL_CSS_CLASS);
    /** @type {HTMLElement | null} */

    var amountEl = priceEl.querySelector("." + PRICE_AMOUNT_LABEL_CSS_CLASS); // Handle the "compare" (crossed-out) logic to show/hide

    if (isCrossedOutPriceEl(priceEl)) {
      if (compareAtPrice) {
        // Allow the crossed-out "original" price element to be visible
        showElement(priceEl);
      } else {
        // Hide the crossed-out "original" price element, not needed
        hideElement(priceEl);
      }
    } // Handle the current price label logic


    if (labelEl) {
      labelEl.textContent = compareAtPrice ? priceEl.dataset.salePriceLabel : priceEl.dataset.regularPriceLabel;
    } // Regardless of if current price or crossed-out price, update the display price


    if (amountEl) {
      amountEl.textContent = displayPrice;
    }
  });

  if (afterpayPrice) {
    afterpayPriceEls.forEach(function (afterpayPriceEl) {
      afterpayPriceEl.textContent = afterpayPrice;
    });
  }
};
/**
 * Handles updating the display prices when a variant is selected
 *
 * @param {Variant} variant
 */


var handleVariantSelection = function handleVariantSelection(_ref3) {
  var price = _ref3.price,
      compareAtPrice = _ref3.compare_at_price;
  render$3({
    priceEls: currentPriceEls,
    displayPrice: formatPrice(price),
    compareAtPrice: compareAtPrice !== null,
    afterpayPrice: formatPrice(price / 4) + " AU"
  });
  render$3({
    priceEls: crossedOutPriceEls,
    displayPrice: formatPrice(compareAtPrice),
    compareAtPrice: compareAtPrice !== null
  });
};
/**
 * Handles updating the display prices when a color is selected
 *
 * @see https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#price
 * @param {string} color
 */


var handleColorSelection = function handleColorSelection(color) {
  var prices = getPricesByVariantColor(color);
  var minPrice = Math.min.apply(Math, _toConsumableArray(prices));
  var maxPrice = Math.max.apply(Math, _toConsumableArray(prices)); // Checks if at least one `compare_at_price` for all variants for the given `color` has
  // a value. If so, assume a "sale" price display by setting `compareAtPrice` to `true`.

  var isCompareAtPrice = getCompareAtPricesByColor(color).some(function (compareAtPrice) {
    return compareAtPrice !== null;
  });
  render$3({
    priceEls: currentPriceEls,
    displayPrice: formatPriceRange({
      minPrice: minPrice,
      maxPrice: maxPrice
    }),
    compareAtPrice: isCompareAtPrice
  }); // Don't pass in a display price, defaults to empty string

  render$3({
    priceEls: crossedOutPriceEls
  });
};
/**
 * Updates the price display with price and sale price if necessary
 *
 * @param {object} obj The state data object
 * @param {string | undefined} obj.color Currently selector color
 * @param {Variant | undefined} obj.variant Currently selected variant
 */


var onSwatchChange = function onSwatchChange(_ref4) {
  var color = _ref4.color,
      variant = _ref4.variant;

  if (!isProductPricingVaried()) {
    // Do nothing if product variant prices do not vary.
    // Whatever is rendered from the server is the correct price
    // regardless of color/size selection.
    return;
  } // A completed variant (color + size) selection takes priority


  if (variant) {
    handleVariantSelection(variant); // No need to continue

    return;
  }

  handleColorSelection(color);
};

// @ts-check
var modelCodeEls = document.querySelectorAll("." + JS_PREFIX + "ModelCode");
var modelCodeTextEls = document.querySelectorAll("." + JS_PREFIX + "ModelCode-text");
var onColorSelect$3 = function onColorSelect(color) {
  var modelCode = getModelCodeFromVariant(variantsJSON.find(function (variant) {
    return getVariantOptions(variant).color === color;
  }));

  if (modelCode) {
    // Update the model code in the UI
    modelCodeTextEls.forEach(function (modelCodeTextEl) {
      modelCodeTextEl.textContent = modelCode;
    });
    pushStockInfoToDataLayer(modelCode); // Then make sure any hidden model code wrappers are shown

    modelCodeEls.forEach(function (modelCodeEl) {
      modelCodeEl.classList.remove(IS_HIDDEN_CLASS);
    });
  } else {
    // No need to show model code wrappers if no model code exists
    modelCodeEls.forEach(function (modelCodeEl) {
      modelCodeEl.classList.add(IS_HIDDEN_CLASS);
    });
  }
};

// @ts-check

/**
 * Shopify error scenario 1:
 * "If the product is entirely sold out"
 *
 * Shopify error `description` value:
 * `The product #{item.name} is already sold out.`
 *
 * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#error-responses
 */
var ERROR_SCENARIO_1_REGEX = /^the\sproduct.*is\salready\ssold\sout\.$/i;
/**
 * Shopify error scenario 2:
 * "If the product is not sold out but the requested quantity exceeds
 * what is available, yet at least 1 item can still be added to the cart"
 *
 * Shopify error `description` value:
 * `You can only add #{item.remaining_inventory} #{item.name} to the cart.`
 *
 * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#error-responses
 */

var ERROR_SCENARIO_2_REGEX = /^you\scan\sonly\sadd.*to\sthe\scart\.$/i;
/**
 * Shopify error scenario 3:
 * "If the product is not sold out, but all of its stock is in the cart"
 *
 * Shopify error `description` value:
 * `All #{item.inventory_quantity} #{item.name} are in your cart.`
 *
 * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#error-responses
 */

var ERROR_SCENARIO_3_REGEX = /^all.*are\sin\syour\scart\.$/i;
/**
 * Determines if the `description` maps to Shopify error scenario 1
 *
 * @param {string} description A Shopify `description` value
 * @returns {boolean}
 */

var isErrorScenario1 = function isErrorScenario1(description) {
  return ERROR_SCENARIO_1_REGEX.test(description);
};
/**
 * Determines if the `description` maps to Shopify error scenario 2
 *
 * @param {string} description A Shopify `description` value
 * @returns {boolean}
 */

var isErrorScenario2 = function isErrorScenario2(description) {
  return ERROR_SCENARIO_2_REGEX.test(description);
};
/**
 * Determines if the `description` maps to Shopify error scenario 3
 *
 * @param {string} description A Shopify `description` value
 * @returns {boolean}
 */

var isErrorScenario3 = function isErrorScenario3(description) {
  return ERROR_SCENARIO_3_REGEX.test(description);
};

var DEFAULT_UI_STATE = {
  addToCartButtonText: PRODUCT_PAGE_COPY.ADD_TO_CART,
  validationText: '',
  isAddToCartButtonDisabled: false,
  isInAddToCartErrorState: false,
  shopifyErrorMessage: null
}; // Gets the first digit in the given `message`

var getQuantityFromMessage = function getQuantityFromMessage(message) {
  return message.split(/\s/g).find(function (word) {
    return /\d/g.test(word);
  }) || '';
}; // Returns the ATC AJAX error state based on the Shopify error `description` value

var getShopifyErrorUIState = function getShopifyErrorUIState(shopifyErrorMessage) {
  var defaultShopifyErrorUIState = Object.assign({}, DEFAULT_UI_STATE, {
    shopifyErrorMessage: shopifyErrorMessage,
    isInAddToCartErrorState: true
  }); // Handle "Inventory Case 1: Entirely Sold Out"
  // https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#inventory-cases

  if (isErrorScenario1(shopifyErrorMessage)) {
    if (isNonFollowedProduct()) {
      return Object.assign({}, defaultShopifyErrorUIState, {
        addToCartButtonText: PRODUCT_PAGE_COPY.SOLD_OUT,
        validationText: PRODUCT_PAGE_COPY.INVENTORY_RECENTLY_CHANGED,
        isAddToCartButtonDisabled: true
      });
    }

    return Object.assign({}, defaultShopifyErrorUIState, {
      addToCartButtonText: OUT_OF_STOCK_HANDLING === 'back_in_stock' ? PRODUCT_PAGE_COPY.EMAIL_ME_WHEN_IN_STOCK : PRODUCT_PAGE_COPY.OUT_OF_STOCK,
      validationText: PRODUCT_PAGE_COPY.OUT_OF_STOCK_RECENTLY_CHANGED
    });
  } // Handle "Inventory Case 2: Not sold out, can add at least 1 to cart"
  // https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#inventory-cases


  if (isErrorScenario2(shopifyErrorMessage)) {
    return Object.assign({}, defaultShopifyErrorUIState, {
      validationText: PRODUCT_PAGE_COPY.allInStockProductsInYourCart(getQuantityFromMessage(shopifyErrorMessage))
    });
  } //  Handle "Inventory Case 3: Not sold out, all stock already in cart"
  // https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#inventory-cases


  if (isErrorScenario3(shopifyErrorMessage)) {
    return Object.assign({}, defaultShopifyErrorUIState, {
      validationText: PRODUCT_PAGE_COPY.ALL_AVAILABLE_PRODUCTS_IN_CART
    });
  } // Handle "Inventory Case 4: Unknown Shopify error message - "Catch All" case"
  // https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#inventory-cases


  return Object.assign({}, defaultShopifyErrorUIState, {
    validationText: shopifyErrorMessage
  });
};
var getUIState = function getUIState(variant) {
  if (!variant) {
    if (variantsJSON.every(isVariantOutOfStock)) {
      //alert(window.vars.productJSON.tags.includes('clearance'));
      return Object.assign({}, DEFAULT_UI_STATE, {
        addToCartButtonText: OUT_OF_STOCK_HANDLING === 'clearance' ? PRODUCT_PAGE_COPY.EMAIL_ME_WHEN_IN_STOCK : PRODUCT_PAGE_COPY.OUT_OF_STOCK,
        validationText: PRODUCT_PAGE_COPY.ALL_SIZES_OUT_OF_STOCK,
        isAddToCartButtonDisabled: OUT_OF_STOCK_HANDLING !== 'clearance',
        bisHidden: OUT_OF_STOCK_HANDLING === 'clearance' ? true : false
      });
    }

    return DEFAULT_UI_STATE;
  }

  if (isVariantSoldOut(variant)) {
    return Object.assign({}, DEFAULT_UI_STATE, {
      addToCartButtonText: PRODUCT_PAGE_COPY.SOLD_OUT,
      validationText: PRODUCT_PAGE_COPY.NEW_MODEL_IN_DESIGN,
      isAddToCartButtonDisabled: true,
      bisHidden: false
    });
  }

  if (isVariantOutOfStock(variant)) {
    return Object.assign({}, DEFAULT_UI_STATE, {
      addToCartButtonText: OUT_OF_STOCK_HANDLING !== 'back_in_stock' ? PRODUCT_PAGE_COPY.OUT_OF_STOCK : window.vars.productJSON.tags.includes('clearance') ? PRODUCT_PAGE_COPY.EMAIL_ME_WHEN_IN_STOCK : PRODUCT_PAGE_COPY.OUT_OF_STOCK,
      validationText: PRODUCT_PAGE_COPY.OUT_OF_STOCK,
      isAddToCartButtonDisabled: !window.vars.productJSON.tags.includes('clearance'),
      bisHidden: OUT_OF_STOCK_HANDLING === 'back_in_stock' ? true : false
    });
  }

  if (isVariantCC(variant)) {
    return Object.assign({}, DEFAULT_UI_STATE, {
      addToCartButtonText: 'Click & Collect',
      isAddToCartButtonDisabled: false,
      bisHidden: false
    });
  }

  if (INVENTORY_TYPE !== 'multi_location') {
    if (!variantHasSufficientQuantity(variant)) {
      return Object.assign({}, DEFAULT_UI_STATE, {
        validationText: PRODUCT_PAGE_COPY.limitedQuantityLeft(variant.inventory_quantity)
      });
    }
  }

  return DEFAULT_UI_STATE;
};

// https://testing-decathlon-usa.myshopify.com/products/basketball-shoes-strong-500-low-inventory?
var MODULE_NAME = 'AddToCart';
var ADD_TO_CART_PREFIX = "." + JS_PREFIX + MODULE_NAME + "-";
var quantityInputEl = document.querySelector(ADD_TO_CART_PREFIX + "quantity");
var validationTextEl$2 = document.querySelector("." + VALIDATION_MESSAGE_CLASS);
var stockMessageTextEl$1 = document.querySelector('.js-de-stock-info-message');
var addToCartButtonEl = document.querySelector(ADD_TO_CART_PREFIX + "btn");
var addToCartButtonTextEl = document.querySelector(ADD_TO_CART_PREFIX + "btn-text");
var DEFAULT_MODULE_STATE = Object.assign({
  module: MODULE_NAME,
  currentVariant: null,
  isProgrammaticAddToCart: false,
  isLoading: false
}, DEFAULT_UI_STATE);
var state$3 = createState(DEFAULT_MODULE_STATE);
var variantModificationListeners = []; // Listens to change in variant quantities

var onVariantModification = function onVariantModification(cb) {
  return variantModificationListeners.push(cb);
};

var handleVariantModification = function handleVariantModification() {
  variantModificationListeners.forEach(function (listener) {
    return listener();
  });
};

var addToCartProgrammatically = function addToCartProgrammatically(quantity) {
  if (!quantityInputEl || !addToCartButtonEl) return;
  state$3.updateState({
    isProgrammaticAddToCart: true
  });
  quantityInputEl.value = String(quantity);
  /**
   * We are clicking the UI button instead of performing an AJAX request or
   * submitting the form directly because we want to make sure the
   * Persistent Cart logic comes into play.
   * We have to ensure the button is not disabled before clicking it
   * The button is disabled before making this change
   * because the component doesn't re-render until the next tick
   */

  addToCartButtonEl.disabled = false;
  addToCartButtonEl.click();
};

jQuery('body').on('addItemSuccess.ajaxCart', function () {
  state$3.updateState({
    isLoading: false
  });
});
jQuery('body').on('addItemError.ajaxCart', function (e, _ref) {
  var description = _ref.description;
  var currentVariant = state$3.getState().currentVariant;
  if (!description || !currentVariant) return; // Update the state with the proper error message/UI state

  state$3.updateState(Object.assign({}, DEFAULT_MODULE_STATE, getShopifyErrorUIState(description), {
    currentVariant: currentVariant,
    isLoading: false
  }));

  if (isErrorScenario1(description)) {
    // Entirely sold out
    currentVariant.available = false;
    currentVariant.inventory_quantity = 0;
    handleVariantModification();
  }

  if (isErrorScenario2(description)) {
    /*  Add available items for current variant to cart programmatically using
        the Shopify error message to provide the quantity */
    addToCartProgrammatically(getQuantityFromMessage(description));
  }
});

var onAddToCartClick = function onAddToCartClick(event) {
  var _state$getState = state$3.getState(),
      currentVariant = _state$getState.currentVariant,
      isProgrammaticAddToCart = _state$getState.isProgrammaticAddToCart;

  var requestQuantity = document.getElementById('Quantity');

  if (!requestQuantity.checkValidity()) {
    return;
  }

  if (!currentVariant) {
    event.preventDefault();
    handleAddToCartAttemptWithNoVariant();
    return;
  }

  if (isVariantOutOfStock(currentVariant) && window.BISPopover) {
    // Show modal, with current variant selected
    window.BISPopover.show({
      variantId: currentVariant.id
    }); // Set modal email input with customer's email

    var BISPopoverEl = document.querySelector('#BIS_frame');
    var BISPopoverEmailInputEl = BISPopoverEl.contentDocument.querySelector('#email_address');
    var customer = window.Shopify.customer;

    if (BISPopoverEmailInputEl && customer) {
      BISPopoverEmailInputEl.value = customer.email;
    }
  } else {
    setTimeout(function () {
      // Display loading state, but only after click event has propagated
      state$3.updateState({
        isLoading: true
      });
    });
  }
  /*  If the ATC action was completed programmatically, then reset only the
      `isProgrammaticAddToCart` flag and hold off resetting the UI state. This allows
      the AJAX custom error to stay visible.*/


  if (isProgrammaticAddToCart) {
    state$3.updateState({
      isProgrammaticAddToCart: false
    });
    return;
  } // Reset the state to the default for that variant
  // (clears out ajax shopify error state)


  state$3.updateState(getUIState(currentVariant));
};

var onVariantSelect$3 = function onVariantSelect(newVariant) {
  state$3.updateState(Object.assign({}, DEFAULT_MODULE_STATE, getUIState(newVariant), {
    currentVariant: newVariant
  }));
};

var render$4 = function render(_ref2) {
  var isAddToCartButtonDisabled = _ref2.isAddToCartButtonDisabled,
      validationText = _ref2.validationText,
      addToCartButtonText = _ref2.addToCartButtonText,
      bisHidden = _ref2.bisHidden,
      isLoading = _ref2.isLoading;

  /*  Give priority to the error messages. This ensures the UI gets updated
      regardless of the availability of `addToCartButtonEl` or `addToCartButtonTextEl` */
  if (validationTextEl$2) {
    validationTextEl$2.textContent = validationText;
  }

  if (stockMessageTextEl$1 && stockMessageTextEl$1.textContent && validationTextEl$2.textContent !== '') {
    stockMessageTextEl$1.textContent = '';
  } // if (bisHidden) {
  //   // alert("CLEARANCE SALE " + bisHidden);
  //   document.querySelector('.de-AddToCartActions .de-ProductQuantity').classList.remove('de-u-md-block');
  //   addToCartButtonEl.classList.add('bis-hidden');
  //   $('.js-de-AddToCart-btn').closest('.de-AddToCartActions').addClass('full-width-button');
  // }


  if (!addToCartButtonEl || !addToCartButtonTextEl) return;
  addToCartButtonEl.disabled = isAddToCartButtonDisabled || isLoading;
  var buttonText = isLoading ? 'Adding to cart' : addToCartButtonText;
  addToCartButtonTextEl.textContent = buttonText; // We are setting aria-label so that screen readers do not read the all-caps text as individual characters

  addToCartButtonTextEl.setAttribute('aria-label', buttonText);
};

state$3.onChange(render$4);
var init$9 = function init() {
  if (addToCartButtonEl) {
    addToCartButtonEl.addEventListener('click', onAddToCartClick);
  }
};

/**
 * Remove or add a role from an element
 * @param {Object} params
 * @param {HTMLElement} params.el - The element on which to add or remove an
 * attribute / attribute + value
 * @param {string} params.name - The name of the attribute to be changed, added,
 * or removed
 * @param {string} params.value - The value to add or remove from a particular
 * attribute
 * @param {boolean} params.remove - Whether to remove the value. If false,
 * the value or attribute will be added
 *
 * @todo Consider a refactor using the MDN `Element.toggleAttribute()` polyfill
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute#Polyfill
 */
var toggleAttributeValue = function toggleAttributeValue(_ref) {
  var el = _ref.el,
      name = _ref.name,
      value = _ref.value,
      remove = _ref.remove;

  if (!el || !el.getAttribute || !name || typeof remove !== 'boolean') {
    return;
  }

  var attrValues = el.getAttribute(name);
  /**
   * If there are no existing values for the given attribute set on the element,
   * just return. If the attribute is to be set, just set it directly and return.
   */

  if (!attrValues) {
    if (remove) {
      return;
    }

    el.setAttribute(name, value);
    return;
  }
  /**
   * Make an array of attribute values
   */


  attrValues = attrValues.split(' ');
  /**
   * If there are existing values, either filter out the value to be removed or
   * add the new one, if it isn't already in the list of values
   */

  if (remove) {
    attrValues = attrValues.filter(function (val) {
      return val !== value;
    });
  } else if (!attrValues.some(function (val) {
    return val === value;
  })) {
    attrValues.push(value);
  }
  /**
   * If there are no longer any values, remove the attribute
   */


  if (attrValues.length === 0) {
    el.removeAttribute(name);
    return;
  }
  /**
   * Convert values back to a string and set the attribute on the element
   */


  attrValues = attrValues.join(' ');
  el.setAttribute(name, attrValues);
};

/**
 * Focus Trap Module
 *
 * UI tab focus trap helper for a given parent dialog element.
 * Intended to be used with modal dialogs when open.
 *
 * @see https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal
 * @see https://bitsofco.de/accessible-modal-dialog/#5whileopenpreventtabbingtooutsidethedialog
 */
/**
 * Module constants
 */

var MODULE_NAME$1 = 'FocusTrap';
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
 * Using a lowercase version to test against, default values are uppercased.
 */

var TAB_KEY_VALUE = 'tab';
/**
 * Focusable element list borrowed from edenspiekermann/a11y-dialog project
 * @see https://github.com/edenspiekermann/a11y-dialog/blob/cf4ed8155bf8db0336ab556f2e4eafcaebc9e905/a11y-dialog.js#L6-L18
 */

var NOT_INERT_SELECTOR = ':not([inert])';
var NOT_NEGATIVE_TAB_INDEX_SELECTOR = ':not([tabindex^="-"])';
var NOT_DISABLED_SELECTOR = ':not([disabled])';
var FOCUSABLE_ELEMENT_SELECTORS = ["a[href]" + NOT_NEGATIVE_TAB_INDEX_SELECTOR + NOT_INERT_SELECTOR, "area[href]" + NOT_NEGATIVE_TAB_INDEX_SELECTOR + NOT_INERT_SELECTOR, "input" + NOT_DISABLED_SELECTOR + NOT_INERT_SELECTOR, "select" + NOT_DISABLED_SELECTOR + NOT_INERT_SELECTOR, "textarea" + NOT_DISABLED_SELECTOR + NOT_INERT_SELECTOR, "button" + NOT_DISABLED_SELECTOR + NOT_INERT_SELECTOR, "iframe" + NOT_NEGATIVE_TAB_INDEX_SELECTOR + NOT_INERT_SELECTOR, "audio" + NOT_NEGATIVE_TAB_INDEX_SELECTOR + NOT_INERT_SELECTOR, "video" + NOT_NEGATIVE_TAB_INDEX_SELECTOR + NOT_INERT_SELECTOR, "[contenteditable]" + NOT_NEGATIVE_TAB_INDEX_SELECTOR + NOT_INERT_SELECTOR, "[tabindex]" + NOT_NEGATIVE_TAB_INDEX_SELECTOR + NOT_INERT_SELECTOR];
/**
 * Module state defaults
 *
 * @param {Object} state
 * @param {string} state.moduleName The name of the current module,
 *        helpful for debugging
 * @param {Element} state.focusableEls The focusable elements within
 *        the active dialog
 * @param {Element} state.firstFocusableEl The first focusable element within
 *        the active dialog
 * @param {Element} state.lastFocusableEl The last focusable element within
 *        the active dialog
 */

var DEFAULT_MODULE_STATE$1 = {
  module: MODULE_NAME$1,
  focusableEls: null,
  firstFocusableEl: null,
  lastFocusableEl: null
};
/**
 * Stores the state helper
 */

var stateHelper;
/**
 * Helper for detecting the "Tab" keyboard key
 *
 * @param {string} key A keyboard event `key`
 * @returns {boolean}
 */

var isTabKey = function isTabKey(key) {
  return key.toLowerCase() === TAB_KEY_VALUE;
};
/**
 * Helper to retrieve the focusable elements for a given dialog
 *
 * @todo Refactor to work with non-ID values?
 *
 * @param {string} dialogId The ID of the given dialog
 * @return {NodeList} A NodeList of focusable elements for the given dialog
 */


var getFocusableElements = function getFocusableElements(dialogId) {
  return document.querySelectorAll(FOCUSABLE_ELEMENT_SELECTORS.map(function (selector) {
    return "#" + dialogId + " " + selector;
  }).join());
};
/**
 * Helper to find out if multiple focusable elements exist
 *
 * @param {Object} state A state object
 * @param {NodeList} state.focusableEls A NodeList of focusable elements
 */


var hasMultipleFocusableElements = function hasMultipleFocusableElements(_ref) {
  var focusableEls = _ref.focusableEls;
  return focusableEls.length > 1;
};
/**
 * Updates first/last focusable elements for given dialog
 *
 * Should be called when a new dialog is opened. This allows the FocusTrap
 * module to update the current first/last focusable elements.
 *
 * @param {string} dialogId The ID of the given dialog
 */


var updateFocusableEls = function updateFocusableEls(dialogId) {
  var focusableEls = getFocusableElements(dialogId);
  stateHelper.updateState({
    focusableEls: focusableEls,
    firstFocusableEl: focusableEls[0],
    lastFocusableEl: focusableEls[focusableEls.length - 1]
  });
};
/**
 * Traps the tab focus
 *
 * Uses own FocusTrap module state to know when the first/last focusable
 * element has been tabbed to and resets the focus accordingly.
 *
 * @param {Event} keyboardEvent A keyboard event
 */

var trapFocus = function trapFocus(keyboardEvent) {
  var key = keyboardEvent.key,
      shiftKey = keyboardEvent.shiftKey; // Scope the focus trap to the "Tab" key event

  if (isTabKey(key)) {
    var state = stateHelper.getState(); // No need to handle focus resets if there aren't enough focusable elements

    if (!hasMultipleFocusableElements(state)) {
      keyboardEvent.preventDefault();
      return;
    } // Handle forward (Tab) and backward (Shift + Tab) tabbing


    if (shiftKey) {
      if (document.activeElement === state.firstFocusableEl) {
        keyboardEvent.preventDefault();
        state.lastFocusableEl.focus();
      }
    } else if (document.activeElement === state.lastFocusableEl) {
      keyboardEvent.preventDefault();
      state.firstFocusableEl.focus();
    }
  }
};
/**
 * Initialize FocusTrap module
 */

var init$a = function init() {
  stateHelper = createState(DEFAULT_MODULE_STATE$1);
};

// @ts-check
/**
 * Query string module
 *
 * Provides helpers for interacting with URL paramaters
 */

/**
 * Parses variant id out of the URL
 */

var getUrlVariant = function getUrlVariant() {
  var urlParams = new URLSearchParams(window.location.search);
  /** @type {{variant?: string}} */

  return urlParams.get('variant');
};
/**
 * Updates the variant id in the URL when a new variant is selected
 *
 * @param {string | number | null | undefined} variantId The variant ID
 */

var updateUrlVariant = function updateUrlVariant(variantId) {
  /** @type any */
  var parsedQueryParams = decode( // Remove "?"
  window.location.search.substr(1));
  parsedQueryParams.variant = variantId === null ? undefined : variantId;
  var updatedUrl = "?" + encode(parsedQueryParams);
  updateUrl(updatedUrl);
};
/**
 * @param {string} newUrl
 */

var updateUrl = function updateUrl(newUrl) {
  window.realReplaceState({}, null, newUrl);
};
/**
 * @param {string} newHash
 */

var updateHash = function updateHash(newHash) {
  return (// If the new hash is '#' or '', remove it entirely
    updateUrl(newHash.replace(/#$/, '') === '' ? window.location.href.replace(window.location.hash, '') // URL without hash
    : newHash)
  );
};

/**
 * Drawer Module
 *
 * Controls the opening/closing of the drawer UI. For accessibility purposes,
 * the Drawer module is treated as a Dialog.
 * @see https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal
 */
/**
 * Module constants
 */

var MODULE_NAME$2 = 'Drawer';
var CLICK_EVENT$1 = 'click';
var KEY_DOWN_EVENT = 'keydown';
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
 * Using a lowercase version to test against, default values are uppercased.
 */

var ESCAPE_KEY_VALUE = 'escape';
var OPEN_ACTION = 'open';
var STATE_PREFIX = CSS_PREFIX + "is-";
var DRAWER_PREFIX = MODULE_NAME$2 + "-";
var TOGGLE_SELECTOR = "." + JS_PREFIX + DRAWER_PREFIX + "toggle";
var OVERLAY_SELECTOR = "." + JS_PREFIX + DRAWER_PREFIX + "overlay";
var MAIN_CONTENT_WRAP_SELECTOR = "." + JS_PREFIX + DRAWER_PREFIX + "wrap";
var DRAWER_IN_FLOW_CLASS = STATE_PREFIX + "inPageFlow";
var IS_OPEN_CLASS = STATE_PREFIX + "open";
var IS_OPENING_CLASS = STATE_PREFIX + "opening";
var IS_CLOSED_CLASS = STATE_PREFIX + "closed";
var IS_CLOSING_CLASS = STATE_PREFIX + "closing";
var IS_DRAWER_OPEN_CLASS = STATE_PREFIX + "drawerOpen";
var POST_ADD_TO_CART_DRAWER_ID = 'post-add-to-cart-drawer';
/**
 * TRANSITION_DURATION value must match (in milliseconds) the value in associated
 * CSS for transition duration ($transition-speed-normal)
 *
 * @see assets/product.scss.liquid
 */

var TRANSITION_DURATION = 200;
/**
 * Module state defaults
 *
 * @param {Object} state
 * @param {string} state.module The name of the module
 * @param {boolean} state.isOpen Keeps track of drawer "open" state
 + @param {Element} state.drawerEl The current drawer element to perform actions on
 * @param {Element} state.lastOpenToggleEl Toggle that last opened the drawer
 * @param {NodeList} state.wrapperEls Main content wrapper elements
 */

var DEFAULT_MODULE_STATE$2 = {
  module: MODULE_NAME$2,
  isOpen: false,
  drawerEl: null,
  lastOpenToggleEl: null,
  wrapperEls: null,
  htmlEl: null,
  windowScrollPosition: 0
};
/**
 * Reference to the `createState` helper. The `createState`
 * helper assists to create, update and get module state.
 * @see scripts/utilities/create-state.js
 */

var stateHelper$1;
/**
 * Helper to confirm if the given action is "open"
 *
 * Anything other than "open" will return `false`.
 *
 * @param {string} action The toggle action in question ("open"/"close")
 * @returns {boolean} Is the action set to "open"?
 */

var isActionOpen = function isActionOpen(action) {
  return action.trim().toLowerCase() === OPEN_ACTION;
};
/**
 * Helper for detecting the "Escape" keyboard key
 *
 * @param {string} key A keyboard event `key`
 * @returns {boolean}
 */


var isEscapeKey = function isEscapeKey(key) {
  return key.toLowerCase() === ESCAPE_KEY_VALUE;
};
/**
 * The keyboard event handler
 *
 * @param {KeyboardEvent} keyboardEvent
 */


var keyboardEventHandler = function keyboardEventHandler(keyboardEvent) {
  var key = keyboardEvent.key;
  /**
   * For better accessibility, the drawer should close via the "escape" key
   */

  if (isEscapeKey(key)) {
    // Update the module state to a "closed" state
    stateHelper$1.updateState({
      isOpen: false
    }); // Render the UI with the new state

    render$5(stateHelper$1.getState());
  } // Handles trapping the tab focus within the open dialog


  trapFocus(keyboardEvent);
};
/**
 * Updates the keyboard event listeners depending on the state
 *
 * @param {Object} state The state data object
 * @param {boolean} state.isOpen Whether the drawer is open or not
 */


var updateKeyboardListeners = function updateKeyboardListeners(_ref) {
  var isOpen = _ref.isOpen;

  if (isOpen) {
    document.addEventListener(KEY_DOWN_EVENT, keyboardEventHandler);
  } else {
    document.removeEventListener(KEY_DOWN_EVENT, keyboardEventHandler);
  }
};
/**
 * Toggle or update classes on the drawer when applied to content that also
 * appears in page flow when the drawer is closed
 *
 * @param {Object} params
 * @param {HTMLElement} params.drawerEl - The drawer component element
 * @param {boolean} params.isOpen - Whether the action being handled is to open the
 * drawer
 */


var inFlowDisplayStateChangeUpdates = function inFlowDisplayStateChangeUpdates(_ref2) {
  var drawerEl = _ref2.drawerEl,
      isOpen = _ref2.isOpen;
  drawerEl.classList.toggle(DRAWER_IN_FLOW_CLASS, !isOpen);
  toggleAttributeValue({
    el: drawerEl,
    name: 'role',
    value: 'dialog',
    remove: !isOpen
  });
};
/**
 * Get the window y-axis scroll position, storing to state
 */


var updateWindowScrollPosition = function updateWindowScrollPosition() {
  return stateHelper$1.updateState({
    windowScrollPosition: window.pageYOffset
  });
};
/**
 * Set the window y-axis scroll position from state
 *
 * Note the conditional use of `document.documentElement`, `document.body`, or `window.scrollTo`
 * `document.documentElement.scrollTop` is for IE
 * `document.body.scrollTop` is for Chrome, Safari, and Opera
 * `window.scrollTo` is for Firefox
 */


var setWindowScrollPosition = function setWindowScrollPosition() {
  var _stateHelper$getState = stateHelper$1.getState(),
      windowScrollPosition = _stateHelper$getState.windowScrollPosition;

  if (typeof window.scrollTo === 'function') {
    window.scrollTo(0, windowScrollPosition);
  } else {
    var scrollEl = document.documentElement || document.body;
    scrollEl.scrollTop = windowScrollPosition;
  }
};
/**
 * Toggle or otherwise update classes on the drawer and drawer content
 * @param {Object} params
 * @param {Element} params.drawerEl - The drawer component element
 * @param {boolean} params.isOpen - Whether the action being handled is to open the
 * drawer
 * @param {NodeList} params.wrapperEls A NodeList of main content wrapper elements
 */


var updateBaseDrawerClasses = function updateBaseDrawerClasses(_ref3) {
  var drawerEl = _ref3.drawerEl,
      isOpen = _ref3.isOpen,
      wrapperEls = _ref3.wrapperEls;

  /**
   * Toggle fixed positioning on the wrapper(s) of the drawer, to prevent
   * scrolling content outside the drawer
   */
  wrapperEls.forEach(function (wrap) {
    wrap.classList.toggle(FIXED_CLASS, isOpen);
  });
  /**
   * Add or remove an active class to the drawer
   */

  drawerEl.classList.toggle(IS_ACTIVE_CLASS, isOpen);
};
/**
 * Updates for accessibility on opening and closing the drawer
 * @param {Object} params
 * @param {Element} params.drawerEl - The drawer component element
 * @param {Element} params.lastOpenToggleEl The last toggle that opened the drawer
 * @param {boolean} params.isOpen - Whether the action being handled is to open the
 * drawer
 */


var updateAccessibilityState = function updateAccessibilityState(_ref4) {
  var drawerEl = _ref4.drawerEl,
      isOpen = _ref4.isOpen,
      lastOpenToggleEl = _ref4.lastOpenToggleEl;
  var closeToggle = document.querySelector("#" + drawerEl.id + " " + TOGGLE_SELECTOR);
  /**
   * For accessibility, set the focus on the close toggle for an open
   * drawer or the last-used drawer-open toggle if the drawer is closing
   */

  isOpen && closeToggle && closeToggle.focus();
  !isOpen && lastOpenToggleEl && lastOpenToggleEl.focus();
};
/**
 * Base updates needed on opening or closing the drawer, separate from those
 * needed for a drawer with content that also displays in page flow
 * @param {Object} state
 * @param {Element} state.drawerEl - The drawer component element
 * @param {boolean} state.isOpen - Whether the action being handled
 * is to open the drawer
 * @param {Element} state.lastOpenToggleEl The last toggle that opened the drawer
 * @param {NodeList} state.wrapperEls A NodeList of main content wrapper elements
 * drawer
 */


var baseStateChangeUpdates = function baseStateChangeUpdates(_ref5) {
  var drawerEl = _ref5.drawerEl,
      isOpen = _ref5.isOpen,
      lastOpenToggleEl = _ref5.lastOpenToggleEl,
      wrapperEls = _ref5.wrapperEls;
  updateBaseDrawerClasses({
    drawerEl: drawerEl,
    isOpen: isOpen,
    wrapperEls: wrapperEls
  });
  updateAccessibilityState({
    drawerEl: drawerEl,
    isOpen: isOpen,
    lastOpenToggleEl: lastOpenToggleEl
  });
};
/**
 * Timed updates of transition-related classes on the drawer
 *
 * IIFE wraps returned function and provides timeout placeholder variables
 * in closure
 *
 * @param {Object} state
 * @param {Element} state.drawerEl - The drawer component element
 * @param {Element} state.htmlEl - The HTML (root) element, which needs
 * to have a class set when the drawer is open to avoid double y-axis scrollbars
 * @param {boolean} state.isOpen - Whether the action being handled
 * is to open the drawer
 */


var setDrawerTransitionStates = function () {
  var openTimeout = null;
  var closeTimeout = null;
  var closeStateCssClasses = [IS_CLOSED_CLASS, IS_CLOSING_CLASS];
  var openStateCssClasses = [IS_OPEN_CLASS, IS_OPENING_CLASS];
  return function _setDrawerTransitionStates(_ref6) {
    var drawerEl = _ref6.drawerEl,
        htmlEl = _ref6.htmlEl,
        isOpen = _ref6.isOpen;

    if (isOpen) {
      var _drawerEl$classList;

      closeTimeout && clearTimeout(closeTimeout);

      (_drawerEl$classList = drawerEl.classList).remove.apply(_drawerEl$classList, closeStateCssClasses.concat([IS_OPEN_CLASS]));

      drawerEl.classList.add(IS_OPENING_CLASS);
      openTimeout = setTimeout(function () {
        var _drawerEl$classList2;

        (_drawerEl$classList2 = drawerEl.classList).remove.apply(_drawerEl$classList2, [IS_OPENING_CLASS].concat(closeStateCssClasses));

        drawerEl.classList.add(IS_OPEN_CLASS);
        /**
         * Avoid double vertical scroll bars when drawer is open
         * by removing overflow on the root element
         */

        htmlEl.classList.add(HIDE_OVERFLOW_Y_CLASS);
      }, TRANSITION_DURATION);
    } else {
      var _drawerEl$classList3;

      openTimeout && clearTimeout(openTimeout);

      (_drawerEl$classList3 = drawerEl.classList).remove.apply(_drawerEl$classList3, openStateCssClasses.concat([IS_CLOSED_CLASS]));

      drawerEl.classList.add(IS_CLOSING_CLASS);
      closeTimeout = setTimeout(function () {
        var _drawerEl$classList4;

        (_drawerEl$classList4 = drawerEl.classList).remove.apply(_drawerEl$classList4, [IS_CLOSING_CLASS].concat(openStateCssClasses));

        drawerEl.classList.add(IS_CLOSED_CLASS);
      }, TRANSITION_DURATION);
      /**
       * Modify the point at which `overflow-y: scroll` is added back to
       * the `html` (root) element, to avoid visible repositioning of page
       * elements when the page scrollbar reappears
       */

      setTimeout(function () {
        htmlEl.classList.remove(HIDE_OVERFLOW_Y_CLASS); // Sets the window scroll position, referenced from state

        setWindowScrollPosition();
      }, TRANSITION_DURATION / 4);
    }
  };
}();
/**
 * Set or unset a class on UI wrapper elements indicating the drawer is
 * in some state of transition
 * @see `assets/product-collapse.scss.liquid`
 * @param {Object} state - UI state
 * @param {NodeList} state.wrapperEls - Wrappers that should be aware of drawer state
 */


var setDrawerInTransitionOnWrapper = function setDrawerInTransitionOnWrapper(_ref7, inTransition) {
  var wrapperEls = _ref7.wrapperEls;

  if (inTransition === void 0) {
    inTransition = true;
  }

  var classListMethod = inTransition ? 'add' : 'remove';
  wrapperEls.forEach(function (el) {
    return el.classList[classListMethod](IS_DRAWER_OPEN_CLASS);
  });
};
/**
 * Helper to unset a class on UI wrapper elements indicating the drawer is
 * no longer in some state of transition
 * @param {Object} state
 */


var unsetDrawerInTransitionOnWrapper = function unsetDrawerInTransitionOnWrapper(state) {
  return setDrawerInTransitionOnWrapper(state, false);
};
/**
 * Handles UI updates for the drawer
 * Forks behavior and staggers timing for updates with drawers that display
 * content that is also shown in page flow
 *
 * IIFE wraps returned function and provides timeout placeholder variables
 * in closure
 *
 * @param {Object} state The new UI state
 */


var updateUI = function () {
  var baseStateChangeTimeout = null;
  var inFlowDisplayStateChangeTimeout = null;
  return function _updateUI(state) {
    var isOpen = state.isOpen,
        drawerEl = state.drawerEl;
    var displaysInPageFlow = drawerEl.dataset.displayInPageFlow;
    setDrawerTransitionStates(state);
    /**
     * If the drawer is opening ...
     */

    if (isOpen) {
      setDrawerInTransitionOnWrapper(state);
      inFlowDisplayStateChangeTimeout && clearTimeout(inFlowDisplayStateChangeTimeout);
      /**
       * ... and is set to show content that also appears in page flow ...
       */

      if (displaysInPageFlow) {
        /**
         * Toggle in-flow-display drawer classes, then use a timeout set to the
         * default transition duration to apply other class updates to the drawer
         * and its content
         */
        inFlowDisplayStateChangeUpdates(state);
        baseStateChangeTimeout = setTimeout(function () {
          baseStateChangeUpdates(state);
        }, TRANSITION_DURATION);
      } else {
        /**
         * ... Otherwise, just update the base set of drawer classes ...
         */
        baseStateChangeUpdates(state);
      }
      /**
       * ... or, if the drawer is closing ...
       */

    } else {
      baseStateChangeTimeout && clearTimeout(baseStateChangeTimeout);
      /**
       * ... update the base set of drawer classes ...
       */

      baseStateChangeUpdates(state);
      /**
       * ... and if the drawer is set to show content that also appears in page
       * flow, use a timeout set to the default transition duration to update
       * in-flow-display drawer classes
       */

      if (displaysInPageFlow) {
        inFlowDisplayStateChangeTimeout = setTimeout(function () {
          inFlowDisplayStateChangeUpdates(state);
          unsetDrawerInTransitionOnWrapper(state);
        }, TRANSITION_DURATION);
      } else {
        unsetDrawerInTransitionOnWrapper(state);
      }
    }
  };
}();
/**
 * Handle all UI and listener updates based on the provided state
 *
 * @param {Object} state The state to render against
 */


var render$5 = function render(state) {
  updateUI(state);
  updateKeyboardListeners(state);
};
/**
 * Handler for the toggle action
 *
 * @param {Object} event The event object
 */


var toggleHandler = function toggleHandler(event) {
  var _event$currentTarget$ =
  /** @type {DrawerToggleDataAttributes} */
  event.currentTarget.dataset,
      drawerAction = _event$currentTarget$.drawerAction,
      drawerId = _event$currentTarget$.drawerId,
      _event$currentTarget$2 = _event$currentTarget$.drawerPreventDefault,
      drawerPreventDefault = _event$currentTarget$2 === void 0 ? 'true' : _event$currentTarget$2;

  if (drawerPreventDefault.toLowerCase() === 'true') {
    event.preventDefault();
  }

  var drawerEl = document.getElementById(drawerId); // No need to run any further logic if we have no drawer to work with

  if (!drawerEl) {
    return;
  } // Only open Post Add to Cart drawer if a variant is selected


  if (drawerEl.id === POST_ADD_TO_CART_DRAWER_ID && !getUrlVariant()) {
    return;
  }

  var isOpen = isActionOpen(drawerAction);
  var newState = {
    isOpen: isOpen,
    drawerEl: drawerEl
  };

  if (isOpen) {
    newState.lastOpenToggleEl = event.currentTarget; // Let the FocusTrap module update the first/last focusable elements

    updateFocusableEls(drawerId); // Captures the window scroll position, saving it to state

    updateWindowScrollPosition();
  } // Update the module state


  stateHelper$1.updateState(newState); // Render all UI updates based on new state

  render$5(stateHelper$1.getState());
};
/**
 * Initialize Drawer toggles
 *
 * @param {Element} toggle Drawer toggle element to initialize
 */


var initToggle = function initToggle(toggle) {
  /**
   * `<a>` toggle elements are progressively-enhanced by JS and should
   * be treated as buttons when accessing the UI via screen readers.
   */
  if (toggle.tagName.toLowerCase() === 'a') {
    toggle.setAttribute('role', 'button');
  }
  /**
   * JS progressively-enhanced toggles have aria-labels added to them for
   * a better UX when accessed via screen readers.
   */


  var ariaLabel = toggle.dataset.drawerToggleAriaLabel;

  if (ariaLabel) {
    toggle.setAttribute('aria-label', ariaLabel); // This is cleanup, no longer needed once JS takes over.

    toggle.removeAttribute('data-drawer-toggle-aria-label');
  }

  toggle.addEventListener(CLICK_EVENT$1, toggleHandler);
};
/**
 * Initialize Drawer
 */


var init$b = function init() {
  stateHelper$1 = createState(Object.assign({}, DEFAULT_MODULE_STATE$2, {
    // Get all content wrapper elements
    wrapperEls: document.querySelectorAll(MAIN_CONTENT_WRAP_SELECTOR),
    htmlEl: document.querySelector('html')
  })); // Initialize toggles

  document.querySelectorAll(TOGGLE_SELECTOR + ", " + OVERLAY_SELECTOR).forEach(initToggle); // Initialize the FocusTrap module

  init$a();
};

/**
 * Throttles a function to only be called a certain interval. Does not pass
 * parameters to callback or preserve callback return value
 * @param {() => any} cb
 * @param {Number} interval
 * @returns {() => void}
 */

var throttle = function throttle(cb, interval) {
  var runThisTime = false;
  setInterval(function () {
    if (runThisTime) cb();
    runThisTime = false;
  }, interval);
  return function () {
    runThisTime = true;
  };
};
/**
 * Determine which section should be shown in the URL hash based on the scroll position
 * Loops through the headings to find the section that is visible at the cutoff of the top ~third of the screen
 * We _could_ use IntersectionObserver but it isn't supported in IE11 and this is way tinier than a polyfill.
 * Since it doesn't know where the sections end,
 * it finds the section that is _right before_ the heading that is highest up but still below the cutoff
 * @param {HTMLElement[]} targets
 */


var getMatchingTarget = function getMatchingTarget(targets) {
  var screenHeight = window.innerHeight;
  var isAtPageBottom = screenHeight + document.documentElement.scrollTop >= document.documentElement.scrollHeight; // If we have scrolled all the way to the bottom, it should auto-select the last item

  if (isAtPageBottom) return targets[targets.length - 1];
  /** The index in the targets array of the highest heading that is below the cutoff */

  var firstHeadingBelowCutoff = targets.findIndex(function (thisTarget) {
    // The bottom of the target is the top of the corresponding heading
    var headingTop = thisTarget.getBoundingClientRect().bottom; // 0.3 is the cutoff of where it is looking for the active section
    // It is the % of the distance down from the top of the screen where it is looking

    var isBelowCutoff = headingTop > 0.3 * screenHeight;
    return isBelowCutoff;
  }); // If all of the headings are above the cutoff, return the last heading

  if (firstHeadingBelowCutoff === -1) return targets[targets.length - 1]; // We want to select the target for the section that is right above the first heading below the cutoff
  // The section that is at the cutoff is the section right before the first section below the cutoff
  // if firstHeadingBelowCutoff is zero, this returns undefined because all of the sections are too low

  return targets[firstHeadingBelowCutoff - 1];
};
/**
 * Sets up active state of the active item in the sticky nav
 */


var init$c = function init() {
  var links = document.querySelectorAll('.de-js-StickyMenuItem');

  var targets = _toConsumableArray(links).map(function (link) {
    return document.getElementById(link.getAttribute('href').replace(/^#/, ''));
  });

  var lastHash = window.location.hash;
  /**
   * Sets the correct classes on all the sticky nav items
   */

  var updateLinksState = function updateLinksState() {
    links.forEach(function (link) {
      if (link.getAttribute('href') === window.location.hash) {
        link.classList.add(IS_ACTIVE_CLASS);
      } else {
        link.classList.remove(IS_ACTIVE_CLASS);
      }
    });
  };
  /**
   * Updates the URL hash and links if the user have scrolled to a different
   * section
   */


  var updateScrollState = function updateScrollState() {
    var matchingTarget = getMatchingTarget(targets);
    var newHash = "#" + (matchingTarget ? matchingTarget.id : ''); // Using replaceState instead of window.location.hash because we don't want it to jump

    if (lastHash !== newHash) {
      lastHash = newHash;
      updateHash(newHash);
    }

    updateLinksState();
  };

  updateScrollState();
  window.addEventListener('hashchange', updateLinksState);
  window.addEventListener('scroll', throttle(updateScrollState, 100));
};

var init$d = function init() {
  // Initialize toggles
  jQuery('.faq_accordion_head').on('click', function () {
    var $accordion_parent = jQuery(this).parent('.faq_accordion');
    var $accordion_body = $accordion_parent.find('.faq_accordion_body');
    $accordion_parent.siblings().removeClass('open');
    $accordion_parent.toggleClass('open');
    var headerHeight = jQuery('.de-PageWrap-header').height();
    var productNavHeight = jQuery('.de-ProductMenu').height();
    var totalHeightOffset = headerHeight + productNavHeight;

    if ($accordion_parent.hasClass('open')) {
      setTimeout(function () {
        jQuery('html, body').scrollTop($accordion_body.offset().top - totalHeightOffset);
      }, 300);
    }
  });
};

// @ts-check
/**
 * Root element(s)
 */

/** @type {HTMLButtonElement} */

var addToCartButtonEl$1 = document.querySelector("." + JS_PREFIX + "AddToCart-btn");
/**
 * Module constants
 */

var CLICK_EVENT$2 = 'click';
var KEY_DOWN_EVENT$1 = 'keydown';
var ESCAPE_KEY_VALUE$1 = 'escape';
/**
 * Has the document binding been initialized
 */

var isListenerInitialized = false;
/**
 * Helper for detecting the "Escape" keyboard key
 *
 * @param {string} key A keyboard event `key`
 * @returns {boolean}
 */

var isEscapeKey$1 = function isEscapeKey(key) {
  return key.toLowerCase() === ESCAPE_KEY_VALUE$1;
};
/**
 * The keyboard event handler
 *
 * @param {KeyboardEvent} keyboardEvent
 */


var keyboardEventHandler$1 = function keyboardEventHandler(_ref) {
  var key = _ref.key;

  /**
   * For better accessibility, the modal should close via the "escape" key
   */
  if (isEscapeKey$1(key) && window.BISPopover && window.BISPopover.form) {
    window.BISPopover.form.hide();
  }
};
/** @type {HTMLElement | undefined} */


var lastFocusedElement;
/**
 * Handle ATC click event
 *
 * Sets up binding to allow BIS modal closing via Escape key
 * and overrides BIS Modal "hide()" to reset focus on "Email Me" CTA button
 * for better keyboard accessibility UX
 */

var onAddToCartClick$1 = function onAddToCartClick() {
  if (window.BISPopover && window.BISPopover.form) {
    /**
     * Store the element that was focused before the modal was opened. It will
     * be focused after the modal is closed
     */
    lastFocusedElement =
    /** @type {HTMLElement} */
    document.activeElement; // Save popover-bound original `form.hide` function

    var originalFormHideFunction = window.BISPopover.form.hide.bind(window.BISPopover.form);
    /**
     * Intercept `form.hide` (bound to the modal close button [x]) and also
     * custom-bound to ESC keydown, to re-focus where the user focus was
     * before opening the modal
     */

    window.BISPopover.form.hide = function () {
      originalFormHideFunction();
      lastFocusedElement.focus();
    };
  }

  if (!isListenerInitialized) {
    // Add keydown listener to document
    bindDocumentKeyDown();
    isListenerInitialized = true;
  }
};
/**
 * Add event listener to document
 */


var bindDocumentKeyDown = function bindDocumentKeyDown() {
  /** @type {HTMLIFrameElement} */
  var BISPopeverEl = document.querySelector('#BIS_frame');

  if (BISPopeverEl) {
    BISPopeverEl.contentDocument.addEventListener(KEY_DOWN_EVENT$1, keyboardEventHandler$1);
  }
};
/**
 * Initialize BISPopover accessibility enhancement(s)
 */


var init$e = function init() {
  /**
   * Listener for Add to Cart button
   */
  if (addToCartButtonEl$1) {
    addToCartButtonEl$1.addEventListener(CLICK_EVENT$2, onAddToCartClick$1);
  }
};

var initialState$3 = {
  color: null,
  size: null
};
var state$4 = createState(initialState$3);

var getVariantFromState = function getVariantFromState(_ref) {
  var color = _ref.color,
      size = _ref.size;
  return color && size && getSelectedVariant({
    color: color,
    size: size
  });
};

var getComputedState = function getComputedState(state) {
  return {
    color: state.color,
    size: state.size,
    variant: getVariantFromState(state)
  };
};

var setUpListeners = function setUpListeners() {
  handleSizeSelect(function (size) {
    state$4.updateState({
      size: size
    });
  });
  handleColorSelect(function (color) {
    state$4.updateState({
      color: color
    });
    displayRRPPrices(color);
  });
  onVariantModification(function () {
    var fullState = getComputedState(state$4.getState());
    updateOptionStates(fullState);
  }); // For triggering swatches UI update after inventory has been loaded

  document.addEventListener('tomitProductLoaded', function (e, data) {
    setTimeout(function () {
      var fullState = getComputedState(state$4.getState());
      updateOptionStates(fullState);
    }, 100);
  });
}; // Handles variant change


state$4.onChange(function (state) {
  var variant = getVariantFromState(state);
  onVariantSelect$3(variant);
  onVariantSelect$1(variant);
  onVariantSelect(variant);
  updateUrlVariant(variant && variant.id);

  if (variant) {
    // MasterSelect requires a full variant to update
    onVariantSelect$2(variant); // The updateFulfillmentOptionsUI function will be undefined on page load,
    window.vars.selectedVariant = variant;

    if (window.inventoryLocationsDisplay && window.inventories) {
      window.inventoryLocationsDisplay.changeVariant(variant.id);
    }

    if (window.vueATC) {
      window.vueATC.changeVariant(variant.id);
    }
  } else {
    window.vars.selectedVariant = null;

    if (window.inventoryLocationsDisplay && window.inventories) {
      window.inventoryLocationsDisplay.changeVariant(null);
    }

    if (window.vueATC) {
      window.vueATC.changeVariant(null);
    }
  }
}, function (state) {
  return [getVariantFromState(state)];
}); // Handles color change

state$4.onChange(function (_ref2) {
  var color = _ref2.color;
  if (!color) return;
  onColorSelect$2(color);
  onColorSelect(color); // Model code can be updated without size

  onColorSelect$3(color);
  displayRRPPrices(color);
}, function (state) {
  return [state.color];
}); // Handles swatch change (color/size)

state$4.onChange(function (state) {
  var color = state.color,
      size = state.size;
  var variant = getVariantFromState(state);
  updateOptionStates({
    color: color,
    size: size,
    variant: variant
  }); // Price can be updated even if no variant (color + size) has been selected
  // @see: https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#price

  onSwatchChange({
    color: color,
    variant: variant
  });

  if (window.vars.thresholdForGateways.afterpay.enabled && window.vars.thresholdForGateways.afterpay.threshold && variant) {
    displayPaymentGateway(variant.price, window.vars.thresholdForGateways.afterpay.threshold * 100, 'afterpay');
  }

  if (window.vars.thresholdForGateways.zipPay.enabled && window.vars.thresholdForGateways.zipPay.threshold && variant) {
    displayPaymentGateway(variant.price, window.vars.thresholdForGateways.zipPay.threshold * 100, 'zip-pay');
  }
}, function (state) {
  return [state.size, state.color];
});

var selectUrlVariant = function selectUrlVariant() {
  var urlVariantId = Number(getUrlVariant());
  var variant = getSelectedVariant({
    id: urlVariantId
  });

  if (variant) {
    var options = getVariantOptions(variant);

    var targetColorSwatch = _toConsumableArray(swatchOptionEls).find(function (swatch) {
      return swatch.value === options.color;
    });

    var targetSizeSwatch = _toConsumableArray(swatchOptionEls$1).find(function (swatch) {
      return swatch.value === options.size;
    });

    if (targetColorSwatch) {
      targetColorSwatch.click();
    }

    if (targetColorSwatch) {
      targetSizeSwatch.click();
    }
  } else {
    selectFirstSwatch();
  }

  if (variant) return urlVariantId;
};

var displayPaymentGateway = function displayPaymentGateway(price, threshold, gateway) {
  var dNoneClassName = 'de-u-hidden';
  jQuery(".product-" + gateway + "-info").toggleClass(dNoneClassName, price < threshold);
  jQuery(".product-" + gateway + "-disabled-info").toggleClass(dNoneClassName, price >= threshold);
};

var displayRRPPrices = function displayRRPPrices(color) {
  var variant = variantsJSON.find(function (variant) {
    return getVariantOptions(variant).color === color;
  });
  var variantModelCode = getModelCodeFromVariant(variant);
  var metafields = window.vars.rrpMetafields;
  var product = window.vars.productJSON;
  var productPriceEl = jQuery('#product-rrp-price');

  if (!metafields || !metafields.rrp_prices) {
    productPriceEl.hide();
    return;
  }

  var rrpPriceObj = metafields.rrp_prices.find(function (rrp) {
    return rrp.modelcode === variantModelCode;
  });
  console.log(rrpPriceObj);
  var rrpPriceData = rrpPriceObj && rrpPriceObj.PriceRRP ? parseInt(rrpPriceObj.PriceRRP, 10) : false;
  var rrpPrice = rrpPriceData > product.price ? (rrpPriceData / 100).toFixed(2) : false;
  rrpPrice ? function () {
    productPriceEl.text("RRP*: " + ('$' + rrpPrice));
    productPriceEl.show();
  }() : productPriceEl.hide();
};

var init$f = function init$a() {
  return new Promise(function ($return, $error) {
    init$5();
    init$4();
    setUpListeners();
    reviewsInit();
    init$g();
    init$1();
    init();
    init$2();
    init$3();
    init$9();
    init$6();
    init$c();
    init$e();
    init$8();
    init$7();
    init$b();
    init$d();
    var urlVariant = selectUrlVariant();
    return $return(urlVariant); // Removed for AU
    // Suggest leaving the async setup for fulfillment options to last
    // updateFulfillmentOptionsUI = await storePickup.init();

    /**
     * The updateFulfillmentOptionsUI function will be undefined in the master
     * updateUI function on page load, so call here as soon as it's defined
     */
    // if (urlVariant) updateFulfillmentOptionsUI({ id: urlVariant });
  });
}; // Call the async init to return the Promise and log errors


init$f().then(function () {
  displayRRPPrices(state$4.getState().color);
  return console.log('Product page initialized.');
}).catch(function (error) {
  return console.error(error);
}); //GOOGLE TRANSLATE

var TRANSLATE_API_KEY = 'AIzaSyBmV081v1C1hz45hJpCpcprUPOhrNqDekY';
var SOURCE_LANGUAGE = '';
var TARGET_LANGUAGE = 'en';

function translateReview(text, parentEl, type) {
  var translateURL = "https://www.googleapis.com/language/translate/v2" + "?key=" + TRANSLATE_API_KEY + "&source=" + SOURCE_LANGUAGE + "&target=" + TARGET_LANGUAGE + "&q=" + text + "&format=text&callback=?";
  jQuery.getJSON(translateURL, function (result) {
    if (!result.error) {
      console.log('CONTENTS: ' + result.data.translations[0].translatedText);
      parentEl.find('.review-' + type + '-translated').text(result.data.translations[0].translatedText);
      show_review(parentEl, 'original', 'translated');
      parentEl.addClass('translated');
    } else {
      console.log(result.error);
    }
  });
}

jQuery('.btn-original').on('click', function (e) {
  e.preventDefault();
  var parentEl = jQuery(this).closest('.de-CustomerReview');
  show_review(parentEl, 'translated', 'original');
});
jQuery('.btn-translated').on('click', function (e) {
  e.preventDefault();
  var parentEl = jQuery(this).closest('.de-CustomerReview');
  var title = parentEl.find('.review-title-original').html();
  var body = parentEl.find('.review-body p').html();

  if (!parentEl.hasClass('translated')) {
    translateReview(title, parentEl, 'title');
    translateReview(body, parentEl, 'body');
  } else {
    console.log('Already translated');
    show_review(parentEl, 'original', 'translated');
  }
});

function show_review(parentEl, h, s) {
  parentEl.find('.review-title-' + s).show();
  parentEl.find('.review-body-' + s).show();
  parentEl.find('.review-title-' + h).hide();
  parentEl.find('.review-body-' + h).hide();
  parentEl.find('.btn-' + h).addClass('active');
  parentEl.find('.btn-' + s).removeClass('active');
}
