import { V as Vue } from './built-vue.esm-661ab646.js';
import { J as JS_PREFIX, C as CSS_PREFIX, b as CSS_UTILITY_PREFIX, c as IS_HIDDEN_CLASS } from './built-fetch-stores-0afbe528.js';
import { _ as _toConsumableArray } from './built-toConsumableArray-0fbe23f7.js';
import { i as init$f } from './built-recently-viewed-799d64d9.js';
import { c as createState } from './built-create-state-60ccb78c.js';

// @ts-check
/**
 * Icon prefix
 */

var ICON_PREFIX = CSS_PREFIX + "Icon-";
/**
 * SUFFIXES
 */

/**
 * Container (e.g., for Handlebars)
 */

var CONTAINER_SUFFIX = '-container';
/**
 * Template (e.g., for Handlebars)
 */

var TEMPLATE_SUFFIX = '-template';
/**
 * Global inventory type
 */

var INVENTORY_TYPE = window.vars.inventoryType;
var OUT_OF_STOCK_HANDLING = window.vars.outOfStockHandling;
/**
 * TAGS
 */

/**
 * The product tag that indicates that the product will not be restocked
 * @see https://app.gitbook.com/@decathlonusa/s/shopify/implemented-features-documentation/product-page-v1#sold-out-logic
 */

var NON_FOLLOWED_TAG = 'NonFollowed';
/**
 * CSS Classes
 */

/**
 * The CSS classes used to update the UI on variant changes
 */

var IS_ACTIVE_CLASS = CSS_PREFIX + "is-active";
var IS_TRANSITIONING_CLASS = CSS_PREFIX + "is-transitioning";
var IS_OUT_OF_STOCK_CLASS = CSS_PREFIX + "is-outofstock";
var IS_SOLD_OUT_CLASS = CSS_PREFIX + "is-soldout";
var VALIDATION_MESSAGE_CLASS = JS_PREFIX + "validation-message";
/**
 * TEXT CONSTANTS
 */

/**
 * Text used to update UI elements
 * @todo Use translation keys
 */

var PRODUCT_PAGE_COPY = {
  SELECT_A_SIZE: 'Select a size',
  ADD_TO_CART: 'Add to Cart',
  SOLD_OUT: 'Sold Out',
  EMAIL_ME_WHEN_IN_STOCK: 'Email Me When Available',
  OUT_OF_STOCK: 'Out of stock',
  ALL_SIZES_OUT_OF_STOCK: 'Out of stock.',
  NEW_MODEL_IN_DESIGN: 'New model in design',
  OUT_OF_STOCK_RECENTLY_CHANGED: 'Out of stock. Inventory recently changed.',
  INVENTORY_RECENTLY_CHANGED: 'Inventory recently changed',
  ALL_AVAILABLE_PRODUCTS_IN_CART: 'All available products are in your cart.',

  /**
   * @param {string | number} quantity
   * @returns {string}
   */
  allInStockProductsInYourCart: function allInStockProductsInYourCart(quantity) {
    return "All in stock products are now in your cart. " + quantity + " " + (Number(quantity) === 1 ? 'was' : 'were') + " added.";
  },

  /**
   * Provides the proper UI text to display
   * • If quantity 0 left => "0 left"
   * • If quantity > 0 => "Only X left"
   * @todo Consider moving out of constants because different values can be returned
   * @param {string | number} quantity
   * @returns {string}
   */
  limitedQuantityLeft: function limitedQuantityLeft(quantity) {
    return quantity === 0 ? quantity + " left" : "Only " + quantity + " left";
  }
};
/*
 * CSS class that sets content to a fixed (no scroll) state
 */

var FIXED_CLASS = CSS_PREFIX + "content-is-fixed";
/*
 * CSS class that indicates an element should hide vertical overflow
 */

var HIDE_OVERFLOW_Y_CLASS = CSS_UTILITY_PREFIX + "overflowYNone";
/**
 * CSS class used by components that need an "open" state
 */

var IS_OPEN = CSS_PREFIX + "is-open";

// @ts-check
/**
 * Root element(s)
 */

var CONTAINER_CAROUSEL_SELECTOR = "." + JS_PREFIX + "SlickCarouselContainer";
var CONTAINER_CAROUSEL_ACTIVE_SELECTOR = CONTAINER_CAROUSEL_SELECTOR + "." + IS_ACTIVE_CLASS;
var FEATURE_CAROUSEL_SELECTOR = "." + JS_PREFIX + "SlickCarouselFeature";
var FEATURE_CAROUSEL_ACTIVE_SELECTOR = FEATURE_CAROUSEL_SELECTOR + "." + IS_ACTIVE_CLASS;
var THUMBNAIL_CAROUSEL_SELECTOR = "." + JS_PREFIX + "SlickCarouselThumbnail";
var THUMBNAIL_CAROUSEL_ACTIVE_SELECTOR = THUMBNAIL_CAROUSEL_SELECTOR + "." + IS_ACTIVE_CLASS;
var SLIDE_CAROUSEL_SELECTOR = "." + JS_PREFIX + "SlickCarouselSlide";
var $galleryCounter = jQuery("." + JS_PREFIX + "ProductGallery-countValue");
/**
 * Global active carousel index
 */

var activeSlideIndex = 0;
/**
 * Boolean check that all carousel slide totals are equal
 */

var allSlideTotalsMatch = true;
/**
 * Partial carousel settings
 */

var THUMB_SLIDES_TO_SHOW = 5;
/**
 * Number of thumbnails that fit within view
 */

var THUMB_SLIDES_SCROLL_GATE = 5;
/**
 * Utility class that adds cursor: grab;
 */

var THUMB_CURSOR_GRAB_CLASS = CSS_UTILITY_PREFIX + "cursorGrab";
/**
 * Load carousel images
 */

var loadImages = function loadImages() {
  jQuery(CONTAINER_CAROUSEL_ACTIVE_SELECTOR + " " + SLIDE_CAROUSEL_SELECTOR).each(function () {
    var $slide = jQuery(this); // Remove placeholder background color once image has loaded

    $slide.on('load', function () {
      $slide.removeClass(CSS_UTILITY_PREFIX + "bgSilver " + CSS_UTILITY_PREFIX + "bgWhite");
    });

    if (!$slide.attr('srcset')) {
      var srcset = $slide.data('srcset');
      $slide.attr('srcset', srcset);
    }

    if (!$slide.attr('sizes')) {
      var sizes = $slide.data('sizes');
      $slide.attr('sizes', sizes);
    }

    if (!$slide.attr('src')) {
      // This is called data-carousel-src because there is a global script which
      // modifies data-src
      var src = $slide.data('carousel-src');
      $slide.attr('src', src);
    }
  });
};
/**
 * Checks whether all variant slide totals are equal
 */


var initAllSlideTotalsMatch = function initAllSlideTotalsMatch() {
  var previousSlideTotal = null;
  jQuery(FEATURE_CAROUSEL_SELECTOR).each(function (index, featureCarousel) {
    var slideTotal = jQuery(featureCarousel).children().length;

    if (previousSlideTotal !== null && slideTotal !== previousSlideTotal) {
      allSlideTotalsMatch = false;
      return false;
    }

    previousSlideTotal = slideTotal;
  });
};
/**
 * Returns the slide count of Slick Carousel elements
 *
 * @return {Number} Total slide element count
 */


var getSlideCount = function getSlideCount() {
  var _this = this;

  var slidesTraversed;
  var swipedSlide;
  var centerOffset = this.options.centerMode === true ? this.slideWidth * Math.floor(this.options.slidesToShow / 2) : 0;

  if (this.options.swipeToSlide === true) {
    /**
     * $slideTrack references the container element for the individual slides
     */
    this.$slideTrack.find('.slick-slide').each(function (index, slide) {
      var offsetPoint = slide.offsetLeft;
      var outerSize = jQuery(slide).outerWidth();

      if (_this.options.vertical === true) {
        offsetPoint = slide.offsetTop;
        outerSize = jQuery(slide).outerHeight();
      }

      if (offsetPoint - centerOffset + outerSize / 2 > _this.swipeLeft * -1) {
        swipedSlide = slide;
        return false;
      }
    });
    slidesTraversed = Math.abs(Number(jQuery(swipedSlide).attr('data-slick-index')) - this.currentSlide) || 1;
    return slidesTraversed;
  }

  return this.options.slidesToScroll;
};
/**
 * Returns the available indexes of Slick Carousel slides
 *
 * @returns {Array} Collection of navigable slide indexes
 */


var getNavigableIndexes = function getNavigableIndexes() {
  var breakPoint = 0;
  var counter = 0;
  var indexes = [];
  var max;

  if (this.options.infinite === false) {
    max = this.slideCount;
  } else {
    breakPoint = this.options.slideCount * -1;
    counter = this.options.slideCount * -1;
    max = this.slideCount * 2;
  }

  while (breakPoint < max) {
    indexes.push(breakPoint);
    breakPoint = counter + this.options.slidesToScroll;
    counter += this.options.slidesToScroll <= this.options.slidesToShow ? this.options.slidesToScroll : this.options.slidesToShow;
  }

  return indexes;
};
/**
 * Slick Carousel bugfix; allows swipeToSlide on vertical orientation
 * @see https://github.com/kenwheeler/slick/issues/1962
 */


var improveCarouselSwipeResponse = function improveCarouselSwipeResponse() {
  jQuery(THUMBNAIL_CAROUSEL_ACTIVE_SELECTOR).each(function () {
    // @ts-ignore
    this.slick.getSlideCount = getSlideCount; // @ts-ignore

    this.slick.getNavigableIndexes = getNavigableIndexes;
  });
};
/**
 * Counter UI text format helper
 *
 * Formats the counter text for UI display.
 *
 * @param {Object} obj Counter data
 * @param {Number} obj.currentIndex The active index of shown carousel slide
 * @param {Number} obj.total The total count of the active carousel slides
 * @returns {string} Formatted text for UI display
 */


var formatCounterText = function formatCounterText(_ref) {
  var currentIndex = _ref.currentIndex,
      total = _ref.total;
  return currentIndex + 1 + "/" + total;
};
/**
 * Update carousel gallery counter value
 * @param {Object} counterData An object containing counter data
 */


var updateGalleryCounter = function updateGalleryCounter(counterData) {
  $galleryCounter.text(formatCounterText(counterData));
};
/**
 * Adjust cursor for thumbnails to indicate scrolling when available
 * @param {Number} thumbnailCount The active thumbnail total
 */


var updateThumbnailCursors = function updateThumbnailCursors(thumbnailCount) {
  var buttonElements = jQuery(THUMBNAIL_CAROUSEL_ACTIVE_SELECTOR + " button");

  if (thumbnailCount > THUMB_SLIDES_SCROLL_GATE) {
    buttonElements.addClass(THUMB_CURSOR_GRAB_CLASS);
  } else {
    buttonElements.removeClass(THUMB_CURSOR_GRAB_CLASS);
  }
};
/**
 * Initialize carousel
 */


var initCarousel = function initCarousel() {
  var $featureCarouselActive = jQuery(FEATURE_CAROUSEL_ACTIVE_SELECTOR);
  var $thumbnailCarouselActive = jQuery(THUMBNAIL_CAROUSEL_ACTIVE_SELECTOR);
  var activeSlideTotal = jQuery(FEATURE_CAROUSEL_ACTIVE_SELECTOR + ":first " + SLIDE_CAROUSEL_SELECTOR + ":not(.slick-cloned)").length;
  /**
   * Reset index when all slides do not match in length
   */

  if (!allSlideTotalsMatch) {
    activeSlideIndex = 0;
  }
  /**
   * Visit link for Slick configuration options
   * @see https://kenwheeler.github.io/slick/
   */


  var sharedConfig = {
    arrows: false,
    infinite: true,
    initialSlide: activeSlideIndex
  };
  /**
   * Keep activeSlideIndex in sync with active slide
   * Keep gallery counter in sync with active slide value and slide total
   */

  $featureCarouselActive.on('afterChange', function (event, slick, currentSlide) {
    activeSlideIndex = currentSlide;
    updateGalleryCounter({
      currentIndex: activeSlideIndex,
      total: slick.slideCount
    });
  });
  /**
   * On Slick initialization, set gallery counter active slide value and slide total
   */

  $featureCarouselActive.on('init', function () {
    updateGalleryCounter({
      currentIndex: activeSlideIndex,
      total: activeSlideTotal
    });
    loadImages();
    updateThumbnailCursors(activeSlideTotal);
  });
  $featureCarouselActive.slick(Object.assign({}, sharedConfig, {
    asNavFor: $thumbnailCarouselActive,
    slidesToShow: 1,
    waitForAnimate: false
  }));
  $thumbnailCarouselActive.slick(Object.assign({}, sharedConfig, {
    asNavFor: $featureCarouselActive,
    focusOnSelect: true,
    slidesToShow: THUMB_SLIDES_TO_SHOW,
    vertical: true,
    verticalSwiping: true,
    swipeToSlide: true,
    touchThreshold: 30
  }));
  improveCarouselSwipeResponse();
};
/**
 * Add required active classes to elements
 * @param {string} containerClass Class name of container element
 */


var prepCarousel = function prepCarousel(containerClass) {
  jQuery(containerClass).addClass(IS_ACTIVE_CLASS);
  jQuery(containerClass + " > " + FEATURE_CAROUSEL_SELECTOR).addClass(IS_ACTIVE_CLASS);
  jQuery(containerClass + " > " + THUMBNAIL_CAROUSEL_SELECTOR).addClass(IS_ACTIVE_CLASS);
};
/**
 * Destroy and clean up carousel
 */


var destroyCarousel = function destroyCarousel() {
  var $containerCarouselActive = jQuery(CONTAINER_CAROUSEL_ACTIVE_SELECTOR);
  var $featureCarouselActive = jQuery(FEATURE_CAROUSEL_ACTIVE_SELECTOR);
  var $thumbnailCarouselActive = jQuery(THUMBNAIL_CAROUSEL_ACTIVE_SELECTOR);
  $featureCarouselActive.slick('unslick');
  $thumbnailCarouselActive.slick('unslick');
  $featureCarouselActive.off();
  $thumbnailCarouselActive.off();
  $featureCarouselActive.removeClass(IS_ACTIVE_CLASS);
  $thumbnailCarouselActive.removeClass(IS_ACTIVE_CLASS);
  $containerCarouselActive.removeClass(IS_ACTIVE_CLASS);
};
/**
 * Watch for window resize event (debounced), refresh carousel
 */


var handleWindowResize = function handleWindowResize() {
  var timeout = null;
  jQuery(window).resize(function () {
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      var $featureCarouselActive = jQuery(FEATURE_CAROUSEL_ACTIVE_SELECTOR);
      var $thumbnailCarouselActive = jQuery(THUMBNAIL_CAROUSEL_ACTIVE_SELECTOR); // Sync slide index when switching between carousels (desktop vs mobile carousels)

      $featureCarouselActive.slick('slickGoTo', activeSlideIndex);
      $thumbnailCarouselActive.slick('slickGoTo', activeSlideIndex);
    }, 250);
  });
};
/**
 * Reset active carousel to represent new color
 * @param {string} color
 */


var onColorSelect = function onColorSelect(color) {
  var containerClass = CONTAINER_CAROUSEL_SELECTOR + "[data-color=\"" + color.toLowerCase() + "\"]"; // Breaking up the work into separate tasks because Slick clogs the main thread a lot

  setTimeout(function () {
    destroyCarousel();
    prepCarousel(containerClass);
  });
  setTimeout(function () {
    initCarousel();
  });
};
/**
 * Put all functions that need to run on product-page load here
 */

var init = function init() {
  initAllSlideTotalsMatch();
  initCarousel();
  handleWindowResize();
};

/**
 * Root element(s)
 */

var $slideCarousel = jQuery("." + JS_PREFIX + "CarouselContextSlide");
/**
 * Load carousel images
 */

var loadImages$1 = function loadImages() {
  $slideCarousel.each(function () {
    var $slide = jQuery(this);

    if (!$slide.attr('srcset')) {
      var srcset = $slide.data('srcset');
      $slide.attr('srcset', srcset);
    }

    if (!$slide.attr('sizes')) {
      var sizes = $slide.data('sizes');
      $slide.attr('sizes', sizes);
    }

    if (!$slide.attr('src')) {
      // This is called data-carousel-src because there is a global script which
      // modifies data-src
      var _srcset = $slide.data('carousel-src');

      $slide.attr('src', _srcset);
    }
  });
};
/**
 * Put all functions that need to run on product-page load here
 */


var init$1 = function init() {
  loadImages$1();
};

/**
 * Attach listeners to open collapse elements
 */

var initCollapse = function initCollapse() {
  jQuery('[data-collapse]').on('click', function () {
    jQuery(this).toggleClass('expanded');
    jQuery(".de-collapse#" + jQuery(this).data('collapse')).toggleClass('expanded');
  });
};
/**
 * Put all functions that need to run on product-page load here
 */


var init$2 = function init() {
  initCollapse();
};

// @ts-check
var productsJSON = window.productJSON;
var variantsJSON = productsJSON.variants;
var COLOR_INDEX = productsJSON.options.indexOf('Color');
var SIZE_INDEX = productsJSON.options.indexOf('Size');
var MODEL_INDEX = productsJSON.options.indexOf('Model Code');
var COLOR_OPTION = "option" + (COLOR_INDEX + 1);
var SIZE_OPTION = "option" + (SIZE_INDEX + 1);
var MODEL_OPTION = "option" + (MODEL_INDEX + 1);
/**
 * @todo Make `MIN_QUANTITY_THRESHOLD` threshold dynamic based on theme settings
 */

var MIN_QUANTITY_THRESHOLD = 5;
/**
 * Searches for a given tag in the product tags
 *
 * @param {string} tag The tag to search for
 * @returns {boolean}
 */

var isTagFound = function isTagFound(tag) {
  return productsJSON.tags.includes(tag);
};
/**
 * Helper to get the variant based on a color & size or ID
 *
 * @param {Object} obj The selected options data
 * @param {string} [obj.size] The selected size option
 * @param {string} [obj.color] The selected color option
 * @param {number} [obj.id] A product variant ID
 * @param {Array} [obj.source = variantsJSON] The array to filter to find a
 * product variant
 * @returns {Variant | undefined} A product variant object
 */


var getSelectedVariant = function getSelectedVariant(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      size = _ref.size,
      color = _ref.color,
      id = _ref.id,
      _ref$source = _ref.source,
      source = _ref$source === void 0 ? variantsJSON : _ref$source;

  if (!Array.isArray(source) || !id && (!color || !size)) {
    return;
  }

  return source.find(function (variant) {
    return variant[SIZE_OPTION] === size && variant[COLOR_OPTION] === color || variant.id === id;
  });
};
/**
 * Helper to determine if a product is an "End Of Life" product
 * @see https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#sold-out-logic
 * @returns {boolean}
 */

var isNonFollowedProduct = function isNonFollowedProduct() {
  return isTagFound(NON_FOLLOWED_TAG);
};
/**
 * Helper to determine if a product has varied prices
 *
 * @returns {boolean}
 */

var isProductPricingVaried = function isProductPricingVaried() {
  var manualCompareAtPrices = productsJSON.variants.map(function (v) {
    return v.compare_at_price;
  });

  var manualCompareAtPriceVaries = function manualCompareAtPriceVaries(manualCompareAtPrices) {
    return manualCompareAtPrices.every(function (v) {
      return v === manualCompareAtPrices[0];
    });
  };

  return productsJSON.price_varies || manualCompareAtPriceVaries;
};
/**
 * Gets model code from variant
 *
 * @param {Variant} variant
 * @returns {string} Variant model code
 */

var getModelCodeFromVariant = function getModelCodeFromVariant(variant) {
  return variant[MODEL_OPTION];
};
/**
 * Filters for available variants
 *
 * @returns {Variant[]} An array of available variants
 */

var availableVariants = function availableVariants() {
  return variantsJSON.filter(isVariantAvailable);
};
/**
 * Returns all options (option1) that share a variant with given option (option2)
 *
 * @param {Object} params An object
 * @param {string} params.searchOption Title of option to find matches in
 * @param {string} params.findOption Title of option to match
 * @param {string | undefined} params.value Value of option to find matches in
 * @param {Array} params.variants Array of variants to filter on
 * @returns {Array} Options with matches to given option
 */

var getOptionCombinations = function getOptionCombinations(_ref3) {
  var searchOption = _ref3.searchOption,
      findOption = _ref3.findOption,
      value = _ref3.value,
      variants = _ref3.variants;
  return variants.reduce(function (accArray, variant) {
    if (!accArray.includes(variant[searchOption])) {
      if (value) {
        if (value === variant[findOption]) {
          accArray.push(variant[searchOption]);
        }
      } else {
        accArray.push(variant[searchOption]);
      }
    }

    return accArray;
  }, []);
};
/**
 * Gets existing colors from size
 *
 * @param {string} size A size value
 * @returns {Array} Existing colors
 */


var getExistingColorsFromSize = function getExistingColorsFromSize(size) {
  return getOptionCombinations({
    searchOption: COLOR_OPTION,
    findOption: SIZE_OPTION,
    value: size,
    variants: variantsJSON
  });
};
/**
 * Gets existing sizes from color
 *
 * @param {string} color A color value
 * @returns {Array} Existing sizes
 */

var getExistingSizesFromColor = function getExistingSizesFromColor(color) {
  return getOptionCombinations({
    searchOption: SIZE_OPTION,
    findOption: COLOR_OPTION,
    value: color,
    variants: variantsJSON
  });
};
/**
 * Gets available colors from size
 *
 * @param {string} size A size value
 * @returns {Array} Available colors
 */

var getAvailableColorsFromSize = function getAvailableColorsFromSize(size) {
  return getOptionCombinations({
    searchOption: COLOR_OPTION,
    findOption: SIZE_OPTION,
    value: size,
    variants: availableVariants()
  });
};
/**
 * Gets available sizes from color
 *
 * @param {string} color A color value
 * @returns {Array} Available sizes
 */

var getAvailableSizesFromColor = function getAvailableSizesFromColor(color) {
  return getOptionCombinations({
    searchOption: SIZE_OPTION,
    findOption: COLOR_OPTION,
    value: color,
    variants: availableVariants()
  });
};
/**
 * @typedef {Object} VariantOptions
 * @property {string | null} size
 * @property {string | null} color
 * @property {string | null} model
 */

/**
 * @param {Variant} variant
 * @returns {VariantOptions}
 */

var getVariantOptions = function getVariantOptions(variant) {
  return {
    size: variant[SIZE_OPTION],
    color: variant[COLOR_OPTION],
    model: variant[MODEL_OPTION]
  };
};
/**
 * Helper to know if a product variant is available
 * @param {Variant} variant
 * @returns {boolean}
 */

var isVariantAvailable = function isVariantAvailable(variant) {
  return variant && variant.available;
};
/**
 * Helper to know if a product variant is "out of stock"
 * @see https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#sold-out-logic
 * @param {Variant} variant
 * @returns {boolean}
 */

var isVariantOutOfStock = function isVariantOutOfStock(variant) {
  return !isVariantAvailable(variant) && !isNonFollowedProduct();
};
/**
 * Helper to know if a product variant is "sold out"
 * @see https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#sold-out-logic
 * @param {Variant} variant
 * @returns {boolean}
 */

var isVariantSoldOut = function isVariantSoldOut(variant) {
  return !isVariantAvailable(variant) && isNonFollowedProduct();
};
/**
 * Helper to know if a product variant is "Click & Collect"
 * @param {Variant} variant
 * @returns {boolean}
 */

var isVariantCC = function isVariantCC(variant) {
  var v = window.vars.productJSON.variants.find(function (obj) {
    return obj.id === variant.id;
  });
  return v.cc || false;
};
/**
 * Helper to determine if a given variant has quantity above the minimum threshold
 * @param {Variant} variant
 * @returns {boolean}
 */

var variantHasSufficientQuantity = function variantHasSufficientQuantity(variant) {
  return variant.inventory_quantity >= MIN_QUANTITY_THRESHOLD;
};

var initialState = {
  color: null,
  selectedOption: null
};
var state = createState(initialState);
var $swatches = jQuery("." + JS_PREFIX + "ColorSwatches");
var swatchOptionEls = document.querySelectorAll("." + JS_PREFIX + "ColorSwatches-option");
var $colorSwatchesOptions = jQuery(swatchOptionEls);
var $colorInfo = jQuery("." + JS_PREFIX + "ColorInfo");

var updateColorUIState = function updateColorUIState(selectedOption) {
  // Visually unselect all options then select current options
  $colorSwatchesOptions.removeClass(IS_ACTIVE_CLASS);
  jQuery(selectedOption).addClass(IS_ACTIVE_CLASS);
};

var selectFirstSwatch = function selectFirstSwatch() {
  var firstAvailableVariant = availableVariants()[0];
  var color = firstAvailableVariant && getVariantOptions(firstAvailableVariant).color;
  var firstSwatch = color && $colorSwatchesOptions.toArray().find(function (el) {
    return el.value === color;
  }) || $colorSwatchesOptions.get(0);

  if (firstSwatch) {
    firstSwatch.click();
  }
};

var render = function render(_ref) {
  var selectedOption = _ref.selectedOption,
      color = _ref.color;
  updateColorUIState(selectedOption);
  $colorInfo.text(color);
};

state.onChange(render);
var handleColorSelect = function handleColorSelect(callback) {
  state.onChange(function (_ref2) {
    var color = _ref2.color;
    return callback(color);
  }, function (state) {
    return [state.color];
  });
};

var onColorSelect$1 = function onColorSelect() {
  state.updateState({
    // @ts-ignore
    color: jQuery(this).val(),
    selectedOption: this
  });
};

var selectSingleColorOptions = function selectSingleColorOptions() {
  if ($colorSwatchesOptions.length === 1) {
    $colorSwatchesOptions[0].click();
  }
};

var init$3 = function init() {
  $colorSwatchesOptions.on('click', onColorSelect$1);
  selectSingleColorOptions();
};

var initialState$1 = {
  size: null,
  selectedOption: null,
  variant: null,
  color: null
};
var state$1 = createState(initialState$1);
var $swatches$1 = jQuery("." + JS_PREFIX + "SizeSwatches");
var swatchOptionEls$1 = document.querySelectorAll("." + JS_PREFIX + "SizeSwatches-option");
var validationTextEl = document.querySelector("." + VALIDATION_MESSAGE_CLASS);
var $sizeSwatchesOptions = jQuery(swatchOptionEls$1);
var $sizeInfo = jQuery("." + JS_PREFIX + "SizeInfo");

var updateSizeUIState = function updateSizeUIState(selectedOption) {
  // Visually unselect all options then select current options
  $sizeSwatchesOptions.removeClass(IS_ACTIVE_CLASS);
  jQuery(selectedOption).addClass(IS_ACTIVE_CLASS);
};

var render$1 = function render(_ref) {
  var selectedOption = _ref.selectedOption,
      size = _ref.size,
      variant = _ref.variant,
      color = _ref.color;
  $swatches$1.toggleClass(IS_HIDDEN_CLASS, getExistingSizesFromColor(color).length === 1);
  updateSizeUIState(selectedOption);
  $sizeInfo.text(variant ? size : PRODUCT_PAGE_COPY.SELECT_A_SIZE);
};

state$1.onChange(render$1);
var onColorSelect$2 = function onColorSelect(color) {
  var existingSizes = getExistingSizesFromColor(color); // If there is only one size for the currently selected color, select that size

  if (existingSizes.length === 1) {
    var onlyApplicableSize = existingSizes[0];

    if (onlyApplicableSize !== state$1.getState().size) {
      var target = $sizeSwatchesOptions.filter(function (_index, el) {
        return el.value === onlyApplicableSize;
      }).get(0);
      onSizeSelect.bind(target)();
    }
  }

  state$1.updateState({
    color: color
  });
}; // Change cb to callback

var handleSizeSelect = function handleSizeSelect(callback) {
  state$1.onChange(function (_ref2) {
    var size = _ref2.size;
    return callback(size);
  }, function (state) {
    return [state.size];
  });
};

var onSizeSelect = function onSizeSelect() {
  state$1.updateState({
    // @ts-ignore
    size: jQuery(this).val(),
    selectedOption: this
  });
  resetMissingSizeInfo();
};

var onVariantSelect = function onVariantSelect(variant) {
  state$1.updateState({
    variant: variant
  });
  resetMissingSizeInfo();
};

var showMissingSizeInfo = function showMissingSizeInfo() {
  if (validationTextEl) {
    validationTextEl.textContent = PRODUCT_PAGE_COPY.SELECT_A_SIZE;
  }
};

var resetMissingSizeInfo = function resetMissingSizeInfo() {
  if (validationTextEl) {
    validationTextEl.textContent = '';
  }
};

var handleAddToCartAttemptWithNoVariant = function handleAddToCartAttemptWithNoVariant() {
  // Can't add to cart if no size is selected
  showMissingSizeInfo();
};
var init$4 = function init() {
  $sizeSwatchesOptions.on('click', onSizeSelect);
};

/**
 * @param {string} c
 */

var isFlagClass = function isFlagClass(c) {
  return (// IE doesn't support string#startsWith, so we are using a regex instead of polyfill
    c.match(new RegExp("^" + CSS_UTILITY_PREFIX + "bg")) || c.match(new RegExp("^" + CSS_UTILITY_PREFIX + "text(?:White|Black|Blue)")) || c.match(new RegExp("^" + CSS_UTILITY_PREFIX + "hidden"))
  );
};
/**
 * @typedef State
 * @property {Variant | null} variant
 * @property {boolean} isShown
 */

/** @type {State} */


var initialState$2 = {
  isShown: true,
  variant: null
};
var state$2 = createState(initialState$2);
/**
 * Updates product flags UI when variant changes
 * @param {Variant} variant
 */

var onVariantSelect$1 = function onVariantSelect(variant) {
  state$2.updateState({
    variant: variant
  });
};
var showProductFlags = function showProductFlags() {
  state$2.updateState({
    isShown: true
  });
};
var hideProductFlags = function hideProductFlags() {
  state$2.updateState({
    isShown: false
  });
};
/**
 * @param {Element} el
 * @param {string[]} classes
 */

var removeClasses = function removeClasses(el) {
  for (var _len = arguments.length, classes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    classes[_key - 1] = arguments[_key];
  }

  return classes.forEach(function (c) {
    return el.classList.remove(c);
  });
};
/**
 * @param {Element} el
 * @param {string[]} classes
 */


var addClasses = function addClasses(el) {
  for (var _len2 = arguments.length, classes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    classes[_key2 - 1] = arguments[_key2];
  }

  return classes.forEach(function (c) {
    return el.classList.add(c);
  });
};
/**
 * Updates the DOM to match the state
 * @param {State} state
 */


var render$2 = function render(_ref) {
  var variant = _ref.variant,
      isShown = _ref.isShown;
  var product = window.productJSON;
  var isOnSale = variant ? variant.compare_at_price > variant.price : product.compare_at_price > product.price;
  var productFlagEls = document.querySelectorAll("." + JS_PREFIX + "ProductFlag[data-flag=\"{ product.id }\"]");
  if (!productFlagEls) return;
  /**
   * Updates the flag with the updated text and css classes
   * @param {string | null} label The new text for the flag
   * @param {string} newClasses The css classes to apply to the flag
   */

  var updateFlag = function updateFlag(label, newClasses) {
    return productFlagEls.forEach(function (el) {
      var classesToRemove = _toConsumableArray(el.classList).filter(isFlagClass);

      removeClasses.apply(void 0, [el].concat(_toConsumableArray(classesToRemove)));
      if (newClasses) addClasses.apply(void 0, [el].concat(_toConsumableArray(newClasses.split(/\s+/g))));
      if (!isShown || !label) el.classList.add(IS_HIDDEN_CLASS);
      el.innerHTML = label;
    });
  }; // IF YOU UPDATE THIS
  // You must also update the corresponding liquid code for server-render
  // ./snippets/product-flag.liquid
  // Last call flag needs to take priority over other flags


  if (isOnSale) {
    updateFlag('Sale', 'de-u-bgRed de-u-textWhite');
  } else if (product.tags.includes('Innovation')) {
    updateFlag('Innovation', 'de-u-bgLime de-u-textBlack');
  } else if (product.tags.includes('new')) {
    updateFlag('New Release', 'de-u-bgBlue de-u-textWhite');
  } else {
    updateFlag(null, ''); // The flag will hide
  }
};

state$2.onChange(render$2);

// @ts-check
var videojs = window.videojs; // 960 roughly equates to the media query variable $breakpoint-lg

var LARGE_BREAKPOINT = 960; // When element is within viewport

var IS_INTERSECTING = CSS_PREFIX + "is-intersecting"; // Create array for player IDs

var players = []; // Create array for error video IDs

var errorVideoIds = [];
var $videoCarousel = jQuery('.js-de-slick--videos');
var $thumbnailCarousel = jQuery('.js-de-slick--videos-thumbnails');
/** -- Helper functions -- */

/**
 * Handle all players' play event
 *
 * @param {Event} event The handler event object
 */

var onPlay = function onPlay(event) {
  // Determine which player the event is coming from
  var id =
  /** @type {HTMLElement} */
  event.target.id; // Loop through the array of players

  for (var i = 0; i < players.length; i++) {
    // Get the player(s) that did not trigger the play event
    if (players[i].id() !== id) {
      // Pause the other player(s)
      videojs(players[i].id()).pause();
    }
  }
};
/**
 * Track all players' errors or error events
 *
 * @param {string} videoId - The ID of the video in error
 */


var trackVideosWithErrors = function trackVideosWithErrors(videoId) {
  // Build the product URL
  var productURL = window.location.host + window.location.pathname; // Send an event to Google Analytics, only one per broken video

  if (!errorVideoIds.includes(videoId)) {
    window.dataLayer.push({
      event: 'video-is-broken',
      videoId: videoId,
      productURL: productURL
    });
    errorVideoIds.push(videoId);
  }
};
/**
 * Return a trimmed version of the video player's `referenceId`
 * @param {string} referenceId
 */


var trimVideoReferenceId = function trimVideoReferenceId(referenceId) {
  return referenceId.replace(/ref:|_1/g, '').trim();
};
/**
 * Get a video id from a video error event
 *
 * @param {HTMLElement} videoEl - A video error event
 * @returns {string} - The video's id
 */


var getIDFromVideoElement = function getIDFromVideoElement(videoEl) {
  return trimVideoReferenceId(videoEl.dataset.videoId);
};
/**
 * Get the first video player
 *
 * @returns {Object|null}
 */


var getFirstVideoPlayer = function getFirstVideoPlayer() {
  return players[0] && 'id' in players[0] ? videojs(players[0].id()) : null;
};
/**
 * Control the first video player
 *
 * @param {'play' | 'pause'} action
 */


var controlFirstVideoPlayer = function controlFirstVideoPlayer(action) {
  var player = getFirstVideoPlayer();
  player && player[action]();
};
/**
 * Play the first video player
 */


var pauseFirstVideoPlayer = function pauseFirstVideoPlayer() {
  return controlFirstVideoPlayer('pause');
};
/**
 * Pause the first video player
 */


var playFirstVideoPlayer = function playFirstVideoPlayer() {
  return controlFirstVideoPlayer('play');
};
/** -- Page load setup -- */
// Load poster images into DOM for slick slider navigation


jQuery(window).on('load', function () {
  var $posterImages = jQuery('.js-de-slick--videos .vjs-poster');
  $posterImages.each(function (index) {
    var count = index + 1;
    jQuery(".js-de-slick--videos-thumbnails .js-de-AdditionalVideos-thumb-" + count).attr('src', jQuery(this).css('background-image').replace(/^url\(['"](.+)['"]\)/, '$1'));
  }); // Create carousel with videos

  $videoCarousel.slick({
    asNavFor: $thumbnailCarousel,
    arrows: false,
    swipe: false
  }); // Pause video on current slide before slide change

  $videoCarousel.on('beforeChange', function (event, slick, currentSlide, nextSlide) {
    if (currentSlide !== nextSlide && videojs) {
      // Pause video (currentSlide+1 to skip over square video, which is first element in players[])
      videojs(players[currentSlide + 1].id()).pause();
    }
  }); // Create carousel with video thumbnails

  $thumbnailCarousel.slick({
    slidesToShow: 4,
    slidesToScroll: 1,
    asNavFor: $videoCarousel,
    focusOnSelect: true,
    swipeToSlide: true,
    touchThreshold: 30
  });
});
/** -- Video Initialization -- */

var initializeVideoJS = function initializeVideoJS() {
  videojs = window.videojs;
  var $toggleButton = jQuery('.js-de-toggle-media');
  var $viewImagesCTA = jQuery('.js-de-view-images');
  var $watchVideoCTA = jQuery('.js-de-watch-video');
  var $galleryVideo = jQuery('.js-de-galleryVideo');
  var $imageCount = jQuery('.js-de-ProductGallery-count');

  var switchToImages = function switchToImages() {
    // Remove Video, switch to Images
    $toggleButton.removeClass('js-de-toggle');
    $watchVideoCTA.removeClass('de-u-hidden');
    $viewImagesCTA.addClass('de-u-hidden');
    $galleryVideo.addClass('de-u-hidden');
    showProductFlags();
    $imageCount.removeClass('de-u-hidden'); // Pause Video

    pauseFirstVideoPlayer();
  };

  var switchToVideo = function switchToVideo() {
    // Add Video
    $toggleButton.addClass('js-de-toggle');
    hideProductFlags();
    $imageCount.addClass('de-u-hidden');
    $viewImagesCTA.removeClass('de-u-hidden');
    $watchVideoCTA.addClass('de-u-hidden');
    $galleryVideo.removeClass('de-u-hidden'); // Play Video

    playFirstVideoPlayer();
  };

  $swatches.on('ColorSwatches:select', switchToImages); // Attach click event to 'Watch Videos' button to toggle between video and image

  $toggleButton.click(function () {
    if ($toggleButton.hasClass('js-de-toggle')) {
      switchToImages();
    } else {
      switchToVideo();
    }
  }); // Video Player Keys

  var videoPlayerKeys = Object.keys(videojs.getPlayers()); // +++  Determine the available player IDs +++//

  for (var x = 0; x < videoPlayerKeys.length; x++) {
    // Assign the player name to setPlayer
    var setPlayer = videoPlayerKeys[x]; // Define the ready event for the player

    videojs(setPlayer).ready(function () {
      // Assign this player to a variable
      var myPlayer = this;
      var videoLoadError = myPlayer.error && myPlayer.error() && myPlayer.error().code;
      var referenceId = myPlayer.mediainfo && myPlayer.mediainfo.referenceId && trimVideoReferenceId(myPlayer.mediainfo.referenceId); // Assign and event listener for play event

      myPlayer.on('play', onPlay); // Push the player to the players array

      players.push(myPlayer); // Handle videos that don't work on page load

      if (videoLoadError && referenceId) {
        trackVideosWithErrors(referenceId);
      } // Assign an event listener for a video player error event


      myPlayer.on('error', function (event) {
        trackVideosWithErrors(getIDFromVideoElement(
        /** @type {HTMLElement} */
        event.target));
      });
    });
  }
  /**
   * Watch for window resize event (debounced), pause gallery video
   */


  var timeout = null;
  jQuery(window).resize(function () {
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      if (jQuery(window).width() >= LARGE_BREAKPOINT) {
        // Pause Video
        pauseFirstVideoPlayer();
        showProductFlags();
      }
    }, 250);
  });
  /**
   * Determine when element is within viewport
   * Confirm IntersectionObserver is available on the global object
   */

  if (window.IntersectionObserver) {
    /**
     * Trigger function when a video player componenet is within viewport
     * @see IntersectionObserver https://css-tricks.com/a-few-functional-uses-for-intersection-observer-to-know-when-an-element-is-in-view/
     */
    var observerOptions = {
      rootMargin: "0px 0px -" + $videoCarousel.height() + "px 0px"
    }; // Toggle class that shows or hides controller bar/play button

    var handleObserver = function handleObserver(entries) {
      return entries.forEach(function (entry) {
        return entry.isIntersecting ? entry.target.classList.add(IS_INTERSECTING) : entry.target.classList.remove(IS_INTERSECTING);
      });
    }; // Create new Observer instance


    var observer = new IntersectionObserver(handleObserver, observerOptions); // Add a watcher to each video player component

    $videoCarousel.each(function (index, videoElement) {
      return observer.observe(videoElement);
    });
  }
};

if (videojs) {
  initializeVideoJS();
} else {
  // Test if video carousel exists
  var script = document.querySelector("." + JS_PREFIX + "brightcove-script");

  if (script) {
    script.addEventListener('load', function () {
      if (window.videojs) {
        initializeVideoJS();
      }
    });
  }
}

/**
 * Module-specific constants
 */

var ACCORDION_SELECTOR = "." + JS_PREFIX + "Accordion";
var ACCORDION_HEADER_SELECTOR = ACCORDION_SELECTOR + "-header";
var CLICK_EVENT = 'click';
/**
 * Handler for when an accordion header button is clicked
 *
 * @this accordionHeaderButton The triggered button element
 */

var onButtonClick = function onButtonClick() {
  var accordion = this.closest(ACCORDION_SELECTOR);

  if (accordion) {
    var currentToggleState = accordion.classList.toggle(IS_OPEN);
    this.setAttribute('aria-expanded', String(currentToggleState));
  }
};
/**
 * Initializes functionality by setting up event binding
 */


var init$5 = function init() {
  document.querySelectorAll(ACCORDION_HEADER_SELECTOR).forEach(function (element) {
    return element.addEventListener(CLICK_EVENT, onButtonClick);
  });
};

function pushStockInfoToDataLayer(modelNumber) {
  window.vars.pushInventory = window.vars.pushInventory || [];
  window.vars.pushInventory.push(modelNumber);

  if (!window.inventories) {
    return false;
  }

  if (window.vars.pushInventory.length > 0) {
    var uniqueModels = _toConsumableArray(new Set(window.vars.pushInventory)); // console.log(uniqueModels);


    uniqueModels.forEach(function (model) {
      push(model);
    });
    window.vars.pushInventory.length = 0;
  }
}

function push(modelNumber) {
  // console.log('Pushing ' + modelNumber);
  // Determine stock status
  var simpleInventory = {};

  for (var _i = 0, _Object$entries = Object.entries(window.inventories); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _Object$entries[_i],
        key = _Object$entries$_i[0],
        obj = _Object$entries$_i[1];
    var modelNum = obj.title.split(' ');
    modelNum = modelNum[modelNum.length - 1];
    simpleInventory[modelNum] = simpleInventory[modelNum] || {
      stock: 0,
      stockStatus: []
    };
    var onlineInventory = obj.inventoryItem.delivery;

    if (onlineInventory) {
      simpleInventory[modelNum].stockStatus.push(onlineInventory.inStock > 0);
      simpleInventory[modelNum].stock += onlineInventory.available;
    } else {
      simpleInventory[modelNum].stockStatus.push(false);
    }
  }

  var stockStatusArray = simpleInventory[modelNumber].stockStatus;
  var stockStatus = 'Not Available';

  if (stockStatusArray.every(function (item) {
    return item === true;
  })) {
    stockStatus = 'Fully Available';
  } else if (stockStatusArray.some(function (item) {
    return item === true;
  })) {
    stockStatus = 'Partially Available';
  }

  window.vars.productStockInfo = window.vars.productStockInfo || {};
  window.vars.productStockInfo.dynamic = {
    'Model Number': modelNumber,
    'Stock Status': stockStatus
  };
  var event = {
    'event': 'stockLevel'
  };
  var stockEventPayload = Object.assign({}, window.vars.productStockInfo.static, window.vars.productStockInfo.dynamic, event); // console.log(stockEventPayload);

  dataLayer.push(stockEventPayload);
}

var demoInventory = {
  id: 'demo',
  locations: [],
  stateLocations: [],
  delivery: {},
  favStore: window.vars.favStore,
  state: null,
  code: JSON.parse(localStorage.getItem('state_code')) || null,
  collapsed: true
};
var emptyData = {
  favStore: window.vars.favStore
};
var storesSort = window.masterStores.map(function (a) {
  return a.name;
});

var militaryTo12hFormat = function militaryTo12hFormat(time) {
  var militaryHours = Number(time.substring(0, 2));
  var militaryMinutes = time.substring(2, 4);
  var hours = (militaryHours + 11) % 12 + 1;
  var amOrPm = militaryHours < 12 || militaryHours === 24 ? 'am' : 'pm';
  return hours + ":" + militaryMinutes + amOrPm;
};

function addMasterStoresData(inventoryItem, state) {
  inventoryItem.locations = inventoryItem.locations.filter(function (loc) {
    return storesSort.indexOf(loc.name) !== -1;
  });
  var onlineItem = inventoryItem.locations.filter(function (store) {
    return window.onlineInventoryStores.indexOf(store.name) !== -1;
  });
  inventoryItem.online = onlineItem;
  var duplicateStores = window.masterStores.filter(function (loc) {
    return loc.duplicate;
  });
  duplicateStores.forEach(function (loc) {
    var alreadyAdded = inventoryItem.locations.find(function (obj) {
      return obj.name === loc.name;
    });

    if (!alreadyAdded) {
      var thisLoc = inventoryItem.locations.find(function (obj) {
        return obj.name === loc.duplicate;
      });

      if (thisLoc) {
        var duplicateLoc = JSON.parse(JSON.stringify(thisLoc));
        duplicateLoc.name = loc.name;
        inventoryItem.locations.push(duplicateLoc);
      }
    }
  });

  var _loop = function _loop(i) {
    var masterLoc = window.masterStores[i];
    var thisLoc = inventoryItem.locations.find(function (obj) {
      return obj.name === masterLoc.name;
    }); // Check the current weekday to show Genesus store hours on product page

    weekday = new Date().getDay();
    openHour = masterLoc['hours_' + (masterLoc.is_same_hours_weekly ? 0 : weekday) + '_open'];
    closeHour = masterLoc['hours_' + (masterLoc.is_same_hours_weekly ? 0 : weekday) + '_close'];

    if (openHour === '0000' && closeHour === '0000') {
      weekday = weekday + 1;

      if (weekday > 6) {
        weekday = 0;
      }

      openHour = masterLoc['hours_' + weekday + '_open'];
      closeHour = masterLoc['hours_' + weekday + '_close']; //console.log(weekday);
    } // Create abbreviation for each weekday & get the abbreviation for the current day


    days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];

    for (d = 0; d < 7; d++) {
      day = days[d];

      if (weekday === d) {
        nameDay = day;
      }
    }

    if (thisLoc) {
      thisLoc.title = masterLoc.title;

      if (thisLoc.available > 0) {
        thisLoc.ready = '<span>' + masterLoc.ready + '</span>';
      } else {
        thisLoc.ready = '<span>Unavailable</span>';
      }

      if (thisLoc.available > 2) {
        thisLoc.availability = {
          class: 'in',
          text: 'In Stock'
        };
      } else if (thisLoc.available > 0) {
        thisLoc.availability = {
          class: 'low',
          text: 'Low Stock'
        };
      } else {
        thisLoc.availability = {
          class: 'out',
          text: 'Out of Stock'
        };
      }

      variantWeight = window.vars.selectedVariant.weight; // If a product weight is higher than 22kg, then the item not available for C&C at Genesis store

      if (thisLoc.name === 'Genesis' && variantWeight >= 22000) {
        thisLoc.availability = {
          class: 'out',
          text: 'Out of Stock'
        };
      }

      formattedOpenHour = militaryTo12hFormat(openHour);
      formattedCloseHour = militaryTo12hFormat(closeHour);
      thisLoc.is_same_hours_weekly = masterLoc.is_same_hours_weekly;

      if (thisLoc.is_same_hours_weekly === true) {
        thisLoc.hours = 'Open ' + formattedOpenHour + '-' + formattedCloseHour;
      } else {
        thisLoc.hours = nameDay + ' ' + formattedOpenHour + '-' + formattedCloseHour;
      }

      thisLoc.street1 = masterLoc.street1;
      thisLoc.city = masterLoc.city;
      thisLoc.zip = masterLoc.zip;
      thisLoc.state = masterLoc.state;
      thisLoc.tooltip_hours = masterLoc.tooltip_hours;
      thisLoc.fullHours = masterLoc.fullHours;
      thisLoc.announcement = masterLoc.announcement;
    } else {
      var _thisLoc2;

      var _formattedOpenHour = militaryTo12hFormat(openHour);

      var _formattedCloseHour = militaryTo12hFormat(closeHour);

      if (masterLoc.is_same_hours_weekly === true) {
        thisLoc_hours = 'Open ' + _formattedOpenHour + '-' + _formattedCloseHour;
      } else {
        thisLoc_hours = nameDay + ' ' + _formattedOpenHour + '-' + _formattedCloseHour;
      }

      var _thisLoc = (_thisLoc2 = {
        name: masterLoc.name,
        title: masterLoc.title,
        ready: 'Unavailable',
        availability: {
          class: 'out',
          text: 'Out of Stock'
        },
        hours: thisLoc_hours,
        tooltip_hours: masterLoc.tooltip_hours,
        fullHours: masterLoc.fullHours,
        announcement: masterLoc.announcement,
        street1: masterLoc.street1,
        city: masterLoc.city,
        zip: masterLoc.zip,
        state: masterLoc.state
      }, _thisLoc2["tooltip_hours"] = masterLoc.tooltip_hours, _thisLoc2["fullHours"] = masterLoc.fullHours, _thisLoc2["announcement"] = masterLoc.announcement, _thisLoc2);

      inventoryItem.locations.push(_thisLoc);
    }
  };

  for (var i = window.masterStores.length - 1; i >= 0; i--) {
    var weekday;
    var openHour;
    var closeHour;
    var weekday;
    var weekday;
    var openHour;
    var closeHour;
    var days;
    var d;
    var day;
    var nameDay;
    var variantWeight;
    var formattedOpenHour;
    var formattedCloseHour;
    var thisLoc_hours;
    var thisLoc_hours;

    _loop(i);
  }

  inventoryItem.locations.sort(function (a, b) {
    return storesSort.indexOf(a.name) > storesSort.indexOf(b.name) ? 1 : storesSort.indexOf(b.name) > storesSort.indexOf(a.name) ? -1 : 0;
  });
  inventoryItem.locations = inventoryItem.locations.filter(function (loc) {
    return window.ccStores.indexOf(loc.name) !== -1;
  });
  inventoryItem.stateLocations = inventoryItem.locations.filter(function (loc) {
    return !(state && state.length) || state.indexOf(loc.state) !== -1;
  });

  if (window.vars.favStore) {
    inventoryItem.favStore = window.vars.favStore;
    inventoryItem.locations.sort(function (a, b) {
      return window.vars.favStore.name === b.name ? 1 : window.vars.favStore.name === a.name ? -1 : 0;
    });
  }

  return inventoryItem;
}
/**
 * Attach listeners to open collapse elements
 */


var initInventoryLocations = function initInventoryLocations() {
  document.addEventListener('tomitProductLoaded', function (e, data) {
    // alert('PRODUCT LOADED');
    window.inventories = window.tomitProductInventoryInfo.activeProduct.variants;

    for (var i = window.vars.productJSON.variants.length - 1; i >= 0; i--) {
      var v = window.vars.productJSON.variants[i];

      if (window.inventories[v.id]) ; else {
        window.inventories[v.id] = {
          id: v.id,
          sku: v.sku,
          title: v.title,
          inventoryItem: {
            id: "1",
            locations: []
          }
        };
      }
    }

    Object.values(window.inventories).forEach(function (variant) {
      var locs = variant.inventoryItem.locations;
      var onlineInventoryLocs = locs.filter(function (loc) {
        return window.onlineInventoryStores.indexOf(loc.name) !== -1;
      });
      var onlineInventoryItem;

      if (onlineInventoryLocs.length > 0) {
        var totalAvailable = onlineInventoryLocs.map(function (loc) {
          return loc.available;
        }).reduce(function (a, b) {
          return a + b;
        }, 0);
        onlineInventoryItem = {
          name: 'Delivery',
          available: totalAvailable,
          inStock: totalAvailable > 0 ? 1 : 0,
          hours: '2-6 day delivery in Metro areas',
          availability: {
            class: totalAvailable > 2 ? 'in' : totalAvailable > 0 ? 'low' : 'out',
            text: totalAvailable > 2 ? 'In Stock' : totalAvailable > 0 ? 'Low Stock' : 'Out of Stock'
          },
          ready: totalAvailable > 0 ? 'Available for delivery' : 'Unavailable for delivery'
        };
      } else {
        onlineInventoryItem = {
          name: 'Delivery',
          available: 0,
          inStock: 0,
          ready: 'Unavailable for delivery',
          availability: {
            class: 'out',
            text: 'Out of Stock'
          },
          hours: '2-6 day delivery in Metro areas'
        };
      }

      variant.inventoryItem.delivery = onlineInventoryItem;
    });

    for (var _i = window.vars.productJSON.variants.length - 1; _i >= 0; _i--) {
      var vId = window.vars.productJSON.variants[_i].id;
      var vInv = window.inventories[vId].inventoryItem;
      var onlineAvailability = vInv.delivery;
      window.vars.productJSON.variants[_i].cc = false;

      if (onlineAvailability.inStock) {
        window.vars.productJSON.variants[_i].cc = false;
      } else if (vInv.locations.length > 0) {
        window.vars.productJSON.variants[_i].cc = true;

        if (window.vars.selectedVariant && vId === window.vars.selectedVariant.id) {
          if (jQuery('#AddToCartText').text() === 'Add to Cart') {
            jQuery('#AddToCartText').text('Click & Collect');
          }
        }
      }
    }

    if (window.vars.selectedVariant === null) {
      window.inventoryLocationsDisplay.changeVariant(null);
      var currentModel = jQuery('.js-de-ModelCode-text').text(); //console.log('push the stock');

      pushStockInfoToDataLayer(currentModel);
    } else {
      window.inventoryLocationsDisplay.changeVariant(window.vars.selectedVariant.id);
      var titleParts = window.vars.selectedVariant.title.split(' ');
      var currentModel = titleParts[titleParts.length - 1]; //console.log('push the stock');

      pushStockInfoToDataLayer(currentModel);
    }
  });
  window.inventoryLocationsDisplay = new Vue({
    el: '#locsContainer',
    data: JSON.parse(JSON.stringify(demoInventory)),
    methods: {
      changeWholeData: function changeWholeData(newData) {
        var _this = this;

        var extraData = {
          state: newData.state || this.$data.state,
          collapsed: newData.collapsed || this.$data.collapsed,
          code: newData.code || this.$data.code
        };
        newData = Object.assign({}, newData, extraData);
        Object.keys(this.$data).forEach(function (key) {
          return _this.$data[key] = null;
        });
        Object.entries(newData).forEach(function (entry) {
          return Vue.set(_this.$data, entry[0], entry[1]);
        });
      },
      changeVariant: function changeVariant(variant) {
        if (!window.inventories) {
          Vue.set(this.$data, 'id', 'error');
        } else if (variant === null) {
          this.changeWholeData(emptyData);
        } else {
          this.changeWholeData(addMasterStoresData(window.inventories[variant].inventoryItem, this.$data.state));
        }
      },
      evaluateState: function evaluateState() {
        var error = jQuery('#postcodeError');
        var message = jQuery('#deliveryLocationMessage');
        var code = jQuery('#deliveryLocation');
        var stateInput = jQuery('[name="state"]');
        var rawCode = stateInput.val();
        var fullCode = rawCode;
        console.log(state, rawCode);

        if (this.isAustralianState(rawCode)) {
          var state = [];
          var postcode = parseInt(rawCode);

          if (postcode >= 1000 && postcode <= 1999 || postcode >= 2000 && postcode <= 2599 || postcode >= 2619 && postcode <= 2899 || postcode >= 2921 && postcode <= 2999) {
            state.push('NSW');
            state.push('ACT');
            fullCode += ' (NSW/ACT)';
          } else if (postcode >= 200 && postcode <= 299 || postcode >= 2600 && postcode <= 2618 || postcode >= 2900 && postcode <= 2920) {
            state.push('NSW');
            state.push('ACT');
            fullCode += ' (NSW/ACT)';
          } else if (postcode >= 3000 && postcode <= 3999 || postcode >= 8000 && postcode <= 8999) {
            state.push('VIC');
            fullCode += ' (VIC)';
          } else if (postcode >= 4000 && postcode <= 4999 || postcode >= 9000 && postcode <= 9999) {
            state.push('QLD');
            fullCode += ' (QLD)';
          } else if (postcode >= 5000 && postcode <= 5999) {
            state.push('SA');
            fullCode += ' (SA)';
          } else if (postcode >= 6000 && postcode <= 6999) {
            state.push('WA');
            fullCode += ' (WA)';
          } else if (postcode >= 7000 && postcode <= 7799 || postcode >= 7800 && postcode <= 7999) {
            state.push('TAS');
            fullCode += ' (TAS)';
          } else if (postcode >= 800 && postcode <= 899 || postcode >= 900 && postcode <= 999) {
            state.push('NT');
            fullCode += ' (NT)';
          }

          if (state.length > 0) {
            code.text(fullCode);
            message.slideDown();
            error.slideUp();
            this.$data.state = state;
            this.$data.collapsed = false;
            localStorage.setItem('state_array', JSON.stringify(state));
            localStorage.setItem('state_code', JSON.stringify(rawCode));

            if (window.vars.selectedVariant === null) {
              this.changeVariant(null);
            } else {
              this.changeVariant(window.vars.selectedVariant.id);
            }
          } else {
            error.slideDown();
          }
        } else {
          error.slideDown();
        }
      },
      isAustralianState: function isAustralianState(postcode) {
        var regex = /^\d{4}$/g;
        return postcode.match(regex);
      },
      clearCode: function clearCode() {
        Vue.set(this.$data, 'code', null);
        Vue.set(this.$data, 'state', null);

        if (window.vars.selectedVariant === null) {
          this.changeVariant(null);
        } else {
          this.changeVariant(window.vars.selectedVariant.id);
        }
      }
    }
  });
  jQuery('[name="state"]').on('keypress', function (e) {
    if (e.which == 13) {
      e.preventDefault();
      jQuery('#checkState').click();
    }
  });
};
/**
 * Put all functions that need to run on product-page load here
 */


var init$6 = function init() {
  initInventoryLocations();
};

/* eslint-disable */
var validationTextEl$1 = document.querySelector('.js-de-validation-message');
var variantInventory = window.firstVariant;
variantInventory.tagged_bis_hidden = window.vars.productJSON.tags.includes('bis-hidden');
variantInventory.is_size_selected = false;

var initVueATC = function initVueATC() {
  window.vueATC = new Vue({
    el: '#addToCartButton',
    data: variantInventory,
    methods: {
      changeWholeData: function changeWholeData(newData) {
        var _this = this;

        var extraData = {
          tagged_bis_hidden: window.vars.productJSON.tags.includes('bis-hidden'),
          is_size_selected: newData && newData.option2 ? true : false
        };
        newData = Object.assign({}, newData, extraData);
        Object.keys(this.$data).forEach(function (key) {
          return _this.$data[key] = null;
        });
        Object.entries(newData).forEach(function (entry) {
          return Vue.set(_this.$data, entry[0], entry[1]);
        });
      },
      changeVariant: function changeVariant(variant) {
        var variantInventory = window.productJSON.variants.find(function (v) {
          return v.id === variant;
        });
        var variantLocationsInventory = (window.inventories || {})[variant];
        var calculatedInventory = variantLocationsInventory ? this.mutateWithLocations(variantInventory, variantLocationsInventory) : variantInventory;
        this.changeWholeData(calculatedInventory);
      },
      mutateWithLocations: function mutateWithLocations(variantInventory, variantLocationsInventory) {
        var mutatedInventory = variantInventory;
        var inventoryItem = variantLocationsInventory.inventoryItem;
        var delivery = inventoryItem.delivery,
            locations = inventoryItem.locations,
            online = inventoryItem.online;
        /*
          'locations' from itemInventory already only account for stores which have Click & Collect enabled in Settings
          This checks whether the specific product is available in any of those locations, or in delivery/online and sets availability accordingly.
        */
        // Filter locations that have at least one available product in stock

        var filteredLocations = locations.filter(function (loc) {
          return loc.available > 0;
        }); // const filteredOnline = online.filter(item => {
        //   return item.available > 0;
        // });
        // item is available if there is at least one stock in any location or delivery/online
        // mutatedInventory.available = (delivery.available > 0 || filteredLocations.length > 0 || filteredOnline.length > 0);

        mutatedInventory.available = filteredLocations.length > 0;
        return mutatedInventory;
      },
      showModal: function showModal(variantId, isEmailButton, event) {
        jQuery('.js-de-Drawer-toggle').data("drawer-action", ''); // Trying to add a product to cart without selecting a size

        if (!this.$data.is_size_selected) {
          event.preventDefault();
          validationTextEl$1.textContent = "Select a size";
          return;
        } // Trying to add a product to cart when variant doesn't exist


        var variant = window.productJSON.variants.find(function (v) {
          return v.id === variantId;
        });

        if (!variant) {
          event.preventDefault();
          validationTextEl$1.textContent = "Unavailable";
          return;
        } // Opens Back in Stock Popover Modal


        if (isEmailButton) {
          event.preventDefault();
          window.BISPopover.show({
            variantId: variantId
          });
          jQuery('#addToCartButton .js-de-Drawer-toggle').attr("data-drawer-action", '');
          var BISPopoverEl = document.querySelector('#BIS_frame');
          var BISPopoverEmailInputEl = BISPopoverEl.contentDocument.querySelector('#email_address');
          var customer = window.Shopify.customer;

          if (BISPopoverEmailInputEl && customer) {
            BISPopoverEmailInputEl.value = customer.email;
          }

          return;
        } else {
          jQuery('#addToCartButton .js-de-Drawer-toggle').attr("data-drawer-action", 'open');
        }
      }
    }
  });
};
/**
 * Put all functions that need to run on product-page load here
 */


var init$7 = function init() {
  initVueATC();
};

// @ts-check
/**
 * Reviews-specific values
 */

var CUSTOMER_REVIEW = 'CustomerReview';
/**
 * The CSS class on the button used to get more reviews
 */

var MORE_REVIEWS_BUTTON_CLASS = JS_PREFIX + "moreReviewsButton";
/**
 * The CSS class on the button used to get more reviews
 */

var MORE_REVIEWS_BUTTON_TEXT_CLASS = MORE_REVIEWS_BUTTON_CLASS + "-text";
/**
 * The CSS class on the button used to get more reviews
 */

var MORE_REVIEWS_BUTTON_LOADING_TEXT_CLASS = MORE_REVIEWS_BUTTON_CLASS + "-loadingText";
/**
 * The CSS class on the button used to get more reviews
 */

var REVIEWS_LOADING_CLASS = JS_PREFIX + "LoadingReviews";
/**
 * Timeout for delaying showing loading state after calls to the revies API
 */

var REVIEWS_LOADING_TIMEOUT = 200;
/**
 * The CSS class on a review block
 */

var REVIEW_CLASS = "" + JS_PREFIX + CUSTOMER_REVIEW;
/**
 * The CSS class on the reviews container block
 */

var REVIEWS_CONTAINER_CLASS = "" + JS_PREFIX + CUSTOMER_REVIEW + "s";
/**
 * The CSS class on a preloaded review block
 */

var REVIEW_PRELOADED_CLASS = "" + JS_PREFIX + CUSTOMER_REVIEW + "-preloaded";
/**
 * The CSS class on the reviews sort select
 */

var REVIEW_SORT_SELECT = "" + JS_PREFIX + CUSTOMER_REVIEW + "-sort";
/**
 * The CSS class on reviews rating elements (assigned a star-rating value)
 */

var REVIEW_FILTER = "" + JS_PREFIX + CUSTOMER_REVIEW + "-filter";
/** The CSS class on the element that displays the current filter if it exists */

var REVIEW_FILTER_STATUS = "" + JS_PREFIX + CUSTOMER_REVIEW + "-filterStatus";
/** The CSS class on the element within the filter status that shows the number of stars */

var REVIEW_FILTER_STAR_VALUE = "" + JS_PREFIX + CUSTOMER_REVIEW + "-filterStarValue";
/** The CSS class on the clear filter button */

var REVIEW_CLEAR_FILTER = "" + JS_PREFIX + CUSTOMER_REVIEW + "-clearFilter";
/** The CSS class on the review summary text (N out of 5 stars). This gets used as a clear button as well */

var REVIEW_SUMMARY_CLEAR_FILTER = JS_PREFIX + "ReviewSummary-starsSummary";
/**
 * The CSS ID on a reviews container block
 */

var REVIEWS_CONTAINER_SELECTOR = "" + CSS_PREFIX + CUSTOMER_REVIEW + "s";
/* ----- */

/**
 * Multiplier for converting ratings stars (1-5) to a percentage
 */

var STAR_RATING_PERCENTAGE_MULTIPLIER = 20;
/**
 * Base URL for querying the Decathlon Reviews API
 */

var REVIEWS_BASE_URL = 'https://reviews.decathlon.com/api/en_US/review/list';
/**
 * Base query parameters for the Decathlon Reviews API
 */

var REVIEWS_BASE_QUERY_PARAMS = {
  site: 1132,
  type: 1,
  // Origin is not a real parameter for the API.
  // We are using it to force the API to use a separate cache for separate domains.
  // Otherwise it will return the cached access-control-allow-origin header when you switch domains
  origin: location.origin
};
/**
 * Constants used for Handlebars partials
 */

var VERIFIED_PURCHASE_ICON_TEMPLATE_ID = 'verified_purchase_icon';
var VOTING_ICON_TEMPLATE_ID = 'helpful_icon';
var LOGO_WITHOUT_BACKGROUND_TEMPLATE_ID = 'logo_no_bg';
/**
 * Element dataset variables
 */

/**
 * Star rating value from rows in the review matrix, for filtering
 */

var STAR_RATING = 'starRating';

/**
 * The model code and, total pre-rendered reviews value, and reviews-per-page value
 * are retrieved from a data attribute in the UI.
 * Model code is necessary for calling the Reviews API
 */

var jsReviewsEl = document.querySelector("." + REVIEWS_CONTAINER_CLASS) || {
  dataset: {}
};
var totalPrerenderedReviews = jsReviewsEl.dataset.totalPrerenderedReviews;
var modelCode = jsReviewsEl.dataset.modelCode;
var reviewsPerPage = jsReviewsEl.dataset.reviewsPerPage;
/**
 * Confirm that the total number of pre-rendered reviews is (a number greater than 0 and) evenly divisible by
 * the reviews-per-page number (also a number, greater than 0)
 * If this value is false, it will stop attempts to do paginated API requests (see below)
 */

var validReviewNumbers = !isNaN(parseInt(totalPrerenderedReviews, 10)) && !isNaN(parseInt(reviewsPerPage, 10)) && totalPrerenderedReviews > 0 && reviewsPerPage > 0 && totalPrerenderedReviews % reviewsPerPage === 0;

/**
 * Queries to get different sets of reviews
 */
/**
 * Get the NodeList of server-rendered reviews (this will remain static,
 * so no need for a function)
 */

var prerenderedReviewList = document.querySelectorAll("." + REVIEW_PRELOADED_CLASS);
/**
 * Get all reviews, loaded from the API or pre-rendered
 * @returns A NodeList of all reviews
 */

var getAllReviews = function getAllReviews() {
  return document.querySelectorAll("." + REVIEW_CLASS);
};
/**
 * Get all reviews that have been loaded from the API (i.e., were not pre-rendered on page load)
 * @returns A NodeList of all non-preloaded reviews
 */

var getLoadedReviews = function getLoadedReviews() {
  return document.querySelectorAll("." + REVIEW_CLASS + ":not(." + REVIEW_PRELOADED_CLASS + ")");
};
/**
 * Get the sort select
 */

/** @type HTMLSelectElement */

var reviewsSortSelect = document.querySelector("." + REVIEW_SORT_SELECT);

// @ts-check
var originalReviewsSortFilterState = {
  // The default sort, to be used on page load
  sort: 'createdAt',
  page: 1,
  // The default sort direction, to be used on page load
  direction: 'desc',
  // The ratings filter, which is none on page load
  notes: ''
};
/**
 * This will be used for holding state to control load/sort/filter interactions
 * @type {ReviewsState}
 */

var originalReviewsState = Object.assign({}, originalReviewsSortFilterState, {
  reviewsPerPage: reviewsPerPage,
  // The number of pre-rendered reviews will be set when the main script runs
  prerenderedReviews: 0,
  loading: false,
  isMoreReviewRequest: false
});

var _createState = createState(originalReviewsState),
    setReviewsState = _createState.updateState,
    getReviewsState = _createState.getState,
    onReviewsStateChange = _createState.onChange;
var setPrerenderedReviewsOnState = function setPrerenderedReviewsOnState() {
  setReviewsState({
    prerenderedReviews: prerenderedReviewList.length
  });
};
/**
 * Checks whether the `sort`, `direction`, and `notes` values
 * have been set back to the original (default) state
 * The default state is
 * 1. 'sort':'createdAt'
 * 2. 'direction':'desc'
 * 3. 'notes': '' (means this param to filter by rating, if passed, is ignored; same as not being set)
 * When this evaluates to true, the page will behave as it did on first load,
 * incrementally showing pre-rendered reviews until it needs to call to the API for more.
 * @returns {boolean}
 */

var getIsDefaultQuery = function getIsDefaultQuery() {
  var _getReviewsState = getReviewsState(),
      sort = _getReviewsState.sort,
      direction = _getReviewsState.direction,
      notes = _getReviewsState.notes;

  return originalReviewsState.sort === sort && originalReviewsState.direction === direction && originalReviewsState.notes === notes;
};
/**
 * Set up a query for getting filtered reviews
 * Resets query pagination, sort, and direction, takes in a `notes` (aka, rating) value for the next query
 * @param {string} notes - A value to use to query for reviews with a particular rating
 */

var setReviewsStateForFilter = function setReviewsStateForFilter(notes) {
  setReviewsState(Object.assign({}, originalReviewsSortFilterState, {
    notes: notes
  }));
};
var clearFilter = function clearFilter() {
  // Reset both filter and sort, per client request
  setReviewsState(originalReviewsSortFilterState);
};
/**
 * Set up a query for getting sorted reviews
 * Resets query pagination and notes (aka, ratings filter)
 * and sets sort and direction variables for the next query
 * @param {Object} params
 * @param {string | undefined} params.sort - Sort to use for next API query
 * @param {string | undefined} params.direction - Direction to use for next
 * API query
 */

var setReviewsStateForSort = function setReviewsStateForSort(_ref) {
  var sort = _ref.sort,
      direction = _ref.direction;
  setReviewsState(Object.assign({}, originalReviewsSortFilterState, {
    sort: sort,
    direction: direction
  }));
};

/**
 * Helpers for querying and displaying ratings and reviews
 */
/**
 * Add a ratings percentage value to each review object
 * @param {Object[]} [reviews=[]] Array of reviews data objects
 * @returns {Object[]} Modified reviews array
 */

var addRatingsPercentage = function addRatingsPercentage(reviews) {
  if (reviews === void 0) {
    reviews = [];
  }

  return reviews.map(function (review) {
    if (review.note) {
      // Multiply the note (a.k.a., rating, scale 1-5) by the multiplier to get a percentage value
      review.rating_percentage = review.note * STAR_RATING_PERCENTAGE_MULTIPLIER;
    }

    return review;
  });
};

// @ts-check

/**
 * Attempt to create a Date object from an ISO-format timestamp.
 * If the raw timestamp does not return a Date object,
 * try to add a colon in the offset portion of the string and
 * pass again to the Date constructor.
 * Meant to handle issues parsing timestamps from Shopify on iOS
 * @see https://stackoverflow.com/questions/6427204/date-parsing-in-javascript-is-different-between-safari-and-chrome#49138448
 * (Note that none of the referenced solutions seemed to work as desired)
 * @param {string} timestamp - An ISO-format timestamp
 * @returns {Date|null} - A JavaScript Date object or null if the
 * Date could not be created
 */
var createDateObject = function createDateObject(timestamp) {
  var date = new Date(timestamp);

  if (isNaN(date.getMonth())) {
    /**
     * Original timestamps are in the format "2018-09-12T08:52:30+0200"
     * If parsing fails, modTimestamp is set to have timezone
     * offset digits separated by a colon, e.g. "2018-09-12T08:52:30+02:00"
     */
    var modTimestamp = timestamp.replace(/([+-]\d{2})(\d{2})$/, '$1:$2');
    date = new Date(modTimestamp);
  }

  return isNaN(date.getMonth()) ? null : date;
};

// @ts-check
/**
 * A wrapper to check the existence of Handlebars before running code that expects it (an unchecked external gloabal defined in Rollup)
 * @param {function} callback A function to call if Handlebars exists
 * @returns {function} A function that takes any params and executes the callback, or a noop if Handlebars isn't available
 * @example handlebarsCheck(myFunction)([parameters])
 */

var handlebarsCheck = function handlebarsCheck(callback) {
  return Handlebars ? function (params) {
    callback(params);
  } : function () {
    console.error('Cannot load new reviews. Missing templating engine.');
    return false;
  };
};
/**
 * Closure for containing caching variables around the exported function, templateNewReviews
 */

var _templateNewReviews = function _templateNewReviews() {
  /**
   * Create naive cache for reused elements and variables used in templating
   */
  var reviewsContainerEl = null;
  var reviewsTplEl = null;
  var reviewsTemplateFn = null;
  var reviewsTemplateSource = null;
  /**
   * Function that takes in review data and uses a Handlebars compiled template function to
   * render a new set of reviews and insert them into the reviews container element
   * @param {Object[]} [reviews=[]] Review data retrieved from the reviews API
   * @returns (*) rendered HTML
   */

  return function (reviews) {
    if (reviews === void 0) {
      reviews = [];
    }

    /**
     * Get Handlebars templates and containers, used cached values when set
     */
    reviewsTplEl = reviewsTplEl || document.getElementById("" + REVIEWS_CONTAINER_SELECTOR + TEMPLATE_SUFFIX);
    reviewsContainerEl = reviewsContainerEl || document.getElementById("" + REVIEWS_CONTAINER_SELECTOR + CONTAINER_SUFFIX);
    /**
     * Compile the reviews template for use after getting new review data
     */

    reviewsTemplateSource = reviewsTemplateSource || reviewsTplEl && reviewsTplEl.innerHTML;
    reviewsTemplateFn = reviewsTemplateFn || reviewsTemplateSource && Handlebars.compile(reviewsTemplateSource);
    /**
     * If the template function or container are missing, just return
     */

    if (!(typeof reviewsTemplateFn === 'function') || !(reviewsContainerEl && typeof reviewsContainerEl.insertAdjacentHTML === 'function')) {
      throw new Error('We do not have a Handlebars templating function or a viable container for rendering.');
    }

    var newReviewsHTML = reviewsTemplateFn({
      reviews: addRatingsPercentage(reviews)
    });

    if (newReviewsHTML) {
      return reviewsContainerEl.insertAdjacentHTML('beforeend', newReviewsHTML);
    }

    throw new Error('Templating new reviews failed');
  };
};
/**
 * Exports the closured function with caching
 */


var templateNewReviews = _templateNewReviews();
/**
 * An initialization function for registering Handlebars partials and helpers
 */

var _handlebarsInit = function _handlebarsInit() {
  /**
   * Get elements for registering partials
   */
  var verifiedPurchaseIconTplEl = document.getElementById(ICON_PREFIX + "verifiedPurchase" + TEMPLATE_SUFFIX);
  var helpfulIconTplEl = document.getElementById(ICON_PREFIX + "helpful" + TEMPLATE_SUFFIX);
  var logoNoBgEl = document.getElementById(ICON_PREFIX + "logoNoBg" + TEMPLATE_SUFFIX);
  /**
   * Register handlebars helpers
   */

  /**
   * Output the wrapped markup if any of the conditions are true.
   * @params {*} Values to be tested for truthiness or falsiness
   * Example usage:
   * {{#if_or cond1 cond2 cond3}}
   *  <p>At least one is true</p>
   * {{/if_or}}
   */

  Handlebars.registerHelper('if_or', function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var options = args[args.length - 1];
    var vals = args.slice(0, -1);
    var truthy = vals.some(function (val) {
      return Boolean(val);
    });

    if (truthy) {
      return options.fn(this);
    }

    return options.inverse(this);
  });
  /**
   * Output a date timestamp formatted as d/m/YYYY
   * If the date object is not created, output an empty string
   * @params {string} timestamp - Timestamp string
   * Example usage:
   * {{date_format some_date_timestamp}}
   */

  Handlebars.registerHelper('date_format', function (timestamp) {
    var date = createDateObject(timestamp);
    return date ? date.getMonth() + 1 + "/" + date.getDate() + "/" + date.getFullYear() : '';
  });
  /**
   * Register handlebars partials (SVG icon snippets) to inject into JS-templated reviews
   */

  if (verifiedPurchaseIconTplEl) {
    Handlebars.registerPartial(VERIFIED_PURCHASE_ICON_TEMPLATE_ID, verifiedPurchaseIconTplEl.innerHTML);
  }

  if (helpfulIconTplEl) {
    Handlebars.registerPartial(VOTING_ICON_TEMPLATE_ID, helpfulIconTplEl.innerHTML);
  }

  if (logoNoBgEl) {
    Handlebars.registerPartial(LOGO_WITHOUT_BACKGROUND_TEMPLATE_ID, logoNoBgEl.innerHTML);
  }
};

var handlebarsInit = handlebarsCheck(_handlebarsInit);

function encode(obj, pfx) {
  var k,
      i,
      tmp,
      str = '';

  for (k in obj) {
    if ((tmp = obj[k]) !== void 0) {
      if (Array.isArray(tmp)) {
        for (i = 0; i < tmp.length; i++) {
          str && (str += '&');
          str += encodeURIComponent(k) + '=' + encodeURIComponent(tmp[i]);
        }
      } else {
        str && (str += '&');
        str += encodeURIComponent(k) + '=' + encodeURIComponent(tmp);
      }
    }
  }

  return (pfx || '') + str;
}

function toValue(mix) {
  if (!mix) return '';
  var str = decodeURIComponent(mix);
  if (str === 'false') return false;
  if (str === 'true') return true;
  return +str * 0 === 0 ? +str : str;
}

function decode(str) {
  var tmp,
      k,
      out = {},
      arr = str.split('&');

  while (tmp = arr.shift()) {
    tmp = tmp.split('=');
    k = tmp.shift();

    if (out[k] !== void 0) {
      out[k] = [].concat(out[k], toValue(tmp.shift()));
    } else {
      out[k] = toValue(tmp.shift());
    }
  }

  return out;
}

// @ts-check
/**
 * Get product review data for a product by model code
 * @param {Object} params
 * @param {string} params.modelCode A "model code" provided from DEC reviews
 * metafields
 * @param {Object} [params.queryParams] Extra query parameters to be added to
 * the request (optional)
 * @returns {Promise<Object>} The review data
 * @throws Will throw if the model code cannot be obtained from the template
 */

var fetchProductReviewsData = function fetchProductReviewsData(_ref) {
  var modelCode = _ref.modelCode,
      queryParams = _ref.queryParams;
  var params = Object.assign({
    offer: modelCode
  }, REVIEWS_BASE_QUERY_PARAMS, queryParams);
  return fetch(REVIEWS_BASE_URL + "?" + encode(params)).then(function (res) {
    return res.json();
  });
};
/**
 * Wrapper for requesting product review data
 * @param {Object} queryParams Additional parameters needed for a particular
 * request (e.g. sort, direction)
 * @returns {Promise<Object>} Data from the request for reviews
 */


var fetchReviews = function fetchReviews(queryParams) {
  /**
   * Check for necessary model code value before calling the API - also cannot
   * be an empty string
   */

  if (typeof modelCode === 'string' && modelCode) {
    return fetchProductReviewsData({
      modelCode: modelCode,
      queryParams: queryParams
    });
  }

  return Promise.reject(new Error('Missing a Model Code. Cannot get new review data.'));
};

// @ts-check
/**
 * Hide an element with utility class (display: none)
 * @param {Element | null | undefined} el
 */

var hideElement = function hideElement(el) {
  if (el) el.classList.add(IS_HIDDEN_CLASS);
};
/**
 * Remove hiding utility class from an element
 * @param {Element | null | undefined} el
 */

var showElement = function showElement(el) {
  if (el) el.classList.remove(IS_HIDDEN_CLASS);
};

var moreReviewsEl;
var defaultButtonTextEl;
var loadingButtonTextEl;
var loadingReviewsEl;
/** @type {HTMLElement[]} */

var reviewFilterEls;
/** @type {HTMLElement} */

var reviewFilterStatusEl;
/** @type {HTMLElement} */

var reviewFilterStarValueEl;
var loadingTimeout = null;
var wasLoading = false;
/**
 * Hides all reviews that aren't currently hidden
 * @TODO - A11y analysis here
 */

var hideAllReviews = function hideAllReviews() {
  return getAllReviews().forEach(function (review) {
    return review.classList.add(IS_HIDDEN_CLASS);
  });
};
/**
 * Unhide a set number of reviews (based on the `reviewsPerPage` value obtained
 * from the template)
 * @param {Object} params
 * @param {Object[]} [params.reviews=[]] Array of review elements
 * @param {boolean} [params.reset] Whether to reset to hiding all reviews before
 * showing the initial set
 */


var showMoreReviews = function showMoreReviews(_temp) {
  var _ref = _temp === void 0 ? {
    reviews: [],
    reset: false
  } : _temp,
      reviews = _ref.reviews,
      reset = _ref.reset;

  var reviewsToUpdate;

  if (reset) {
    hideAllReviews();
    reviewsToUpdate = reviews;
  } else {
    reviewsToUpdate = reviews
    /**
     * Filter out only reviews that are hidden, of the set that was passed in
     */
    .filter(function (review) {
      return review.classList.contains(IS_HIDDEN_CLASS);
    });
  }
  /**
   * Unhide only reviews up to the reviewsPerPage value (minus 1, zero-indexed)
   */


  reviewsToUpdate.some(function (review, index) {
    review.classList.remove(IS_HIDDEN_CLASS);
    return index === reviewsPerPage - 1;
  });
};
/**
 * Fully remove all reviews that were dynamically loaded (i.e., not pre-loaded
 * with the page)
 */


var clearLoadedReviews = function clearLoadedReviews() {
  getLoadedReviews().forEach(function (review) {
    return review.parentNode.removeChild(review);
  });
};
/**
 * Removes all dynamically loaded reviews and then hides
 * all reviews
 * To be used before fetching new reviews from the API, with
 * updated query parameters (e.g., on changing sort type)
 */


var resetReviews = function resetReviews() {
  clearLoadedReviews();
  hideAllReviews();
};
/**
 * Cancel a trigger to set loading state
 */


var cancelLoadingState = function cancelLoadingState() {
  if (loadingTimeout) clearTimeout(loadingTimeout);
  loadingTimeout = null;
};
/**
 * Set loading state after a timeout
 */


var setLoadingState = function setLoadingState() {
  cancelLoadingState();
  loadingTimeout = setTimeout(function () {
    return setReviewsState({
      loading: true
    });
  }, REVIEWS_LOADING_TIMEOUT);
};
/**
 * Fetches reviews from the API and renders the data to the page using a
 * Handlebars templating function
 * @param {boolean} [isMoreReviewRequest] - Is a request for additional reviews
 * (rather than a new sort or filter request)
 */


var loadNewReviews = function loadNewReviews(isMoreReviewRequest) {
  /**
   * Trigger a loading state, with timeout
   */
  setLoadingState();
  /**
   * Set state to reflect whether this is a request for additional reviews, or
   * a sort or filter
   */

  setReviewsState({
    isMoreReviewRequest: Boolean(isMoreReviewRequest)
  });
  /**
   * Get the list of all reviews currently rendered (dynamically loaded and
   * server-rendered)
   */

  var renderedReviewList = getAllReviews();
  /**
   * Get values currently registered on the state object
   * `prerenderedReviews`, `sort`, `direction`, and `notes`
   * won't be redefined before making a request
   * `page` may be redefined, so assign as a `let`
   */

  var currentState = getReviewsState();
  var prerenderedReviews = currentState.prerenderedReviews,
      sort = currentState.sort,
      direction = currentState.direction,
      notes = currentState.notes;
  var page = currentState.page;
  /**
   * If there are server-rendered reviews on the page, and not yet any
   * dynamically loaded reviews, set the `reviewsState` object, page value for
   * the upcoming API call.
   * This number will be the total number of pre-rendered reviews divided
   * by the default paginated value (used in every API call), plus one
   * (the next page)
   */

  if (getIsDefaultQuery() && prerenderedReviews > 0 && renderedReviewList.length === prerenderedReviews) {
    /**
     * Set page to a new value,
     * then update the state's `page` value
     */
    page = prerenderedReviews / reviewsPerPage + 1;
    setReviewsState({
      page: page
    });
  }
  /**
   * Get more reviews from the API to display, setting the page value for the call
   * Set the query parameter (nb) for number of reviews to request from the API
   * to the value from the template
   */


  fetchReviews({
    page: page,
    sort: sort,
    direction: direction,
    notes: notes,
    nb: reviewsPerPage
  }).then(function (data) {
    if (!data || !Array.isArray(data.items)) {
      throw new Error('Review data not successfully retrieved from the API');
    }

    if (!isMoreReviewRequest) {
      resetReviews();
    }

    return templateNewReviews(data.items);
  })
  /**
   * After successfully updating the template, increment `reviewsState.page`
   * for the subsequent request
   */

  /**
   * Unset loading state, no matter what happens
   * `Promise.finally` may not be available, so unset in both `then` and `catch`
   */
  .then(function () {
    cancelLoadingState();
    setReviewsState({
      page: getReviewsState().page + 1,
      loading: false
    });
  }).catch(function (error) {
    console.error(error);
    cancelLoadingState();
    setReviewsState({
      loading: false
    });
  });
};
/**
 * Handle getting more reviews
 *
 * On page load, this begins by displaying more (hidden) server-rendered reviews,
 * then transitions to loading more from the API.
 * On sorted and filtered lists, will need to immediately go to the API.
 * @param {Event} event
 */

var moreReviewsRequestHandler = function moreReviewsRequestHandler(event) {
  event.preventDefault(); // Convert the prerenderedReviewList to an Array for running Array helpers on the NodeList

  var prerenderedReviewListArray = _toConsumableArray(prerenderedReviewList); // Get the number of visible, server-rendered reviews


  var visiblePrerenderedReviews = prerenderedReviewListArray.filter(function (review) {
    return !review.classList.contains(IS_HIDDEN_CLASS);
  }).length;
  /**
   * If sort/filter are set to defalt and there are server-rendered reviews on the page
   * and the total number exceeds what's visible, just show more
   * (Note: 0 is not GT 0 - if that's the case, there are no server-rendered reviews)
   */

  if (getReviewsState().prerenderedReviews > visiblePrerenderedReviews && getIsDefaultQuery()) {
    showMoreReviews({
      reviews: prerenderedReviewListArray
    });
  } else {
    /**
     * See `validReviewNumbers`. If the total number of pre-rendered reviews
     * (> 0) is not evenly divisible by the default number of reviews per page
     * to load, do not try to make paginated requests for more reviews, and
     * output an error to the console
     */
    if (!validReviewNumbers) {
      console.error("Total number of pre-rendered reviews and reviews-per-page are not in\n        sync. Cannot dynamically calculate paginated requests for more reviews.");
      return;
    }
    /**
     * Need to load and dynamically display reviews after calling the API
     * Passed to the `handlebarsCheck` helper to ensure errors aren't thrown.
     * In this case, inform `loadNewReviews` that this is a request for
     * more reviews, not a sort or filter event.
     */


    handlebarsCheck(loadNewReviews)(true);
  }
};
/**
 * Removes all dynamically loaded reviews
 * and then starts to show pre-loaded (pre-rendered) reviews,
 * as is the default on page load
 */


var resetDefaultReviewsDisplay = function resetDefaultReviewsDisplay() {
  clearLoadedReviews();
  showMoreReviews({
    reviews: _toConsumableArray(prerenderedReviewList),
    reset: true
  });
};
/**
 * Entry point for initializing 'Get more reviews' functionality
 */

var moreReviewsInit = function moreReviewsInit() {
  moreReviewsEl = document.querySelector("." + MORE_REVIEWS_BUTTON_CLASS);
  defaultButtonTextEl = document.querySelector("." + MORE_REVIEWS_BUTTON_TEXT_CLASS);
  loadingButtonTextEl = document.querySelector("." + MORE_REVIEWS_BUTTON_LOADING_TEXT_CLASS);
  loadingReviewsEl = document.querySelector("." + REVIEWS_LOADING_CLASS);
  moreReviewsEl && moreReviewsEl.addEventListener('click', moreReviewsRequestHandler); // @ts-ignore

  reviewFilterEls = _toConsumableArray(document.querySelectorAll("button." + REVIEW_FILTER));
  reviewFilterStatusEl = document.querySelector("." + REVIEW_FILTER_STATUS);
  reviewFilterStarValueEl = document.querySelector("." + REVIEW_FILTER_STAR_VALUE);
};
/**
 * Visually marks reviews that will be replaced by a new set of reviews after
 * data is returned from an API request
 */

var addUnloadingStyleToReviews = function addUnloadingStyleToReviews() {
  document.querySelectorAll("." + REVIEW_CLASS).forEach(function (review) {
    return review.classList.add(IS_TRANSITIONING_CLASS);
  });
};
/**
 * Visually unmarks reviews after data is returned from an API request
 */


var removeUnloadingStyleFromReviews = function removeUnloadingStyleFromReviews() {
  document.querySelectorAll("." + REVIEW_CLASS).forEach(function (review) {
    return review.classList.remove(IS_TRANSITIONING_CLASS);
  });
};
/**
 * Show various loading state updates in the UI, depending on the type of API
 * request being made.
 * @param {boolean} isMoreReviewRequest - Is a request for additional reviews
 * (rather than a new sort or filter request)
 */


var showLoadingState = function showLoadingState(isMoreReviewRequest) {
  wasLoading = true;
  moreReviewsEl && moreReviewsEl.setAttribute('disabled', '');
  showElement(loadingButtonTextEl);
  hideElement(defaultButtonTextEl);

  if (!isMoreReviewRequest) {
    showElement(loadingReviewsEl);
    addUnloadingStyleToReviews();
  }
};
/**
 * Remove loading state updates from the UI
 */


var removeLoadingState = function removeLoadingState() {
  wasLoading = false;
  moreReviewsEl && moreReviewsEl.removeAttribute('disabled');
  hideElement(loadingButtonTextEl);
  showElement(defaultButtonTextEl);
  hideElement(loadingReviewsEl);
  removeUnloadingStyleFromReviews();
};
/**
 * Render function for updating the UI during loading of new reviews
 * Triggers loading state only after a pre-defined, short timeout
 * @param {import('./state').ReviewsState} reviewsState
 */


var renderLoading = function renderLoading(_ref2) {
  var loading = _ref2.loading,
      isMoreReviewRequest = _ref2.isMoreReviewRequest;

  if (loading) {
    return showLoadingState(isMoreReviewRequest);
  }

  if (wasLoading) {
    removeLoadingState();
  }
};
/**
 * The UI-loading render function is passed to the state change function returned
 * from `create-state.js`
 */


onReviewsStateChange(renderLoading);
/**
 * @param {import('./state').ReviewsState} state
 */

var renderSortFilterUI = function renderSortFilterUI(_ref3) {
  var notes = _ref3.notes,
      sort = _ref3.sort,
      direction = _ref3.direction;

  // Switch the sort dropdown back to the original value if the state matches the original sort
  if (reviewsSortSelect && sort === originalReviewsSortFilterState.sort && direction === originalReviewsSortFilterState.direction) {
    reviewsSortSelect.selectedIndex = 0;
  }

  reviewFilterEls.forEach(function (el) {
    if (el.dataset[STAR_RATING] === notes) {
      el.classList.add(IS_ACTIVE_CLASS);
    } else {
      el.classList.remove(IS_ACTIVE_CLASS);
    }
  });

  if (notes) {
    reviewFilterStarValueEl.textContent = " " + notes + " star";
    showElement(reviewFilterStatusEl);
  } else {
    hideElement(reviewFilterStatusEl);
  }
};

onReviewsStateChange(renderSortFilterUI);
onReviewsStateChange(function () {
  /**
   * If the default sort is selected (compared with the page-load default state),
   * call to reset the default display, using pre-loaded reviews. Otherwise,
   * reset the UI and call to get new reviews using a different sort query.
   */
  if (getIsDefaultQuery()) {
    resetDefaultReviewsDisplay();
  } else {
    loadNewReviews();
  }
}, function (state) {
  return [state.sort, state.direction, state.notes];
});

// @ts-check
/**
 * Takes sorting parameters from data attributes on the sort select's options
 * and determines whether to reset the default reviews display (most recent first)
 * or to get more reviews with the appropriate `sort` and `direction` parameters
 * @param {Object} event
 */

var reviewsSortHandler = function reviewsSortHandler(event) {
  var options = event.target.options;
  var selectedIndex = event.target.selectedIndex;

  if (!options || isNaN(selectedIndex)) {
    return;
  }

  var selectedOption = options[selectedIndex];
  /**
   * Set the correct sort parameters on the state object
   * Also set the page back to the default, initial state
   */

  setReviewsStateForSort({
    sort: selectedOption && selectedOption.dataset.sortType,
    direction: selectedOption && selectedOption.dataset.sortDirection
  });
};
/**
 * Initialize the change listener for the reviews sorting select element
 */


var reviewsSortInit = function reviewsSortInit() {
  reviewsSortSelect && reviewsSortSelect.addEventListener('change', reviewsSortHandler);
};

/**
 * Very simple vanilla JS event delegator
 * @TODO - For some reason I can't figure out, removing listeners appears not
 * to be working
 * Leaving as-is for future debugging
 * In current use cases, we do not need to remove these event listeners, but
 * would be a nice-to-have for other use cases
 * @param {Object} params
 * @param {string} [params.base='document'] params.base - The base element to
 * delegate from
 * @param {string} params.selector - The selector to target
 * @param {string} params.type - The type of even to listen for or remove
 * @param {function} params.callback - The event listener callback to bind or
 * remove binding to
 * @param {string} params.listenerName - The name to use to register the
 * listener, which would otherwise be anonymous.
 * Allows removal of previously registered listeners
 * @param {Boolean} [params.remove=false] - Whether to remove this listener binding
 * @param {Boolean} [params.useCapture=false] - Whether to use only the capture
 * phase to register the listener
 */
var delegateEvent = function () {
  // Create a closure and an object to hold events to be registered and de-registered
  var events = {};
  return function (_ref) {
    var _ref$base = _ref.base,
        base = _ref$base === void 0 ? 'document' : _ref$base,
        selector = _ref.selector,
        type = _ref.type,
        callback = _ref.callback,
        listenerName = _ref.listenerName,
        _ref$remove = _ref.remove,
        remove = _ref$remove === void 0 ? false : _ref$remove,
        _ref$useCapture = _ref.useCapture,
        useCapture = _ref$useCapture === void 0 ? false : _ref$useCapture;

    if (!selector || !type || !callback || !listenerName) {
      console.error('Event delegator missing required params');
      return;
    }

    events[listenerName] = function (e) {
      for (var target = e.target; target && target !== this; target = target.parentNode) {
        if (target.matches(selector)) {
          callback.call(target, e);
          break;
        }
      }
    };

    if (remove) {
      window[base].removeEventListener(type, events[listenerName], useCapture);
      delete events[listenerName];
      return;
    }

    window[base].addEventListener(type, events[listenerName], useCapture);
  };
}();

// @ts-check
/**
 * Handler for clicks on rows in the Reviews Ratings Matrix
 * 1. Gets the rating from data on the element
 * 2. Sets state for the upcoming API query
 * 3. Resets any previous sort selection
 * 4. Clears out previously loaded reviews and hides the page-loaded reviews
 * 5. Makes a query to get new, filtered-by-rating reviews and update the UI
 * @TODO - Analyze for any accessibility improvements
 * @this HTMLDivElement
 */

var reviewFilterHandler = function reviewFilterHandler() {
  var rating = this.dataset && this.dataset[STAR_RATING];

  if (!rating) {
    return;
  }

  setReviewsStateForFilter(rating);
};
/**
 * Settings passed to event delegation module
 */


var filterEventDelegationSettings = {
  selector: "." + REVIEW_FILTER,
  type: 'click',
  callback: reviewFilterHandler,
  listenerName: 'reviewFilterListener'
};
var reviewsFilteringInit = function reviewsFilteringInit() {
  delegateEvent(filterEventDelegationSettings);
  var clearReviewFilterButtons = document.querySelectorAll("." + REVIEW_CLEAR_FILTER + ",." + REVIEW_SUMMARY_CLEAR_FILTER);
  clearReviewFilterButtons.forEach(function (btn) {
    return btn.addEventListener('click', clearFilter);
  });
};

/**
 * Ratings & Reviews
 * Works with server-rendered reviews on page load.
 * Uses a Reviews API to fetch ratings and reviews data,
 * renders or re-renders via Handlebars templates onto the page.
 */
/**
 * Put all functions that need to run on product-page load here
 * 1. Register Handlebars partials and helpers
 * 2. Initialize handling for displaying (and fetching) more reviews
 * 3. Initialize handling for sorting reviews
 * 4. Initialize handling of voting for reviews and answers
 */

var reviewsInit = function reviewsInit() {
  setPrerenderedReviewsOnState();
  handlebarsInit();
  moreReviewsInit();
  reviewsSortInit();
  reviewsFilteringInit();
};

// @ts-check
/*  @todo Move color & size swatches logic out of this module and into
    the `ColorSwatches` & `SizeSwatches` modules */

var colorSwatchesSelector = "." + JS_PREFIX + "ColorSwatches-option";
var sizeSwatchesSelector = "." + JS_PREFIX + "SizeSwatches-option";
/*  Checks product attributes for the "End of Life" tag and specifies whether the
    unavailable state is "sold out" or "out of stock." */

var getUnavailableCssClass = function getUnavailableCssClass() {
  if (isNonFollowedProduct()) {
    return IS_SOLD_OUT_CLASS;
  }

  return IS_OUT_OF_STOCK_CLASS;
}; // @todo Can this logic be handled in the ColorSwatches/SizeSwatches modules?


var updateOptions = function updateOptions(elements, opts) {
  elements.each(function () {
    var element = this;
    var value = element.value; // Removing and adding are done separately because the nonexistent class and unavailable class could be the same thing

    element.classList.remove(opts.nonexistentClass);
    element.classList.remove(opts.unavailableClass);

    if (!opts.existingOptions.includes(value)) {
      element.classList.add(opts.nonexistentClass);
    }

    if (!opts.availableOptions.includes(value)) {
      element.classList.add(opts.unavailableClass);
    }
  });
}; // @todo Consider moving this logic to `ColorSwatches` & `SizeSwatches` modules


var updateOptionStates = function updateOptionStates(_ref) {
  var size = _ref.size,
      color = _ref.color,
      variant = _ref.variant;
  var colorSwatches = jQuery(colorSwatchesSelector);
  var sizeSwatches = jQuery(sizeSwatchesSelector); // Update swatches with classes to display state in UI

  updateOptions(sizeSwatches, {
    existingOptions: getExistingSizesFromColor(color),
    nonexistentClass: IS_HIDDEN_CLASS,
    availableOptions: getAvailableSizesFromColor(color),
    unavailableClass: getUnavailableCssClass()
  });
  updateOptions(colorSwatches, {
    existingOptions: getExistingColorsFromSize( // If there is a variant selected, then grey out the variants that don't exist for the current size
    // if there is no variant selected (meaning either size is not selected, or the selected size doesn't exist for this color)
    // then we display them all as not-greyed-out
    variant && size),
    nonexistentClass: IS_OUT_OF_STOCK_CLASS,
    availableOptions: getAvailableColorsFromSize( // If there is a variant selected, then grey out the variants that aren't available for the current size
    // if there is no variant selected (meaning either size is not selected, or the selected size doesn't exist for this color)
    // then we display them all as not-greyed-out
    variant && size),
    unavailableClass: getUnavailableCssClass()
  });
};

// @ts-check
/**
 * Attach JS to the Shopify Timber theme <select> element
 * @todo Consider removing jQuery dependency
 */

var $MasterSelect = jQuery('#productSelect');
/**
 * We want to keep the master `<select>` input  and the URL up-do-date with the
 * selection size/color combination.
 *
 * @param {Variant} variant
 */

var onVariantSelect$2 = function onVariantSelect(variant) {
  // We can then update the master `<select>` input with the variant ID
  // @todo Consider removing jQuery dependency
  $MasterSelect.val(variant.id);
};

var CURRENT_PRICE_CSS_CLASS = JS_PREFIX + "CurrentPrice";
var CROSSED_OUT_PRICE_CSS_CLASS = JS_PREFIX + "CrossedOutPrice";
var PRICE_LABEL_CSS_CLASS = JS_PREFIX + "PriceLabel";
var PRICE_AMOUNT_LABEL_CSS_CLASS = JS_PREFIX + "PriceAmount";
var AFTERPAY_PRICE_CSS_CLASS = JS_PREFIX + "AfterpayPrice";
var RRP_PRICE_CSS_CLASS = JS_PREFIX + "RRPPrice"; // Multiple price elements exist in the DOM because there
// are different ones for smaller vs larger viewports, use `querySelectorAll`

/** @type {NodeListOf<HTMLElement>} */

var currentPriceEls = document.querySelectorAll("." + CURRENT_PRICE_CSS_CLASS);
/** @type {NodeListOf<HTMLElement>} */

var crossedOutPriceEls = document.querySelectorAll("." + CROSSED_OUT_PRICE_CSS_CLASS);
/** @type {NodeListOf<HTMLElement>} */

var afterpayPriceEls = document.querySelectorAll("." + AFTERPAY_PRICE_CSS_CLASS);
var rrpPriceEls = document.querySelectorAll("." + RRP_PRICE_CSS_CLASS);
/**
 * Formats default Shopify price value, which is in cents,
 * to display format: $X.XX
 *
 * @param {number} price The price to format for display
 * @returns {string} A formatted price string (or blank string)
 */

var formatPrice = function formatPrice(price) {
  if (price) {
    // @TODO Use 'utilities/price-format' utility functions
    return "$" + (price / 100).toFixed(2);
  }

  return '';
};
/**
 * Generates a formatted price, ranged if needed
 *
 * @param {Object} obj
 * @param {number} obj.minPrice
 * @param {number} obj.maxPrice
 * @returns {string} A formatted price to display
 */


var formatPriceRange = function formatPriceRange(_ref) {
  var minPrice = _ref.minPrice,
      maxPrice = _ref.maxPrice;
  return minPrice === maxPrice ? // Show a single `price` when there is no range
  formatPrice(maxPrice) : // Show variants' `price` range
  formatPrice(minPrice) + " \u2013 " + formatPrice(maxPrice);
};
/**
 * Gets all prices for a given variant color
 *
 * @todo Consider using transducers if variants quantity is larger
 * @see: https://medium.com/javascript-scene/transducers-efficient-data-processing-pipelines-in-javascript-7985330fe73d
 *
 * @param {string} color A variant color
 * @returns {Array} An array of prices
 */


var getPricesByVariantColor = function getPricesByVariantColor(color) {
  return variantsJSON.filter(function (variant) {
    return getVariantOptions(variant).color === color;
  }).map(function (variant) {
    return variant.price;
  });
};
/**
 * Gets all `compare_at_price` values for a given variant color
 *
 * @todo Consider using transducers if variants quantity is larger
 * @see: https://medium.com/javascript-scene/transducers-efficient-data-processing-pipelines-in-javascript-7985330fe73d
 *
 * @param {string} color A variant color
 * @returns {Array} An array of `compare_at_price` values
 */


var getCompareAtPricesByColor = function getCompareAtPricesByColor(color) {
  return variantsJSON.filter(function (variant) {
    return getVariantOptions(variant).color === color;
  }).map(function (variant) {
    return variant.compare_at_price;
  });
};
/**
 * Helper to know if an HTML element is a crossed-out price element
 *
 * @param {HTMLElement} el
 * @returns {Boolean}
 */


var isCrossedOutPriceEl = function isCrossedOutPriceEl(el) {
  return el.classList.contains(CROSSED_OUT_PRICE_CSS_CLASS);
};
/**
 * Helper that renders the price for a given set of HTML elements
 *
 * @param {Object} params
 * @param {NodeListOf<HTMLElement>} params.priceEls The price elements list
 * @param {string} [params.displayPrice=''] The price to render
 * @param {Boolean} [params.compareAtPrice=false] Should display as sale price?
 */


var render$3 = function render(_ref2) {
  var priceEls = _ref2.priceEls,
      _ref2$displayPrice = _ref2.displayPrice,
      displayPrice = _ref2$displayPrice === void 0 ? '' : _ref2$displayPrice,
      _ref2$compareAtPrice = _ref2.compareAtPrice,
      compareAtPrice = _ref2$compareAtPrice === void 0 ? false : _ref2$compareAtPrice,
      _ref2$afterpayPrice = _ref2.afterpayPrice,
      afterpayPrice = _ref2$afterpayPrice === void 0 ? false : _ref2$afterpayPrice;
  priceEls.forEach(function (priceEl) {
    /** @type {HTMLElement | null} */
    var labelEl = priceEl.querySelector("." + PRICE_LABEL_CSS_CLASS);
    /** @type {HTMLElement | null} */

    var amountEl = priceEl.querySelector("." + PRICE_AMOUNT_LABEL_CSS_CLASS); // Handle the "compare" (crossed-out) logic to show/hide

    if (isCrossedOutPriceEl(priceEl)) {
      if (compareAtPrice) {
        // Allow the crossed-out "original" price element to be visible
        showElement(priceEl);
      } else {
        // Hide the crossed-out "original" price element, not needed
        hideElement(priceEl);
      }
    } // Handle the current price label logic


    if (labelEl) {
      labelEl.textContent = compareAtPrice ? priceEl.dataset.salePriceLabel : priceEl.dataset.regularPriceLabel;
    } // Regardless of if current price or crossed-out price, update the display price


    if (amountEl) {
      amountEl.textContent = displayPrice;
    }
  });

  if (afterpayPrice) {
    afterpayPriceEls.forEach(function (afterpayPriceEl) {
      afterpayPriceEl.textContent = afterpayPrice;
    });
  }
};
/**
 * Handles updating the display prices when a variant is selected
 *
 * @param {Variant} variant
 */


var handleVariantSelection = function handleVariantSelection(_ref3) {
  var price = _ref3.price,
      compareAtPrice = _ref3.compare_at_price;
  render$3({
    priceEls: currentPriceEls,
    displayPrice: formatPrice(price),
    compareAtPrice: compareAtPrice !== null,
    afterpayPrice: formatPrice(price / 4) + " AU"
  });
  render$3({
    priceEls: crossedOutPriceEls,
    displayPrice: formatPrice(compareAtPrice),
    compareAtPrice: compareAtPrice !== null
  });
};
/**
 * Handles updating the display prices when a color is selected
 *
 * @see https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#price
 * @param {string} color
 */


var handleColorSelection = function handleColorSelection(color) {
  var prices = getPricesByVariantColor(color);
  var minPrice = Math.min.apply(Math, _toConsumableArray(prices));
  var maxPrice = Math.max.apply(Math, _toConsumableArray(prices)); // Checks if at least one `compare_at_price` for all variants for the given `color` has
  // a value. If so, assume a "sale" price display by setting `compareAtPrice` to `true`.

  var isCompareAtPrice = getCompareAtPricesByColor(color).some(function (compareAtPrice) {
    return compareAtPrice !== null;
  });
  render$3({
    priceEls: currentPriceEls,
    displayPrice: formatPriceRange({
      minPrice: minPrice,
      maxPrice: maxPrice
    }),
    compareAtPrice: isCompareAtPrice
  }); // Don't pass in a display price, defaults to empty string

  render$3({
    priceEls: crossedOutPriceEls
  });
};
/**
 * Updates the price display with price and sale price if necessary
 *
 * @param {object} obj The state data object
 * @param {string | undefined} obj.color Currently selector color
 * @param {Variant | undefined} obj.variant Currently selected variant
 */


var onSwatchChange = function onSwatchChange(_ref4) {
  var color = _ref4.color,
      variant = _ref4.variant;

  if (!isProductPricingVaried()) {
    // Do nothing if product variant prices do not vary.
    // Whatever is rendered from the server is the correct price
    // regardless of color/size selection.
    return;
  } // A completed variant (color + size) selection takes priority


  if (variant) {
    handleVariantSelection(variant); // No need to continue

    return;
  }

  handleColorSelection(color);
};

// @ts-check
var modelCodeEls = document.querySelectorAll("." + JS_PREFIX + "ModelCode");
var modelCodeTextEls = document.querySelectorAll("." + JS_PREFIX + "ModelCode-text");
var onColorSelect$3 = function onColorSelect(color) {
  var modelCode = getModelCodeFromVariant(variantsJSON.find(function (variant) {
    return getVariantOptions(variant).color === color;
  }));

  if (modelCode) {
    // Update the model code in the UI
    modelCodeTextEls.forEach(function (modelCodeTextEl) {
      modelCodeTextEl.textContent = modelCode;
    });
    pushStockInfoToDataLayer(modelCode); // Then make sure any hidden model code wrappers are shown

    modelCodeEls.forEach(function (modelCodeEl) {
      modelCodeEl.classList.remove(IS_HIDDEN_CLASS);
    });
  } else {
    // No need to show model code wrappers if no model code exists
    modelCodeEls.forEach(function (modelCodeEl) {
      modelCodeEl.classList.add(IS_HIDDEN_CLASS);
    });
  }
};

// @ts-check

/**
 * Shopify error scenario 1:
 * "If the product is entirely sold out"
 *
 * Shopify error `description` value:
 * `The product #{item.name} is already sold out.`
 *
 * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#error-responses
 */
var ERROR_SCENARIO_1_REGEX = /^the\sproduct.*is\salready\ssold\sout\.$/i;
/**
 * Shopify error scenario 2:
 * "If the product is not sold out but the requested quantity exceeds
 * what is available, yet at least 1 item can still be added to the cart"
 *
 * Shopify error `description` value:
 * `You can only add #{item.remaining_inventory} #{item.name} to the cart.`
 *
 * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#error-responses
 */

var ERROR_SCENARIO_2_REGEX = /^you\scan\sonly\sadd.*to\sthe\scart\.$/i;
/**
 * Shopify error scenario 3:
 * "If the product is not sold out, but all of its stock is in the cart"
 *
 * Shopify error `description` value:
 * `All #{item.inventory_quantity} #{item.name} are in your cart.`
 *
 * @see https://help.shopify.com/en/themes/development/getting-started/using-ajax-api#error-responses
 */

var ERROR_SCENARIO_3_REGEX = /^all.*are\sin\syour\scart\.$/i;
/**
 * Determines if the `description` maps to Shopify error scenario 1
 *
 * @param {string} description A Shopify `description` value
 * @returns {boolean}
 */

var isErrorScenario1 = function isErrorScenario1(description) {
  return ERROR_SCENARIO_1_REGEX.test(description);
};
/**
 * Determines if the `description` maps to Shopify error scenario 2
 *
 * @param {string} description A Shopify `description` value
 * @returns {boolean}
 */

var isErrorScenario2 = function isErrorScenario2(description) {
  return ERROR_SCENARIO_2_REGEX.test(description);
};
/**
 * Determines if the `description` maps to Shopify error scenario 3
 *
 * @param {string} description A Shopify `description` value
 * @returns {boolean}
 */

var isErrorScenario3 = function isErrorScenario3(description) {
  return ERROR_SCENARIO_3_REGEX.test(description);
};

var DEFAULT_UI_STATE = {
  addToCartButtonText: PRODUCT_PAGE_COPY.ADD_TO_CART,
  validationText: '',
  isAddToCartButtonDisabled: false,
  isInAddToCartErrorState: false,
  shopifyErrorMessage: null
}; // Gets the first digit in the given `message`

var getQuantityFromMessage = function getQuantityFromMessage(message) {
  return message.split(/\s/g).find(function (word) {
    return /\d/g.test(word);
  }) || '';
}; // Returns the ATC AJAX error state based on the Shopify error `description` value

var getShopifyErrorUIState = function getShopifyErrorUIState(shopifyErrorMessage) {
  var defaultShopifyErrorUIState = Object.assign({}, DEFAULT_UI_STATE, {
    shopifyErrorMessage: shopifyErrorMessage,
    isInAddToCartErrorState: true
  }); // Handle "Inventory Case 1: Entirely Sold Out"
  // https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#inventory-cases

  if (isErrorScenario1(shopifyErrorMessage)) {
    if (isNonFollowedProduct()) {
      return Object.assign({}, defaultShopifyErrorUIState, {
        addToCartButtonText: PRODUCT_PAGE_COPY.SOLD_OUT,
        validationText: PRODUCT_PAGE_COPY.INVENTORY_RECENTLY_CHANGED,
        isAddToCartButtonDisabled: true
      });
    }

    return Object.assign({}, defaultShopifyErrorUIState, {
      addToCartButtonText: OUT_OF_STOCK_HANDLING === 'back_in_stock' ? PRODUCT_PAGE_COPY.EMAIL_ME_WHEN_IN_STOCK : PRODUCT_PAGE_COPY.OUT_OF_STOCK,
      validationText: PRODUCT_PAGE_COPY.OUT_OF_STOCK_RECENTLY_CHANGED
    });
  } // Handle "Inventory Case 2: Not sold out, can add at least 1 to cart"
  // https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#inventory-cases


  if (isErrorScenario2(shopifyErrorMessage)) {
    return Object.assign({}, defaultShopifyErrorUIState, {
      validationText: PRODUCT_PAGE_COPY.allInStockProductsInYourCart(getQuantityFromMessage(shopifyErrorMessage))
    });
  } //  Handle "Inventory Case 3: Not sold out, all stock already in cart"
  // https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#inventory-cases


  if (isErrorScenario3(shopifyErrorMessage)) {
    return Object.assign({}, defaultShopifyErrorUIState, {
      validationText: PRODUCT_PAGE_COPY.ALL_AVAILABLE_PRODUCTS_IN_CART
    });
  } // Handle "Inventory Case 4: Unknown Shopify error message - "Catch All" case"
  // https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#inventory-cases


  return Object.assign({}, defaultShopifyErrorUIState, {
    validationText: shopifyErrorMessage
  });
};
var getUIState = function getUIState(variant) {
  if (!variant) {
    if (variantsJSON.every(isVariantOutOfStock)) {
      //alert(window.vars.productJSON.tags.includes('clearance'));
      return Object.assign({}, DEFAULT_UI_STATE, {
        addToCartButtonText: OUT_OF_STOCK_HANDLING === 'clearance' ? PRODUCT_PAGE_COPY.EMAIL_ME_WHEN_IN_STOCK : PRODUCT_PAGE_COPY.OUT_OF_STOCK,
        validationText: PRODUCT_PAGE_COPY.ALL_SIZES_OUT_OF_STOCK,
        isAddToCartButtonDisabled: OUT_OF_STOCK_HANDLING !== 'clearance',
        bisHidden: OUT_OF_STOCK_HANDLING === 'clearance' ? true : false
      });
    }

    return DEFAULT_UI_STATE;
  }

  if (isVariantSoldOut(variant)) {
    return Object.assign({}, DEFAULT_UI_STATE, {
      addToCartButtonText: PRODUCT_PAGE_COPY.SOLD_OUT,
      validationText: PRODUCT_PAGE_COPY.NEW_MODEL_IN_DESIGN,
      isAddToCartButtonDisabled: true,
      bisHidden: false
    });
  }

  if (isVariantOutOfStock(variant)) {
    return Object.assign({}, DEFAULT_UI_STATE, {
      addToCartButtonText: OUT_OF_STOCK_HANDLING !== 'back_in_stock' ? PRODUCT_PAGE_COPY.OUT_OF_STOCK : window.vars.productJSON.tags.includes('clearance') ? PRODUCT_PAGE_COPY.EMAIL_ME_WHEN_IN_STOCK : PRODUCT_PAGE_COPY.OUT_OF_STOCK,
      validationText: PRODUCT_PAGE_COPY.OUT_OF_STOCK,
      isAddToCartButtonDisabled: !window.vars.productJSON.tags.includes('clearance'),
      bisHidden: OUT_OF_STOCK_HANDLING === 'back_in_stock' ? true : false
    });
  }

  if (isVariantCC(variant)) {
    return Object.assign({}, DEFAULT_UI_STATE, {
      addToCartButtonText: 'Click & Collect',
      isAddToCartButtonDisabled: false,
      bisHidden: false
    });
  }

  if (INVENTORY_TYPE !== 'multi_location') {
    if (!variantHasSufficientQuantity(variant)) {
      return Object.assign({}, DEFAULT_UI_STATE, {
        validationText: PRODUCT_PAGE_COPY.limitedQuantityLeft(variant.inventory_quantity)
      });
    }
  }

  return DEFAULT_UI_STATE;
};

// https://testing-decathlon-usa.myshopify.com/products/basketball-shoes-strong-500-low-inventory?
var MODULE_NAME = 'AddToCart';
var ADD_TO_CART_PREFIX = "." + JS_PREFIX + MODULE_NAME + "-";
var quantityInputEl = document.querySelector(ADD_TO_CART_PREFIX + "quantity");
var validationTextEl$2 = document.querySelector("." + VALIDATION_MESSAGE_CLASS);
var addToCartButtonEl = document.querySelector(ADD_TO_CART_PREFIX + "btn");
var addToCartButtonTextEl = document.querySelector(ADD_TO_CART_PREFIX + "btn-text");
var DEFAULT_MODULE_STATE = Object.assign({
  module: MODULE_NAME,
  currentVariant: null,
  isProgrammaticAddToCart: false,
  isLoading: false
}, DEFAULT_UI_STATE);
var state$3 = createState(DEFAULT_MODULE_STATE);
var variantModificationListeners = []; // Listens to change in variant quantities

var onVariantModification = function onVariantModification(cb) {
  return variantModificationListeners.push(cb);
};

var handleVariantModification = function handleVariantModification() {
  variantModificationListeners.forEach(function (listener) {
    return listener();
  });
};

var addToCartProgrammatically = function addToCartProgrammatically(quantity) {
  if (!quantityInputEl || !addToCartButtonEl) return;
  state$3.updateState({
    isProgrammaticAddToCart: true
  });
  quantityInputEl.value = String(quantity);
  /**
   * We are clicking the UI button instead of performing an AJAX request or
   * submitting the form directly because we want to make sure the
   * Persistent Cart logic comes into play.
   * We have to ensure the button is not disabled before clicking it
   * The button is disabled before making this change
   * because the component doesn't re-render until the next tick
   */

  addToCartButtonEl.disabled = false;
  addToCartButtonEl.click();
};

jQuery('body').on('addItemSuccess.ajaxCart', function () {
  state$3.updateState({
    isLoading: false
  });
});
jQuery('body').on('addItemError.ajaxCart', function (e, _ref) {
  var description = _ref.description;
  var currentVariant = state$3.getState().currentVariant;
  if (!description || !currentVariant) return; // Update the state with the proper error message/UI state

  state$3.updateState(Object.assign({}, DEFAULT_MODULE_STATE, getShopifyErrorUIState(description), {
    currentVariant: currentVariant,
    isLoading: false
  }));

  if (isErrorScenario1(description)) {
    // Entirely sold out
    currentVariant.available = false;
    currentVariant.inventory_quantity = 0;
    handleVariantModification();
  }

  if (isErrorScenario2(description)) {
    /*  Add available items for current variant to cart programmatically using
        the Shopify error message to provide the quantity */
    addToCartProgrammatically(getQuantityFromMessage(description));
  }
});

var onAddToCartClick = function onAddToCartClick(event) {
  var _state$getState = state$3.getState(),
      currentVariant = _state$getState.currentVariant,
      isProgrammaticAddToCart = _state$getState.isProgrammaticAddToCart;

  var requestQuantity = document.getElementById('Quantity');

  if (!requestQuantity.checkValidity()) {
    return;
  }

  if (!currentVariant) {
    event.preventDefault();
    handleAddToCartAttemptWithNoVariant();
    return;
  }

  if (isVariantOutOfStock(currentVariant) && window.BISPopover) {
    // Show modal, with current variant selected
    window.BISPopover.show({
      variantId: currentVariant.id
    }); // Set modal email input with customer's email

    var BISPopoverEl = document.querySelector('#BIS_frame');
    var BISPopoverEmailInputEl = BISPopoverEl.contentDocument.querySelector('#email_address');
    var customer = window.Shopify.customer;

    if (BISPopoverEmailInputEl && customer) {
      BISPopoverEmailInputEl.value = customer.email;
    }
  } else {
    setTimeout(function () {
      // Display loading state, but only after click event has propagated
      state$3.updateState({
        isLoading: true
      });
    });
  }
  /*  If the ATC action was completed programmatically, then reset only the
      `isProgrammaticAddToCart` flag and hold off resetting the UI state. This allows
      the AJAX custom error to stay visible.*/


  if (isProgrammaticAddToCart) {
    state$3.updateState({
      isProgrammaticAddToCart: false
    });
    return;
  } // Reset the state to the default for that variant
  // (clears out ajax shopify error state)


  state$3.updateState(getUIState(currentVariant));
};

var onVariantSelect$3 = function onVariantSelect(newVariant) {
  state$3.updateState(Object.assign({}, DEFAULT_MODULE_STATE, getUIState(newVariant), {
    currentVariant: newVariant
  }));
};

var render$4 = function render(_ref2) {
  var isAddToCartButtonDisabled = _ref2.isAddToCartButtonDisabled,
      validationText = _ref2.validationText,
      addToCartButtonText = _ref2.addToCartButtonText,
      bisHidden = _ref2.bisHidden,
      isLoading = _ref2.isLoading;

  /*  Give priority to the error messages. This ensures the UI gets updated
      regardless of the availability of `addToCartButtonEl` or `addToCartButtonTextEl` */
  if (validationTextEl$2) {
    validationTextEl$2.textContent = validationText;
  } // if (bisHidden) {
  //   // alert("CLEARANCE SALE " + bisHidden);
  //   document.querySelector('.de-AddToCartActions .de-ProductQuantity').classList.remove('de-u-md-block');
  //   addToCartButtonEl.classList.add('bis-hidden');
  //   $('.js-de-AddToCart-btn').closest('.de-AddToCartActions').addClass('full-width-button');
  // }


  if (!addToCartButtonEl || !addToCartButtonTextEl) return;
  addToCartButtonEl.disabled = isAddToCartButtonDisabled || isLoading;
  var buttonText = isLoading ? 'Adding to cart' : addToCartButtonText;
  addToCartButtonTextEl.textContent = buttonText; // We are setting aria-label so that screen readers do not read the all-caps text as individual characters

  addToCartButtonTextEl.setAttribute('aria-label', buttonText);
};

state$3.onChange(render$4);
var init$8 = function init() {
  if (addToCartButtonEl) {
    addToCartButtonEl.addEventListener('click', onAddToCartClick);
  }
};

/**
 * Remove or add a role from an element
 * @param {Object} params
 * @param {HTMLElement} params.el - The element on which to add or remove an
 * attribute / attribute + value
 * @param {string} params.name - The name of the attribute to be changed, added,
 * or removed
 * @param {string} params.value - The value to add or remove from a particular
 * attribute
 * @param {boolean} params.remove - Whether to remove the value. If false,
 * the value or attribute will be added
 *
 * @todo Consider a refactor using the MDN `Element.toggleAttribute()` polyfill
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute#Polyfill
 */
var toggleAttributeValue = function toggleAttributeValue(_ref) {
  var el = _ref.el,
      name = _ref.name,
      value = _ref.value,
      remove = _ref.remove;

  if (!el || !el.getAttribute || !name || typeof remove !== 'boolean') {
    return;
  }

  var attrValues = el.getAttribute(name);
  /**
   * If there are no existing values for the given attribute set on the element,
   * just return. If the attribute is to be set, just set it directly and return.
   */

  if (!attrValues) {
    if (remove) {
      return;
    }

    el.setAttribute(name, value);
    return;
  }
  /**
   * Make an array of attribute values
   */


  attrValues = attrValues.split(' ');
  /**
   * If there are existing values, either filter out the value to be removed or
   * add the new one, if it isn't already in the list of values
   */

  if (remove) {
    attrValues = attrValues.filter(function (val) {
      return val !== value;
    });
  } else if (!attrValues.some(function (val) {
    return val === value;
  })) {
    attrValues.push(value);
  }
  /**
   * If there are no longer any values, remove the attribute
   */


  if (attrValues.length === 0) {
    el.removeAttribute(name);
    return;
  }
  /**
   * Convert values back to a string and set the attribute on the element
   */


  attrValues = attrValues.join(' ');
  el.setAttribute(name, attrValues);
};

/**
 * Focus Trap Module
 *
 * UI tab focus trap helper for a given parent dialog element.
 * Intended to be used with modal dialogs when open.
 *
 * @see https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal
 * @see https://bitsofco.de/accessible-modal-dialog/#5whileopenpreventtabbingtooutsidethedialog
 */
/**
 * Module constants
 */

var MODULE_NAME$1 = 'FocusTrap';
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
 * Using a lowercase version to test against, default values are uppercased.
 */

var TAB_KEY_VALUE = 'tab';
/**
 * Focusable element list borrowed from edenspiekermann/a11y-dialog project
 * @see https://github.com/edenspiekermann/a11y-dialog/blob/cf4ed8155bf8db0336ab556f2e4eafcaebc9e905/a11y-dialog.js#L6-L18
 */

var NOT_INERT_SELECTOR = ':not([inert])';
var NOT_NEGATIVE_TAB_INDEX_SELECTOR = ':not([tabindex^="-"])';
var NOT_DISABLED_SELECTOR = ':not([disabled])';
var FOCUSABLE_ELEMENT_SELECTORS = ["a[href]" + NOT_NEGATIVE_TAB_INDEX_SELECTOR + NOT_INERT_SELECTOR, "area[href]" + NOT_NEGATIVE_TAB_INDEX_SELECTOR + NOT_INERT_SELECTOR, "input" + NOT_DISABLED_SELECTOR + NOT_INERT_SELECTOR, "select" + NOT_DISABLED_SELECTOR + NOT_INERT_SELECTOR, "textarea" + NOT_DISABLED_SELECTOR + NOT_INERT_SELECTOR, "button" + NOT_DISABLED_SELECTOR + NOT_INERT_SELECTOR, "iframe" + NOT_NEGATIVE_TAB_INDEX_SELECTOR + NOT_INERT_SELECTOR, "audio" + NOT_NEGATIVE_TAB_INDEX_SELECTOR + NOT_INERT_SELECTOR, "video" + NOT_NEGATIVE_TAB_INDEX_SELECTOR + NOT_INERT_SELECTOR, "[contenteditable]" + NOT_NEGATIVE_TAB_INDEX_SELECTOR + NOT_INERT_SELECTOR, "[tabindex]" + NOT_NEGATIVE_TAB_INDEX_SELECTOR + NOT_INERT_SELECTOR];
/**
 * Module state defaults
 *
 * @param {Object} state
 * @param {string} state.moduleName The name of the current module,
 *        helpful for debugging
 * @param {Element} state.focusableEls The focusable elements within
 *        the active dialog
 * @param {Element} state.firstFocusableEl The first focusable element within
 *        the active dialog
 * @param {Element} state.lastFocusableEl The last focusable element within
 *        the active dialog
 */

var DEFAULT_MODULE_STATE$1 = {
  module: MODULE_NAME$1,
  focusableEls: null,
  firstFocusableEl: null,
  lastFocusableEl: null
};
/**
 * Stores the state helper
 */

var stateHelper;
/**
 * Helper for detecting the "Tab" keyboard key
 *
 * @param {string} key A keyboard event `key`
 * @returns {boolean}
 */

var isTabKey = function isTabKey(key) {
  return key.toLowerCase() === TAB_KEY_VALUE;
};
/**
 * Helper to retrieve the focusable elements for a given dialog
 *
 * @todo Refactor to work with non-ID values?
 *
 * @param {string} dialogId The ID of the given dialog
 * @return {NodeList} A NodeList of focusable elements for the given dialog
 */


var getFocusableElements = function getFocusableElements(dialogId) {
  return document.querySelectorAll(FOCUSABLE_ELEMENT_SELECTORS.map(function (selector) {
    return "#" + dialogId + " " + selector;
  }).join());
};
/**
 * Helper to find out if multiple focusable elements exist
 *
 * @param {Object} state A state object
 * @param {NodeList} state.focusableEls A NodeList of focusable elements
 */


var hasMultipleFocusableElements = function hasMultipleFocusableElements(_ref) {
  var focusableEls = _ref.focusableEls;
  return focusableEls.length > 1;
};
/**
 * Updates first/last focusable elements for given dialog
 *
 * Should be called when a new dialog is opened. This allows the FocusTrap
 * module to update the current first/last focusable elements.
 *
 * @param {string} dialogId The ID of the given dialog
 */


var updateFocusableEls = function updateFocusableEls(dialogId) {
  var focusableEls = getFocusableElements(dialogId);
  stateHelper.updateState({
    focusableEls: focusableEls,
    firstFocusableEl: focusableEls[0],
    lastFocusableEl: focusableEls[focusableEls.length - 1]
  });
};
/**
 * Traps the tab focus
 *
 * Uses own FocusTrap module state to know when the first/last focusable
 * element has been tabbed to and resets the focus accordingly.
 *
 * @param {Event} keyboardEvent A keyboard event
 */

var trapFocus = function trapFocus(keyboardEvent) {
  var key = keyboardEvent.key,
      shiftKey = keyboardEvent.shiftKey; // Scope the focus trap to the "Tab" key event

  if (isTabKey(key)) {
    var state = stateHelper.getState(); // No need to handle focus resets if there aren't enough focusable elements

    if (!hasMultipleFocusableElements(state)) {
      keyboardEvent.preventDefault();
      return;
    } // Handle forward (Tab) and backward (Shift + Tab) tabbing


    if (shiftKey) {
      if (document.activeElement === state.firstFocusableEl) {
        keyboardEvent.preventDefault();
        state.lastFocusableEl.focus();
      }
    } else if (document.activeElement === state.lastFocusableEl) {
      keyboardEvent.preventDefault();
      state.firstFocusableEl.focus();
    }
  }
};
/**
 * Initialize FocusTrap module
 */

var init$9 = function init() {
  stateHelper = createState(DEFAULT_MODULE_STATE$1);
};

// @ts-check
/**
 * Query string module
 *
 * Provides helpers for interacting with URL paramaters
 */

/**
 * Parses variant id out of the URL
 */

var getUrlVariant = function getUrlVariant() {
  var urlParams = new URLSearchParams(window.location.search);
  /** @type {{variant?: string}} */

  return urlParams.get('variant');
};
/**
 * Updates the variant id in the URL when a new variant is selected
 *
 * @param {string | number | null | undefined} variantId The variant ID
 */

var updateUrlVariant = function updateUrlVariant(variantId) {
  /** @type any */
  var parsedQueryParams = decode( // Remove "?"
  window.location.search.substr(1));
  parsedQueryParams.variant = variantId === null ? undefined : variantId;
  var updatedUrl = "?" + encode(parsedQueryParams);
  updateUrl(updatedUrl);
};
/**
 * @param {string} newUrl
 */

var updateUrl = function updateUrl(newUrl) {
  window.realReplaceState({}, null, newUrl);
};
/**
 * @param {string} newHash
 */

var updateHash = function updateHash(newHash) {
  return (// If the new hash is '#' or '', remove it entirely
    updateUrl(newHash.replace(/#$/, '') === '' ? window.location.href.replace(window.location.hash, '') // URL without hash
    : newHash)
  );
};

/**
 * Drawer Module
 *
 * Controls the opening/closing of the drawer UI. For accessibility purposes,
 * the Drawer module is treated as a Dialog.
 * @see https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal
 */
/**
 * Module constants
 */

var MODULE_NAME$2 = 'Drawer';
var CLICK_EVENT$1 = 'click';
var KEY_DOWN_EVENT = 'keydown';
/**
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
 * Using a lowercase version to test against, default values are uppercased.
 */

var ESCAPE_KEY_VALUE = 'escape';
var OPEN_ACTION = 'open';
var STATE_PREFIX = CSS_PREFIX + "is-";
var DRAWER_PREFIX = MODULE_NAME$2 + "-";
var TOGGLE_SELECTOR = "." + JS_PREFIX + DRAWER_PREFIX + "toggle";
var OVERLAY_SELECTOR = "." + JS_PREFIX + DRAWER_PREFIX + "overlay";
var MAIN_CONTENT_WRAP_SELECTOR = "." + JS_PREFIX + DRAWER_PREFIX + "wrap";
var DRAWER_IN_FLOW_CLASS = STATE_PREFIX + "inPageFlow";
var IS_OPEN_CLASS = STATE_PREFIX + "open";
var IS_OPENING_CLASS = STATE_PREFIX + "opening";
var IS_CLOSED_CLASS = STATE_PREFIX + "closed";
var IS_CLOSING_CLASS = STATE_PREFIX + "closing";
var IS_DRAWER_OPEN_CLASS = STATE_PREFIX + "drawerOpen";
var POST_ADD_TO_CART_DRAWER_ID = 'post-add-to-cart-drawer';
/**
 * TRANSITION_DURATION value must match (in milliseconds) the value in associated
 * CSS for transition duration ($transition-speed-normal)
 *
 * @see assets/product.scss.liquid
 */

var TRANSITION_DURATION = 200;
/**
 * Module state defaults
 *
 * @param {Object} state
 * @param {string} state.module The name of the module
 * @param {boolean} state.isOpen Keeps track of drawer "open" state
 + @param {Element} state.drawerEl The current drawer element to perform actions on
 * @param {Element} state.lastOpenToggleEl Toggle that last opened the drawer
 * @param {NodeList} state.wrapperEls Main content wrapper elements
 */

var DEFAULT_MODULE_STATE$2 = {
  module: MODULE_NAME$2,
  isOpen: false,
  drawerEl: null,
  lastOpenToggleEl: null,
  wrapperEls: null,
  htmlEl: null,
  windowScrollPosition: 0
};
/**
 * Reference to the `createState` helper. The `createState`
 * helper assists to create, update and get module state.
 * @see scripts/utilities/create-state.js
 */

var stateHelper$1;
/**
 * Helper to confirm if the given action is "open"
 *
 * Anything other than "open" will return `false`.
 *
 * @param {string} action The toggle action in question ("open"/"close")
 * @returns {boolean} Is the action set to "open"?
 */

var isActionOpen = function isActionOpen(action) {
  return action.trim().toLowerCase() === OPEN_ACTION;
};
/**
 * Helper for detecting the "Escape" keyboard key
 *
 * @param {string} key A keyboard event `key`
 * @returns {boolean}
 */


var isEscapeKey = function isEscapeKey(key) {
  return key.toLowerCase() === ESCAPE_KEY_VALUE;
};
/**
 * The keyboard event handler
 *
 * @param {KeyboardEvent} keyboardEvent
 */


var keyboardEventHandler = function keyboardEventHandler(keyboardEvent) {
  var key = keyboardEvent.key;
  /**
   * For better accessibility, the drawer should close via the "escape" key
   */

  if (isEscapeKey(key)) {
    // Update the module state to a "closed" state
    stateHelper$1.updateState({
      isOpen: false
    }); // Render the UI with the new state

    render$5(stateHelper$1.getState());
  } // Handles trapping the tab focus within the open dialog


  trapFocus(keyboardEvent);
};
/**
 * Updates the keyboard event listeners depending on the state
 *
 * @param {Object} state The state data object
 * @param {boolean} state.isOpen Whether the drawer is open or not
 */


var updateKeyboardListeners = function updateKeyboardListeners(_ref) {
  var isOpen = _ref.isOpen;

  if (isOpen) {
    document.addEventListener(KEY_DOWN_EVENT, keyboardEventHandler);
  } else {
    document.removeEventListener(KEY_DOWN_EVENT, keyboardEventHandler);
  }
};
/**
 * Toggle or update classes on the drawer when applied to content that also
 * appears in page flow when the drawer is closed
 *
 * @param {Object} params
 * @param {HTMLElement} params.drawerEl - The drawer component element
 * @param {boolean} params.isOpen - Whether the action being handled is to open the
 * drawer
 */


var inFlowDisplayStateChangeUpdates = function inFlowDisplayStateChangeUpdates(_ref2) {
  var drawerEl = _ref2.drawerEl,
      isOpen = _ref2.isOpen;
  drawerEl.classList.toggle(DRAWER_IN_FLOW_CLASS, !isOpen);
  toggleAttributeValue({
    el: drawerEl,
    name: 'role',
    value: 'dialog',
    remove: !isOpen
  });
};
/**
 * Get the window y-axis scroll position, storing to state
 */


var updateWindowScrollPosition = function updateWindowScrollPosition() {
  return stateHelper$1.updateState({
    windowScrollPosition: window.pageYOffset
  });
};
/**
 * Set the window y-axis scroll position from state
 *
 * Note the conditional use of `document.documentElement`, `document.body`, or `window.scrollTo`
 * `document.documentElement.scrollTop` is for IE
 * `document.body.scrollTop` is for Chrome, Safari, and Opera
 * `window.scrollTo` is for Firefox
 */


var setWindowScrollPosition = function setWindowScrollPosition() {
  var _stateHelper$getState = stateHelper$1.getState(),
      windowScrollPosition = _stateHelper$getState.windowScrollPosition;

  if (typeof window.scrollTo === 'function') {
    window.scrollTo(0, windowScrollPosition);
  } else {
    var scrollEl = document.documentElement || document.body;
    scrollEl.scrollTop = windowScrollPosition;
  }
};
/**
 * Toggle or otherwise update classes on the drawer and drawer content
 * @param {Object} params
 * @param {Element} params.drawerEl - The drawer component element
 * @param {boolean} params.isOpen - Whether the action being handled is to open the
 * drawer
 * @param {NodeList} params.wrapperEls A NodeList of main content wrapper elements
 */


var updateBaseDrawerClasses = function updateBaseDrawerClasses(_ref3) {
  var drawerEl = _ref3.drawerEl,
      isOpen = _ref3.isOpen,
      wrapperEls = _ref3.wrapperEls;

  /**
   * Toggle fixed positioning on the wrapper(s) of the drawer, to prevent
   * scrolling content outside the drawer
   */
  wrapperEls.forEach(function (wrap) {
    wrap.classList.toggle(FIXED_CLASS, isOpen);
  });
  /**
   * Add or remove an active class to the drawer
   */

  drawerEl.classList.toggle(IS_ACTIVE_CLASS, isOpen);
};
/**
 * Updates for accessibility on opening and closing the drawer
 * @param {Object} params
 * @param {Element} params.drawerEl - The drawer component element
 * @param {Element} params.lastOpenToggleEl The last toggle that opened the drawer
 * @param {boolean} params.isOpen - Whether the action being handled is to open the
 * drawer
 */


var updateAccessibilityState = function updateAccessibilityState(_ref4) {
  var drawerEl = _ref4.drawerEl,
      isOpen = _ref4.isOpen,
      lastOpenToggleEl = _ref4.lastOpenToggleEl;
  var closeToggle = document.querySelector("#" + drawerEl.id + " " + TOGGLE_SELECTOR);
  /**
   * For accessibility, set the focus on the close toggle for an open
   * drawer or the last-used drawer-open toggle if the drawer is closing
   */

  isOpen && closeToggle && closeToggle.focus();
  !isOpen && lastOpenToggleEl && lastOpenToggleEl.focus();
};
/**
 * Base updates needed on opening or closing the drawer, separate from those
 * needed for a drawer with content that also displays in page flow
 * @param {Object} state
 * @param {Element} state.drawerEl - The drawer component element
 * @param {boolean} state.isOpen - Whether the action being handled
 * is to open the drawer
 * @param {Element} state.lastOpenToggleEl The last toggle that opened the drawer
 * @param {NodeList} state.wrapperEls A NodeList of main content wrapper elements
 * drawer
 */


var baseStateChangeUpdates = function baseStateChangeUpdates(_ref5) {
  var drawerEl = _ref5.drawerEl,
      isOpen = _ref5.isOpen,
      lastOpenToggleEl = _ref5.lastOpenToggleEl,
      wrapperEls = _ref5.wrapperEls;
  updateBaseDrawerClasses({
    drawerEl: drawerEl,
    isOpen: isOpen,
    wrapperEls: wrapperEls
  });
  updateAccessibilityState({
    drawerEl: drawerEl,
    isOpen: isOpen,
    lastOpenToggleEl: lastOpenToggleEl
  });
};
/**
 * Timed updates of transition-related classes on the drawer
 *
 * IIFE wraps returned function and provides timeout placeholder variables
 * in closure
 *
 * @param {Object} state
 * @param {Element} state.drawerEl - The drawer component element
 * @param {Element} state.htmlEl - The HTML (root) element, which needs
 * to have a class set when the drawer is open to avoid double y-axis scrollbars
 * @param {boolean} state.isOpen - Whether the action being handled
 * is to open the drawer
 */


var setDrawerTransitionStates = function () {
  var openTimeout = null;
  var closeTimeout = null;
  var closeStateCssClasses = [IS_CLOSED_CLASS, IS_CLOSING_CLASS];
  var openStateCssClasses = [IS_OPEN_CLASS, IS_OPENING_CLASS];
  return function _setDrawerTransitionStates(_ref6) {
    var drawerEl = _ref6.drawerEl,
        htmlEl = _ref6.htmlEl,
        isOpen = _ref6.isOpen;

    if (isOpen) {
      var _drawerEl$classList;

      closeTimeout && clearTimeout(closeTimeout);

      (_drawerEl$classList = drawerEl.classList).remove.apply(_drawerEl$classList, closeStateCssClasses.concat([IS_OPEN_CLASS]));

      drawerEl.classList.add(IS_OPENING_CLASS);
      openTimeout = setTimeout(function () {
        var _drawerEl$classList2;

        (_drawerEl$classList2 = drawerEl.classList).remove.apply(_drawerEl$classList2, [IS_OPENING_CLASS].concat(closeStateCssClasses));

        drawerEl.classList.add(IS_OPEN_CLASS);
        /**
         * Avoid double vertical scroll bars when drawer is open
         * by removing overflow on the root element
         */

        htmlEl.classList.add(HIDE_OVERFLOW_Y_CLASS);
      }, TRANSITION_DURATION);
    } else {
      var _drawerEl$classList3;

      openTimeout && clearTimeout(openTimeout);

      (_drawerEl$classList3 = drawerEl.classList).remove.apply(_drawerEl$classList3, openStateCssClasses.concat([IS_CLOSED_CLASS]));

      drawerEl.classList.add(IS_CLOSING_CLASS);
      closeTimeout = setTimeout(function () {
        var _drawerEl$classList4;

        (_drawerEl$classList4 = drawerEl.classList).remove.apply(_drawerEl$classList4, [IS_CLOSING_CLASS].concat(openStateCssClasses));

        drawerEl.classList.add(IS_CLOSED_CLASS);
      }, TRANSITION_DURATION);
      /**
       * Modify the point at which `overflow-y: scroll` is added back to
       * the `html` (root) element, to avoid visible repositioning of page
       * elements when the page scrollbar reappears
       */

      setTimeout(function () {
        htmlEl.classList.remove(HIDE_OVERFLOW_Y_CLASS); // Sets the window scroll position, referenced from state

        setWindowScrollPosition();
      }, TRANSITION_DURATION / 4);
    }
  };
}();
/**
 * Set or unset a class on UI wrapper elements indicating the drawer is
 * in some state of transition
 * @see `assets/product-collapse.scss.liquid`
 * @param {Object} state - UI state
 * @param {NodeList} state.wrapperEls - Wrappers that should be aware of drawer state
 */


var setDrawerInTransitionOnWrapper = function setDrawerInTransitionOnWrapper(_ref7, inTransition) {
  var wrapperEls = _ref7.wrapperEls;

  if (inTransition === void 0) {
    inTransition = true;
  }

  var classListMethod = inTransition ? 'add' : 'remove';
  wrapperEls.forEach(function (el) {
    return el.classList[classListMethod](IS_DRAWER_OPEN_CLASS);
  });
};
/**
 * Helper to unset a class on UI wrapper elements indicating the drawer is
 * no longer in some state of transition
 * @param {Object} state
 */


var unsetDrawerInTransitionOnWrapper = function unsetDrawerInTransitionOnWrapper(state) {
  return setDrawerInTransitionOnWrapper(state, false);
};
/**
 * Handles UI updates for the drawer
 * Forks behavior and staggers timing for updates with drawers that display
 * content that is also shown in page flow
 *
 * IIFE wraps returned function and provides timeout placeholder variables
 * in closure
 *
 * @param {Object} state The new UI state
 */


var updateUI = function () {
  var baseStateChangeTimeout = null;
  var inFlowDisplayStateChangeTimeout = null;
  return function _updateUI(state) {
    var isOpen = state.isOpen,
        drawerEl = state.drawerEl;
    var displaysInPageFlow = drawerEl.dataset.displayInPageFlow;
    setDrawerTransitionStates(state);
    /**
     * If the drawer is opening ...
     */

    if (isOpen) {
      setDrawerInTransitionOnWrapper(state);
      inFlowDisplayStateChangeTimeout && clearTimeout(inFlowDisplayStateChangeTimeout);
      /**
       * ... and is set to show content that also appears in page flow ...
       */

      if (displaysInPageFlow) {
        /**
         * Toggle in-flow-display drawer classes, then use a timeout set to the
         * default transition duration to apply other class updates to the drawer
         * and its content
         */
        inFlowDisplayStateChangeUpdates(state);
        baseStateChangeTimeout = setTimeout(function () {
          baseStateChangeUpdates(state);
        }, TRANSITION_DURATION);
      } else {
        /**
         * ... Otherwise, just update the base set of drawer classes ...
         */
        baseStateChangeUpdates(state);
      }
      /**
       * ... or, if the drawer is closing ...
       */

    } else {
      baseStateChangeTimeout && clearTimeout(baseStateChangeTimeout);
      /**
       * ... update the base set of drawer classes ...
       */

      baseStateChangeUpdates(state);
      /**
       * ... and if the drawer is set to show content that also appears in page
       * flow, use a timeout set to the default transition duration to update
       * in-flow-display drawer classes
       */

      if (displaysInPageFlow) {
        inFlowDisplayStateChangeTimeout = setTimeout(function () {
          inFlowDisplayStateChangeUpdates(state);
          unsetDrawerInTransitionOnWrapper(state);
        }, TRANSITION_DURATION);
      } else {
        unsetDrawerInTransitionOnWrapper(state);
      }
    }
  };
}();
/**
 * Handle all UI and listener updates based on the provided state
 *
 * @param {Object} state The state to render against
 */


var render$5 = function render(state) {
  updateUI(state);
  updateKeyboardListeners(state);
};
/**
 * Handler for the toggle action
 *
 * @param {Object} event The event object
 */


var toggleHandler = function toggleHandler(event) {
  var _event$currentTarget$ =
  /** @type {DrawerToggleDataAttributes} */
  event.currentTarget.dataset,
      drawerAction = _event$currentTarget$.drawerAction,
      drawerId = _event$currentTarget$.drawerId,
      _event$currentTarget$2 = _event$currentTarget$.drawerPreventDefault,
      drawerPreventDefault = _event$currentTarget$2 === void 0 ? 'true' : _event$currentTarget$2;

  if (drawerPreventDefault.toLowerCase() === 'true') {
    event.preventDefault();
  }

  var drawerEl = document.getElementById(drawerId); // No need to run any further logic if we have no drawer to work with

  if (!drawerEl) {
    return;
  } // Only open Post Add to Cart drawer if a variant is selected


  if (drawerEl.id === POST_ADD_TO_CART_DRAWER_ID && !getUrlVariant()) {
    return;
  }

  var isOpen = isActionOpen(drawerAction);
  var newState = {
    isOpen: isOpen,
    drawerEl: drawerEl
  };

  if (isOpen) {
    newState.lastOpenToggleEl = event.currentTarget; // Let the FocusTrap module update the first/last focusable elements

    updateFocusableEls(drawerId); // Captures the window scroll position, saving it to state

    updateWindowScrollPosition();
  } // Update the module state


  stateHelper$1.updateState(newState); // Render all UI updates based on new state

  render$5(stateHelper$1.getState());
};
/**
 * Initialize Drawer toggles
 *
 * @param {Element} toggle Drawer toggle element to initialize
 */


var initToggle = function initToggle(toggle) {
  /**
   * `<a>` toggle elements are progressively-enhanced by JS and should
   * be treated as buttons when accessing the UI via screen readers.
   */
  if (toggle.tagName.toLowerCase() === 'a') {
    toggle.setAttribute('role', 'button');
  }
  /**
   * JS progressively-enhanced toggles have aria-labels added to them for
   * a better UX when accessed via screen readers.
   */


  var ariaLabel = toggle.dataset.drawerToggleAriaLabel;

  if (ariaLabel) {
    toggle.setAttribute('aria-label', ariaLabel); // This is cleanup, no longer needed once JS takes over.

    toggle.removeAttribute('data-drawer-toggle-aria-label');
  }

  toggle.addEventListener(CLICK_EVENT$1, toggleHandler);
};
/**
 * Initialize Drawer
 */


var init$a = function init() {
  stateHelper$1 = createState(Object.assign({}, DEFAULT_MODULE_STATE$2, {
    // Get all content wrapper elements
    wrapperEls: document.querySelectorAll(MAIN_CONTENT_WRAP_SELECTOR),
    htmlEl: document.querySelector('html')
  })); // Initialize toggles

  document.querySelectorAll(TOGGLE_SELECTOR + ", " + OVERLAY_SELECTOR).forEach(initToggle); // Initialize the FocusTrap module

  init$9();
};

/**
 * Throttles a function to only be called a certain interval. Does not pass
 * parameters to callback or preserve callback return value
 * @param {() => any} cb
 * @param {Number} interval
 * @returns {() => void}
 */

var throttle = function throttle(cb, interval) {
  var runThisTime = false;
  setInterval(function () {
    if (runThisTime) cb();
    runThisTime = false;
  }, interval);
  return function () {
    runThisTime = true;
  };
};
/**
 * Determine which section should be shown in the URL hash based on the scroll position
 * Loops through the headings to find the section that is visible at the cutoff of the top ~third of the screen
 * We _could_ use IntersectionObserver but it isn't supported in IE11 and this is way tinier than a polyfill.
 * Since it doesn't know where the sections end,
 * it finds the section that is _right before_ the heading that is highest up but still below the cutoff
 * @param {HTMLElement[]} targets
 */


var getMatchingTarget = function getMatchingTarget(targets) {
  var screenHeight = window.innerHeight;
  var isAtPageBottom = screenHeight + document.documentElement.scrollTop >= document.documentElement.scrollHeight; // If we have scrolled all the way to the bottom, it should auto-select the last item

  if (isAtPageBottom) return targets[targets.length - 1];
  /** The index in the targets array of the highest heading that is below the cutoff */

  var firstHeadingBelowCutoff = targets.findIndex(function (thisTarget) {
    // The bottom of the target is the top of the corresponding heading
    var headingTop = thisTarget.getBoundingClientRect().bottom; // 0.3 is the cutoff of where it is looking for the active section
    // It is the % of the distance down from the top of the screen where it is looking

    var isBelowCutoff = headingTop > 0.3 * screenHeight;
    return isBelowCutoff;
  }); // If all of the headings are above the cutoff, return the last heading

  if (firstHeadingBelowCutoff === -1) return targets[targets.length - 1]; // We want to select the target for the section that is right above the first heading below the cutoff
  // The section that is at the cutoff is the section right before the first section below the cutoff
  // if firstHeadingBelowCutoff is zero, this returns undefined because all of the sections are too low

  return targets[firstHeadingBelowCutoff - 1];
};
/**
 * Sets up active state of the active item in the sticky nav
 */


var init$b = function init() {
  var links = document.querySelectorAll('.de-js-StickyMenuItem');

  var targets = _toConsumableArray(links).map(function (link) {
    return document.getElementById(link.getAttribute('href').replace(/^#/, ''));
  });

  var lastHash = window.location.hash;
  /**
   * Sets the correct classes on all the sticky nav items
   */

  var updateLinksState = function updateLinksState() {
    links.forEach(function (link) {
      if (link.getAttribute('href') === window.location.hash) {
        link.classList.add(IS_ACTIVE_CLASS);
      } else {
        link.classList.remove(IS_ACTIVE_CLASS);
      }
    });
  };
  /**
   * Updates the URL hash and links if the user have scrolled to a different
   * section
   */


  var updateScrollState = function updateScrollState() {
    var matchingTarget = getMatchingTarget(targets);
    var newHash = "#" + (matchingTarget ? matchingTarget.id : ''); // Using replaceState instead of window.location.hash because we don't want it to jump

    if (lastHash !== newHash) {
      lastHash = newHash;
      updateHash(newHash);
    }

    updateLinksState();
  };

  updateScrollState();
  window.addEventListener('hashchange', updateLinksState);
  window.addEventListener('scroll', throttle(updateScrollState, 100));
};

var init$c = function init() {
  // Initialize toggles
  jQuery('.faq_accordion_head').on('click', function () {
    var $accordion_parent = jQuery(this).parent('.faq_accordion');
    var $accordion_body = $accordion_parent.find('.faq_accordion_body');
    $accordion_parent.siblings().removeClass('open');
    $accordion_parent.toggleClass('open');
    var headerHeight = jQuery('.de-PageWrap-header').height();
    var productNavHeight = jQuery('.de-ProductMenu').height();
    var totalHeightOffset = headerHeight + productNavHeight;

    if ($accordion_parent.hasClass('open')) {
      setTimeout(function () {
        jQuery('html, body').scrollTop($accordion_body.offset().top - totalHeightOffset);
      }, 300);
    }
  });
};

// @ts-check
/**
 * Root element(s)
 */

/** @type {HTMLButtonElement} */

var addToCartButtonEl$1 = document.querySelector("." + JS_PREFIX + "AddToCart-btn");
/**
 * Module constants
 */

var CLICK_EVENT$2 = 'click';
var KEY_DOWN_EVENT$1 = 'keydown';
var ESCAPE_KEY_VALUE$1 = 'escape';
/**
 * Has the document binding been initialized
 */

var isListenerInitialized = false;
/**
 * Helper for detecting the "Escape" keyboard key
 *
 * @param {string} key A keyboard event `key`
 * @returns {boolean}
 */

var isEscapeKey$1 = function isEscapeKey(key) {
  return key.toLowerCase() === ESCAPE_KEY_VALUE$1;
};
/**
 * The keyboard event handler
 *
 * @param {KeyboardEvent} keyboardEvent
 */


var keyboardEventHandler$1 = function keyboardEventHandler(_ref) {
  var key = _ref.key;

  /**
   * For better accessibility, the modal should close via the "escape" key
   */
  if (isEscapeKey$1(key) && window.BISPopover && window.BISPopover.form) {
    window.BISPopover.form.hide();
  }
};
/** @type {HTMLElement | undefined} */


var lastFocusedElement;
/**
 * Handle ATC click event
 *
 * Sets up binding to allow BIS modal closing via Escape key
 * and overrides BIS Modal "hide()" to reset focus on "Email Me" CTA button
 * for better keyboard accessibility UX
 */

var onAddToCartClick$1 = function onAddToCartClick() {
  if (window.BISPopover && window.BISPopover.form) {
    /**
     * Store the element that was focused before the modal was opened. It will
     * be focused after the modal is closed
     */
    lastFocusedElement =
    /** @type {HTMLElement} */
    document.activeElement; // Save popover-bound original `form.hide` function

    var originalFormHideFunction = window.BISPopover.form.hide.bind(window.BISPopover.form);
    /**
     * Intercept `form.hide` (bound to the modal close button [x]) and also
     * custom-bound to ESC keydown, to re-focus where the user focus was
     * before opening the modal
     */

    window.BISPopover.form.hide = function () {
      originalFormHideFunction();
      lastFocusedElement.focus();
    };
  }

  if (!isListenerInitialized) {
    // Add keydown listener to document
    bindDocumentKeyDown();
    isListenerInitialized = true;
  }
};
/**
 * Add event listener to document
 */


var bindDocumentKeyDown = function bindDocumentKeyDown() {
  /** @type {HTMLIFrameElement} */
  var BISPopeverEl = document.querySelector('#BIS_frame');

  if (BISPopeverEl) {
    BISPopeverEl.contentDocument.addEventListener(KEY_DOWN_EVENT$1, keyboardEventHandler$1);
  }
};
/**
 * Initialize BISPopover accessibility enhancement(s)
 */


var init$d = function init() {
  /**
   * Listener for Add to Cart button
   */
  if (addToCartButtonEl$1) {
    addToCartButtonEl$1.addEventListener(CLICK_EVENT$2, onAddToCartClick$1);
  }
};

var initialState$3 = {
  color: null,
  size: null
};
var state$4 = createState(initialState$3);

var getVariantFromState = function getVariantFromState(_ref) {
  var color = _ref.color,
      size = _ref.size;
  return color && size && getSelectedVariant({
    color: color,
    size: size
  });
};

var getComputedState = function getComputedState(state) {
  return {
    color: state.color,
    size: state.size,
    variant: getVariantFromState(state)
  };
};

var setUpListeners = function setUpListeners() {
  handleSizeSelect(function (size) {
    state$4.updateState({
      size: size
    });
  });
  handleColorSelect(function (color) {
    state$4.updateState({
      color: color
    });
    displayRRPPrices(color);
  });
  onVariantModification(function () {
    var fullState = getComputedState(state$4.getState());
    updateOptionStates(fullState);
  });
}; // Handles variant change


state$4.onChange(function (state) {
  var variant = getVariantFromState(state);
  onVariantSelect$3(variant);
  onVariantSelect$1(variant);
  onVariantSelect(variant);
  updateUrlVariant(variant && variant.id);

  if (variant) {
    // MasterSelect requires a full variant to update
    onVariantSelect$2(variant); // The updateFulfillmentOptionsUI function will be undefined on page load,
    window.vars.selectedVariant = variant;

    if (window.inventoryLocationsDisplay && window.inventories) {
      window.inventoryLocationsDisplay.changeVariant(variant.id);
    }

    if (window.vueATC) {
      window.vueATC.changeVariant(variant.id);
    }
  } else {
    window.vars.selectedVariant = null;

    if (window.inventoryLocationsDisplay && window.inventories) {
      window.inventoryLocationsDisplay.changeVariant(null);
    }

    if (window.vueATC) {
      window.vueATC.changeVariant(null);
    }
  }
}, function (state) {
  return [getVariantFromState(state)];
}); // Handles color change

state$4.onChange(function (_ref2) {
  var color = _ref2.color;
  if (!color) return;
  onColorSelect$2(color);
  onColorSelect(color); // Model code can be updated without size

  onColorSelect$3(color);
  displayRRPPrices(color);
}, function (state) {
  return [state.color];
}); // Handles swatch change (color/size)

state$4.onChange(function (state) {
  var color = state.color,
      size = state.size;
  var variant = getVariantFromState(state);
  updateOptionStates({
    color: color,
    size: size,
    variant: variant
  }); // Price can be updated even if no variant (color + size) has been selected
  // @see: https://app.gitbook.com/@decathlonusa/s/shopify/product-feature/product-page#price

  onSwatchChange({
    color: color,
    variant: variant
  });

  if (window.vars.thresholdForGateways.afterpay.enabled && window.vars.thresholdForGateways.afterpay.threshold && variant) {
    displayPaymentGateway(variant.price, window.vars.thresholdForGateways.afterpay.threshold * 100, 'afterpay');
  }

  if (window.vars.thresholdForGateways.zipPay.enabled && window.vars.thresholdForGateways.zipPay.threshold && variant) {
    displayPaymentGateway(variant.price, window.vars.thresholdForGateways.zipPay.threshold * 100, 'zip-pay');
  }
}, function (state) {
  return [state.size, state.color];
});

var selectUrlVariant = function selectUrlVariant() {
  var urlVariantId = Number(getUrlVariant());
  var variant = getSelectedVariant({
    id: urlVariantId
  });

  if (variant) {
    var options = getVariantOptions(variant);

    var targetColorSwatch = _toConsumableArray(swatchOptionEls).find(function (swatch) {
      return swatch.value === options.color;
    });

    var targetSizeSwatch = _toConsumableArray(swatchOptionEls$1).find(function (swatch) {
      return swatch.value === options.size;
    });

    if (targetColorSwatch) {
      targetColorSwatch.click();
    }

    if (targetColorSwatch) {
      targetSizeSwatch.click();
    }
  } else {
    selectFirstSwatch();
  }

  if (variant) return urlVariantId;
};

var displayPaymentGateway = function displayPaymentGateway(price, threshold, gateway) {
  var dNoneClassName = 'de-u-hidden';
  jQuery(".product-" + gateway + "-info").toggleClass(dNoneClassName, price < threshold);
  jQuery(".product-" + gateway + "-disabled-info").toggleClass(dNoneClassName, price >= threshold);
};

var displayRRPPrices = function displayRRPPrices(color) {
  var variant = variantsJSON.find(function (variant) {
    return getVariantOptions(variant).color === color;
  });
  var variantModelCode = getModelCodeFromVariant(variant);
  var metafields = window.vars.rrpMetafields;
  var product = window.vars.productJSON;
  var productPriceEl = jQuery('#product-rrp-price');

  if (!metafields || !metafields.rrp_prices) {
    productPriceEl.hide();
    return;
  }

  var rrpPriceObj = metafields.rrp_prices.find(function (rrp) {
    return rrp.modelcode === variantModelCode;
  });
  console.log(rrpPriceObj);
  var rrpPriceData = rrpPriceObj && rrpPriceObj.PriceRRP ? parseInt(rrpPriceObj.PriceRRP, 10) : false;
  var rrpPrice = rrpPriceData > product.price ? (rrpPriceData / 100).toFixed(2) : false;
  rrpPrice ? function () {
    productPriceEl.text("RRP*: " + ('$' + rrpPrice));
    productPriceEl.show();
  }() : productPriceEl.hide();
};

var init$e = function init$9() {
  return new Promise(function ($return, $error) {
    init$4();
    init$3();
    setUpListeners();
    reviewsInit();
    init$f();
    init();
    init$1();
    init$2();
    init$8();
    init$5();
    var urlVariant = selectUrlVariant();
    init$b();
    init$d();
    init$6();
    init$7();
    init$a();
    init$c();
    return $return(urlVariant); // Removed for AU
    // Suggest leaving the async setup for fulfillment options to last
    // updateFulfillmentOptionsUI = await storePickup.init();

    /**
     * The updateFulfillmentOptionsUI function will be undefined in the master
     * updateUI function on page load, so call here as soon as it's defined
     */
    // if (urlVariant) updateFulfillmentOptionsUI({ id: urlVariant });
  });
}; // Call the async init to return the Promise and log errors


init$e().then(function () {
  displayRRPPrices(state$4.getState().color);
  return console.log('Product page initialized.');
}).catch(function (error) {
  return console.error(error);
}); //GOOGLE TRANSLATE

var TRANSLATE_API_KEY = 'AIzaSyBmV081v1C1hz45hJpCpcprUPOhrNqDekY';
var SOURCE_LANGUAGE = '';
var TARGET_LANGUAGE = 'en';

function translateReview(text, parentEl, type) {
  var translateURL = "https://www.googleapis.com/language/translate/v2" + "?key=" + TRANSLATE_API_KEY + "&source=" + SOURCE_LANGUAGE + "&target=" + TARGET_LANGUAGE + "&q=" + text + "&format=text&callback=?";
  jQuery.getJSON(translateURL, function (result) {
    if (!result.error) {
      console.log('CONTENTS: ' + result.data.translations[0].translatedText);
      parentEl.find('.review-' + type + '-translated').text(result.data.translations[0].translatedText);
      show_review(parentEl, 'original', 'translated');
      parentEl.addClass('translated');
    } else {
      console.log(result.error);
    }
  });
}

jQuery('.btn-original').on('click', function (e) {
  e.preventDefault();
  var parentEl = jQuery(this).closest('.de-CustomerReview');
  show_review(parentEl, 'translated', 'original');
});
jQuery('.btn-translated').on('click', function (e) {
  e.preventDefault();
  var parentEl = jQuery(this).closest('.de-CustomerReview');
  var title = parentEl.find('.review-title-original').html();
  var body = parentEl.find('.review-body p').html();

  if (!parentEl.hasClass('translated')) {
    translateReview(title, parentEl, 'title');
    translateReview(body, parentEl, 'body');
  } else {
    console.log('Already translated');
    show_review(parentEl, 'original', 'translated');
  }
});

function show_review(parentEl, h, s) {
  parentEl.find('.review-title-' + s).show();
  parentEl.find('.review-body-' + s).show();
  parentEl.find('.review-title-' + h).hide();
  parentEl.find('.review-body-' + h).hide();
  parentEl.find('.btn-' + h).addClass('active');
  parentEl.find('.btn-' + s).removeClass('active');
}
