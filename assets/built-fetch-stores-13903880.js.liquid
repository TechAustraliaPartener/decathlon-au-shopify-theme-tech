// @ts-check

/**
 * ENVIRONMENT
 */
var PROD_HOSTNAME = 'www.decathlon.com';
/**
 * PREFIXES
 */

/**
 * All styling CSS classes should have the CSS_PREFIX
 */

var CSS_PREFIX = 'de-';
/**
 * All utility classes should have the CSS_UTILITY_PREFIX
 */

var CSS_UTILITY_PREFIX = CSS_PREFIX + "u-";
/**
 * All JS-bound CSS classes should have the JS_PREFIX
 */

var JS_PREFIX = "js-" + CSS_PREFIX;
/**
 * The CSS utility class for visibly hiding elements
 * @todo Refactor to `HIDDEN_CSS_CLASS`, `IS` is not needed, not a boolean
 */

var IS_HIDDEN_CLASS = CSS_UTILITY_PREFIX + "hidden";
/**
 * GENERAL
 */

/**
 * A flag to indicate that a checkout webURL was created
 * using the Storefront API
 */

var IS_CUSTOM_CHECKOUT = CSS_PREFIX + "is-custom-checkout";
/**
 * Name for storing a Storefront API health check boolean
 */

var STOREFRONT_API_IS_TESTED = CSS_PREFIX + "storefront-api-is-tested";
/**
 * A timeout in minutes for caching a Storefront API health check
 */

var STOREFRONT_API_TEST_TIMEOUT_MINUTES = parseInt(undefined, 10) || 15;

// @ts-check
/**
 * Runtime check for prod environment. Just does a test against the hostname.
 * This is being used as a fallback for `process.env`-set variables
 */

var isProd = window && window.location && new RegExp(window.location.hostname).test(PROD_HOSTNAME);
/**
 * Runtime check for non-prod environment. Anything other than production is
 * considered development
 */

var isDev = !isProd;

var config = {
  SELECTORS: {
    PREFIX: '.js-de-',

    get CART() {
      return this.PREFIX + "cart";
    },

    get LOGOUT() {
      return this.PREFIX + "logout";
    },

    get CART_COUNT() {
      return this.PREFIX + "cart-count";
    },

    get CUSTOMER_ID() {
      return this.PREFIX + "cid";
    },

    CHECKOUT: {
      // @see https://help.shopify.com/en/themes/development/layouts/checkout#step-identification
      STEPS: {
        CONTACT_INFORMATION: 'contact_information',
        SHIPPING_METHOD: 'shipping_method',
        PAYMENT_METHOD: 'payment_method',
        PROCESSING: 'processing',
        REVIEW: 'review'
      },
      URLS: {
        ROOT_URL: '/',

        get CART_URL() {
          return this.ROOT_URL + "cart";
        }

      },
      TEXT: {
        CART_TEXT: 'Cart'
      },
      CLASSES: {
        BREADCRUMBS: {
          BC_ROOT: 'breadcrumb',

          get PREFIX() {
            return this.BC_ROOT + "__";
          },

          get BC_LINK() {
            return this.PREFIX + "link";
          },

          get BC_ITEM() {
            return this.PREFIX + "item";
          },

          get BC_ITEM_COMPLETED() {
            return this.BC_ITEM + "--completed";
          },

          get BC_CHEVRON_ICON() {
            return this.PREFIX + "chevron-icon";
          }

        },
        STEPS: {
          STEP_ROOT: 'step',

          get PREFIX() {
            return this.STEP_ROOT + "__";
          },

          get STEP_FOOTER() {
            return this.PREFIX + "footer";
          },

          get STEP_FOOTER_PREVIOUS_LINK() {
            return this.STEP_FOOTER + "__previous-link";
          }

        },
        LOGO: 'logo'
      },
      ATTRIBUTES: {
        BREADCRUMBS: {
          DATA_TREKKIE_ID: {
            TREKKIE_NAME: 'data-trekkie-id',

            get TREKKIE_VALUE() {
              return config.SELECTORS.CHECKOUT.CLASSES.BREADCRUMBS.BC_ROOT + "_cart_link";
            }

          }
        }
      }
    }
  },
  STOREFRONT_API: {
    HEADER_NAME: 'X-Shopify-Storefront-Access-Token',

    /**
     * This key is public, and the fallback is here in case the project is built
     * without a value passed in.
     * Will not break the compiled asset file. The key would be accessible
     * in either case.
     */
    KEY:  (isDev ? 'd5d7d74c65c818a0d63d8926a9d7ec01' : 'f6c7c4e4db56de88295c2ba45762a331'),
    URL: '/api/graphql'
  },
  NO_CACHE_HEADERS: {
    'cache-control': 'no-store',
    pragma: 'no-store',
    cache: 'no-store'
  }
};
var DEBUG = undefined === 'true';

const storesData = (function () {
  return new Promise(function (resolve, reject) {
    var data = window.masterStoresVisual;
    data.length > 0 ? resolve(data) : reject(new Error('Stores data array is empty.'));
  });
});

/**
 * Transforms Military Time to 12h Time Format
 * @param {number} time - Military Time (0000-2359)
 * @returns {number} - 12h Time Format (1:20am)
 */
var militaryTo12hFormat = function militaryTo12hFormat(time) {
  var militaryHours = Number(time.substring(0, 2));
  var militaryMinutes = time.substring(2, 4);
  var hours = (militaryHours + 11) % 12 + 1;
  var amOrPm = militaryHours < 12 || militaryHours === 24 ? 'am' : 'pm';
  return hours + ":" + militaryMinutes + amOrPm;
};
/**
 * Lookup store and determine open/close time by day offset
 * @param {Object} params
 * @param {string} storeId - A store ID
 * @param {number} day - Day of the week (0 Sunday - 6 Saturday)
 * @returns {Object} - A store's opening and closing time of the specified day
 */


var hoursObj = {};

for (var i = 0; i < window.masterStoresVisual.length; i++) {
  var store = window.masterStoresVisual[i];
  hoursObj[store.id] = store.hours.map(function (day) {
    return [day.open, day.close];
  });
}

var visualStoresHours = hoursObj;

var getStoreOpenClose = function getStoreOpenClose(_ref) {
  var storeId = _ref.storeId,
      day = _ref.day;

  for (var i = 0; i < window.masterStoresVisual.length; i++) {
    var x = window.masterStoresVisual[i];

    if (x.id === storeId) {
      if (x.is_same_hours_weekly === false && x.tooltip_hours === true) {
        var weekday = new Date().getDay();
        var days = ['Sun ', 'Mon ', 'Tue ', 'Wed ', 'Thu ', 'Fri ', 'Sat ', 'Sun '];

        for (var d = 0; d < 7; d++) {
          var _day = days[d];

          if (weekday === d) {
            var nameDay = _day;
          }
        }
      } else {
        var nameDay = 'Open ';
      }
    }
  }

  var store = visualStoresHours[storeId];
  var storeDay = null;

  if (day > 6) {
    storeDay = store[0];
  } else if (day < 0) {
    storeDay = store[6];
  } else {
    storeDay = store[day];
  }

  return {
    open: storeDay && storeDay[0],
    close: storeDay && storeDay[1],
    nameDay: nameDay
  };
};

const getStoreHours = (function (storeId) {
  var openTime;
  moment.tz.add('Australia/ACT|AEDT AEST|-b0 -a0|01010101010101010101010|1C140 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0');
  var date = moment().tz('Australia/ACT');
  var currentMilitaryTime = Number(date.format('HHmm'));
  var day = date.weekday();
  var store = {
    // Hours from masterStoresVisual comes from Mon to Sun, whereas from moment it comes from Sun to Sat, so we need to remove 1 for today
    yesterday: getStoreOpenClose({
      storeId: storeId,
      day: day - 2
    }),
    today: getStoreOpenClose({
      storeId: storeId,
      day: day - 1
    }),
    tomorrow: getStoreOpenClose({
      storeId: storeId,
      day: day
    })
  };
  var openTimeToday = militaryTo12hFormat(store.today.open);
  var openTimeTomorrow = militaryTo12hFormat(store.tomorrow.open);
  var closeTimeToday = militaryTo12hFormat(store.today.close);
  var closeTimeTomorrow = militaryTo12hFormat(store.tomorrow.close);

  if (currentMilitaryTime >= Number(store.today.open) && currentMilitaryTime < Number(store.today.close)) {
    openTime = store.today.nameDay + " " + openTimeToday + "-" + closeTimeToday;
  } else if (currentMilitaryTime >= Number(store.today.close) && currentMilitaryTime < 2400) {
    openTime = "Open tomorrow " + openTimeTomorrow + "-" + closeTimeTomorrow;
  } else if (currentMilitaryTime >= 0 && currentMilitaryTime < Number(store.tomorrow.open)) {
    openTime = store.today.nameDay + " " + openTimeToday + "-" + closeTimeToday;
  }

  return openTime ? {
    today: openTime
  } : {};
});

function fetchStores () {
  return new Promise(function ($return, $error) {
    var stores, storesWithHours;

    var $Try_1_Catch = function (error) {
      try {
        console.error('Error fetch stores: ', error);
        throw error;
      } catch ($boundEx) {
        return $error($boundEx);
      }
    };

    try {
      return Promise.resolve(storesData()).then(function ($await_2) {
        try {
          stores = $await_2;
          storesWithHours = stores.map(function (store) {
            var storeHours = getStoreHours(store.id);
            return Object.assign({}, store, {
              // Street 2 field used for hours data in ShipHawk setup.
              // @TODO When updating for final API decision from DE, change to 'today'
              street2: storeHours.today,
              tomorrow: storeHours.tomorrow
            });
          });
          return $return(storesWithHours);
        } catch ($boundEx) {
          return $Try_1_Catch($boundEx);
        }
      }, $Try_1_Catch);
    } catch (error) {
      $Try_1_Catch(error);
    }
  });
}

export { CSS_PREFIX as C, DEBUG as D, IS_CUSTOM_CHECKOUT as I, JS_PREFIX as J, PROD_HOSTNAME as P, STOREFRONT_API_TEST_TIMEOUT_MINUTES as S, STOREFRONT_API_IS_TESTED as a, CSS_UTILITY_PREFIX as b, IS_HIDDEN_CLASS as c, fetchStores as f, config as s };
