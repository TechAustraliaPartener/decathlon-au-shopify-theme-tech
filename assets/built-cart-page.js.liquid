import { V as Vue } from './built-vue.esm-661ab646.js';

/* global CartJS, Shopify */

Vue.config.errorHandler = function (err, vm, info) {
  var cart = CartJS.cart || window.vars.cartPayload;
  var logCart = {
    attributes: cart.attributes,
    item_count: cart.item_count,
    token: cart.token,
    items: cart.items.map(function (item) {
      return {
        title: item.title,
        handle: item.handle,
        product_id: item.product_id,
        variant_id: item.variant_id,
        variant_options: item.variant_options,
        url: item.url
      };
    })
  };
  console.log('Vue error', err);
  Rollbar.error("Vue error", {
    'err': err,
    'cart': JSON.stringify(logCart)
  }, function (err, data) {
    if (err) {
      console.log("Error while reporting error to Rollbar: ", err);
    } else {
      console.log("Error successfully reported to Rollbar. UUID:", data.result.uuid);
    }
  });

  if (window.location.pathname === '/cart') {
    console.log({
      'event': 'cart_clear',
      'cart': CartJS.cart || window.vars.cartPayload,
      'err': err,
      'vm': vm,
      'info': info
    });
    Rollbar.error("Cart clear triggered", {
      'cart': JSON.stringify(logCart),
      'err': err,
      'vm': vm,
      'info': info
    }, function (err, data) {
      if (err) {
        console.log("Error while reporting error to Rollbar: ", err);
      } else {
        console.log("Error successfully reported to Rollbar. UUID:", data.result.uuid);
      }

      CartJS.clear({
        success: function success() {
          window.location.reload();
        }
      });
    });
  }
};

var cartInit = false;
var invInit = false;
var storesSort = window.masterStores.map(function (a) {
  return a.name;
});

var emptyLoc = function emptyLoc(name) {
  var empty = {
    available: 0,
    distance: 0,
    id: "0",
    inStock: 0,
    name: name,
    pickupOption: false
  };
  return empty;
};

var emptyInventoryItem = window.masterStores.map(function (store) {
  return emptyLoc(store.name);
});
var emptyDelivery = {
  name: 'Delivery',
  ready: 'Unavailable for delivery',
  available: 0,
  inStock: 0,
  availability: {
    class: 'out',
    text: 'Out of Stock'
  },
  hours: '2-6 day delivery in Metro areas'
};

function addMasterStoresData(inventoryItem, item) {
  inventoryItem.locations = inventoryItem.locations.filter(function (loc) {
    return storesSort.indexOf(loc.name) !== -1;
  });
  var locs = inventoryItem.locations;
  var onlineInventoryLocs = locs.filter(function (loc) {
    return window.onlineInventoryStores.indexOf(loc.name) !== -1;
  });
  var onlineInventoryItem;

  if (onlineInventoryLocs.length > 0) {
    var totalAvailable = onlineInventoryLocs.map(function (loc) {
      return loc.available;
    }).reduce(function (a, b) {
      return a + b;
    }, 0);
    onlineInventoryItem = {
      name: 'Delivery',
      available: totalAvailable,
      inStock: totalAvailable > 0 ? 1 : 0,
      hours: '2-6 day delivery in Metro areas',
      availability: {
        class: totalAvailable > 2 ? 'in' : totalAvailable > 0 ? 'low' : 'out',
        text: totalAvailable > 2 ? 'In Stock' : totalAvailable > 0 ? 'Low Stock' : 'Out of Stock'
      },
      ready: totalAvailable > 0 ? 'Available for delivery' : 'Unavailable for delivery'
    };
  } else {
    onlineInventoryItem = {
      name: 'Delivery',
      ready: 'Unavailable for delivery',
      available: 0,
      inStock: 0,
      availability: {
        class: 'out',
        text: 'Out of Stock'
      },
      hours: '2-6 day delivery in Metro areas'
    };
  }

  inventoryItem.delivery = onlineInventoryItem;
  console.log(inventoryItem, item);
  var duplicateStores = window.masterStores.filter(function (loc) {
    return loc.duplicate;
  });
  duplicateStores.forEach(function (loc) {
    var alreadyAdded = inventoryItem.locations.find(function (obj) {
      return obj.name === loc.name;
    });

    if (!alreadyAdded) {
      var thisLoc = inventoryItem.locations.find(function (obj) {
        return obj.name === loc.duplicate;
      });

      if (thisLoc && thisLoc.name !== 'Genesis' && item.grams <= 22000) {
        var duplicateLoc = JSON.parse(JSON.stringify(thisLoc));
        duplicateLoc.name = loc.name;
        inventoryItem.locations.push(duplicateLoc);
      }
    }
  });

  var _loop = function _loop() {
    var masterLoc = window.masterStores[i];
    var alreadyAdded = inventoryItem.locations.find(function (obj) {
      return obj.name === masterLoc.name;
    });

    if (!alreadyAdded) {
      inventoryItem.locations.push(emptyLoc(masterLoc.name));
    }
  };

  for (var i = window.masterStores.length - 1; i >= 0; i--) {
    _loop();
  } //inventoryItem.locations = inventoryItem.locations.filter(loc => window.ccStores.indexOf(loc.name) !== -1);

}

function supplementCart(cart) {
  console.log(cart, invInit);

  for (var i = cart.items.length - 1; i >= 0; i--) {
    var item = cart.items[i];

    if (invInit[item.product_id] && invInit[item.product_id].product.variants[item.variant_id]) {
      var invItem = invInit[item.product_id].product.variants[item.variant_id].inventoryItem;
      addMasterStoresData(invItem, item);
      item.delivery = invItem.delivery;
      item.locations = invItem.locations;
    } else {
      console.log(i, 'No locations info for ' + item.title);
      Rollbar.warning("Empty Inventory Item assigned", {
        'title': item.title,
        'product_id': item.product_id,
        'variant_id': item.variant_id,
        'url': item.url
      });
      item.locations = JSON.parse(JSON.stringify(emptyInventoryItem));
      item.delivery = emptyDelivery;
    }
  }

  return cart;
}
/**
 * Attach listeners to open collapse elements
 */


var initCartDisplay = function initCartDisplay(cart) {
  window.cartDisplay = new Vue({
    el: '#cartDisplay',
    data: {
      cart: supplementCart(JSON.parse(JSON.stringify(cart))),
      masterStores: window.masterStores,
      pickupStores: window.masterStores.filter(function (loc) {
        return window.ccStores.indexOf(loc.name) !== -1;
      }),
      favStore: window.vars.favStore || {},
      deliveryOption: window.vars.deliveryOption,
      override: false
    },
    methods: {
      changeWholeData: function changeWholeData(newData, part) {
        var changeData = part ? this.$data[part] : this.$data;
        Object.keys(changeData).forEach(function (key) {
          return changeData[key] = null;
        });
        Object.entries(newData).forEach(function (entry) {
          return Vue.set(changeData, entry[0], entry[1]);
        });

        if (this.$data.override) {
          // TODO: Remove timeout and lock onto re-render
          setTimeout(function () {
            jQuery('.checkout-btn').click();
          }, 300);
        }
      },
      money: function money(price) {
        return "$" + (price / 100).toFixed(2);
      },
      updateQuantity: function updateQuantity(lineIndex, newQty) {
        console.log(lineIndex, newQty);
        CartJS.updateItem(lineIndex, newQty);
      },
      setFavStore: function setFavStore(event) {
        var masterStore = window.masterStores.find(function (obj) {
          return obj.id === event.target.value;
        });

        if (masterStore) {
          localStorage.setItem('favoritedStore', JSON.stringify(masterStore));
          window.vars.favStore = JSON.parse(localStorage.getItem('favoritedStore'));
          this.changeWholeData(window.vars.favStore, 'favStore');
          localStorage.setItem('deliveryOption', 'Click & Collect');
          window.vars.deliveryOption = localStorage.getItem('deliveryOption') || 'Delivery';
          this.$data.deliveryOption = window.vars.deliveryOption;
        }
      },
      setDeliveryOption: function setDeliveryOption(event) {
        localStorage.setItem('deliveryOption', event.target.value);
        window.vars.deliveryOption = localStorage.getItem('deliveryOption') || 'Delivery';
        this.$data.deliveryOption = window.vars.deliveryOption;
      },
      checkAvailability: function checkAvailability(item) {
        var app = this;

        if (!item.locations) {
          return 'out';
        }

        var checkLoc = item.delivery;

        if (app.deliveryOption !== 'Delivery') {
          checkLoc = item.locations.find(function (obj) {
            return obj.name === app.favStore.name;
          });
        }

        return checkLoc.inStock > 0 ? 'in' : 'out';
      },
      currentMax: function currentMax(item) {
        // Let availabilities = item.locations.map(a => a.available);
        // return Math.max(checkLoc);
        var app = this;
        var checkLoc = item.delivery;

        if (app.deliveryOption !== 'Delivery') {
          checkLoc = item.locations.find(function (obj) {
            return obj.name === app.favStore.name;
          });
        }

        return checkLoc.available;
      },
      deliveryMax: function deliveryMax(item) {
        var checkLoc = item.delivery;
        console.log('Delivery', checkLoc.available);
        return checkLoc.available;
      },
      favStoreMax: function favStoreMax(item) {
        // Let availabilities = item.locations.map(a => a.available);
        // return Math.max(checkLoc);
        var app = this;
        var checkLoc = item.locations.find(function (obj) {
          return obj.name === app.favStore.name;
        });
        console.log('favStore', checkLoc.available);
        return checkLoc ? checkLoc.available : 0;
      },
      availabilityMessages: function availabilityMessages(item) {
        var messages = [];
        var app = this;
        var delivery = item.delivery;
        var deliveryMessage = "<div class=\"" + (delivery.inStock ? item.quantity <= delivery.available ? 'available' : 'low' : 'unavailable') + "\"><p>" + (delivery.inStock ? item.quantity <= delivery.available ? 'Available' : 'Not all items available' : 'Unavailable') + " for delivery</p></div>";
        messages.push(deliveryMessage);

        if (app.favStore && app.favStore.name) {
          var favStoreInventory = item.locations.find(function (obj) {
            return obj.name === app.favStore.name;
          });
          var ccMessage = "<div class=\"" + (favStoreInventory.inStock ? item.quantity <= favStoreInventory.available ? 'available' : 'low' : 'unavailable') + "\"><p>" + (favStoreInventory.inStock ? item.quantity <= favStoreInventory.available ? 'Available' : 'Not all items available' : 'Unavailable') + " for click & collect</p></div>";
          messages.push(ccMessage);
        }

        return messages.join('');
      },
      cartModificationsMessage: function cartModificationsMessage() {
        var app = this;
        var items = app.$data.cart.items;
        var itemsToRemove = 0;

        for (var i = items.length - 1; i >= 0; i--) {
          var item = items[i];
          var checkLoc = item.delivery;

          if (app.deliveryOption !== 'Delivery') {
            checkLoc = item.locations.find(function (obj) {
              return obj.name === app.favStore.name;
            });
          }

          if (checkLoc.inStock < 1) {
            itemsToRemove++;
          }
        }

        if (itemsToRemove > 0) {
          return itemsToRemove + " " + (itemsToRemove > 1 ? 'items' : 'item') + " unavailable for " + app.deliveryOption + " will be removed from your cart";
        }

        return '';
      },
      prepareCart: function prepareCart(event) {
        var app = this;

        if (app.override) {
          return true;
        }

        var updateCartPayload = {};

        for (var i = app.cart.items.length - 1; i >= 0; i--) {
          var item = app.cart.items[i];
          var currentMax = app.currentMax(item);

          if (item.quantity > currentMax) {
            updateCartPayload[item.variant_id] = currentMax;
          }
        }

        if (JSON.stringify(updateCartPayload) === '{}') {
          return true;
        }

        event.preventDefault();
        CartJS.updateItemQuantitiesById(updateCartPayload, {
          success: function success() {
            app.$data.override = true;
          }
        });
        return false;
      }
    }
  });
  jQuery('.de-u-fade').addClass('in');
  jQuery('#cartSpinner').addClass('de-u-hidden');
};

jQuery(document).on('cart.ready', function (event, cart) {
  cartInit = cart;
  console.log('CART READY', event, cart);
  tryInit();
});
document.addEventListener('tomitLoaded', function () {
  window.tomitProductInventoryInfo.getProductsInventoryInformation(window.vars.tomitCartPayload).then(function (inventory) {
    invInit = inventory;
    console.log('INV READY', inventory);
    tryInit();
  });
});

function tryInit() {
  if (cartInit && invInit) {
    initCartDisplay(cartInit);
  }
}

jQuery(document).on('cart.requestComplete', function (event, cart) {
  window.cartDisplay.changeWholeData(supplementCart(cart), 'cart');
  jQuery('.js-de-cart__subtotal').text(Shopify.formatMoney(cart.total_price));
  jQuery('.afterpay-info strong').text(Shopify.formatMoney(cart.total_price / 4));
  jQuery('#CartCount').text(cart.item_count);

  if (window.vars.thresholdForGateways.afterpay.enabled && window.vars.thresholdForGateways.afterpay.threshold && cart) {
    displayPaymentGateway(cart.total_price, window.vars.thresholdForGateways.afterpay.threshold * 100, 'afterpay');
  }

  if (window.vars.thresholdForGateways.zipPay.enabled && window.vars.thresholdForGateways.zipPay.threshold && cart) {
    displayPaymentGateway(cart.total_price, window.vars.thresholdForGateways.zipPay.threshold * 100, 'zip-pay');
  }
});

function displayPaymentGateway(price, threshold, gateway) {
  var dNoneClassName = 'de-u-hidden';
  jQuery(".cart-" + gateway + "-info").toggleClass(dNoneClassName, price < threshold);
  jQuery(".cart-" + gateway + "-disabled-info").toggleClass(dNoneClassName, price >= threshold);
}
