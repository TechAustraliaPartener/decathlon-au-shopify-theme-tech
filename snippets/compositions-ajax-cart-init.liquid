<script>
  /**
  * Legacy code setting up callbacks to events in ajax-cart.js
  */
  jQuery(function($) {

  function initCarousel(parentElement) {

    const mainCarousel = parentElement.querySelector('.main-carousel');
    const thumbsCarousel = parentElement.querySelector('.thumbnail-carousel');

    const slidesPerViewInThumbs = thumbsCarousel.dataset.variantsCount ? parseInt(thumbsCarousel.dataset.variantsCount) : 4;
    
    var main = new Splide( mainCarousel, {
      type      : 'fade',
      rewind    : true,
      pagination: false,
      arrows    : true,
    } );


    main.on( 'active', function (e) {
      var rootSplide = main.root;
      var productTile = rootSplide.closest('.de-productTile-top-container');

      var activeSlide = productTile.querySelector('.main-carousel .splide__slide.is-active a');
      var activeSlideURL = activeSlide.getAttribute("href");

      var linksDOM = productTile.querySelectorAll('.de-u-linkClean');
      var links = Array.prototype.slice.call(linksDOM);
    
      links.forEach(link => {
        link.href = activeSlideURL;
      });
      
    } );

    var thumbnails = new Splide( thumbsCarousel, {
      // perPage: 4,
      width: slidesPerViewInThumbs > 4 ? 160 : slidesPerViewInThumbs * 40,
      fixedHeight: 40,
      fixedWidth: 40,
      gap         : 0,
      rewind      : true,
      pagination  : false,
      isNavigation: true,
      breakpoints: {
        1024: {
          width: slidesPerViewInThumbs > 4 ? 160 : slidesPerViewInThumbs * 40,
          fixedHeight: 40,
          fixedWidth: 40,
        },
        1280: {
          width: slidesPerViewInThumbs > 4 ? 140 : slidesPerViewInThumbs * 35,
          fixedHeight: 35,
          fixedWidth: 35,
        },
        1366: {
          width: slidesPerViewInThumbs > 4 ? 160 : slidesPerViewInThumbs * 40,
          fixedHeight: 40,
          fixedWidth: 40,
        },
      }
    } );


    main.sync( thumbnails );
    main.mount();
    thumbnails.mount();
  }

  function initCarousels() {
    const carouselContainers = document.querySelectorAll('.swiper-product-tile-image-container');
    let carousels = Array.prototype.slice.call(carouselContainers);

    // Make sure to only look for elements with uninitialized carousels
    carousels = carousels.filter(function(carouselElement) {
      const mainCarousel = carouselElement.querySelector('.main-carousel')
      return !mainCarousel.classList.contains('is-initialized');
    });

    console.log(carousels);

    carousels.forEach(carousel => {
      initCarousel(carousel);
    });

  }

    var addedItemTemplate = Handlebars.compile($('#AddedItemTemplate').html());

    $('body').on('beforeAddItem.ajaxCart', function(e) {
      // Add empty template with loading classes
      $('.de-PostAddToCartContainer').remove();
      $('.de-addedItemContainer').append(addedItemTemplate({}));
      $('.de-CartItemInfo-images').addClass('de-is-loading');
      $('.de-CartSubtotal').addClass('de-is-loading');
      $('.de-FreeShippingIndicator').addClass('de-is-loading');
      $('.de-ProductTile').addClass('de-is-loading');
    });

    $('body').on('completeAddItem.ajaxCart', async function(evt, obj, jqxhr) {
      if (jqxhr.status < 400) {
        var context = jqxhr.responseJSON;

        /* set the add to cart pane to load once the thumbnail loads */
        var thumbnail = new Image();

        function loadTemplate() {
          // Replace empty template with populated template and remove loading bars
          $('.de-PostAddToCartContainer').replaceWith(addedItemTemplate(context));
          $('.de-CartItemInfo-images').removeClass('de-is-loading');
          $('.de-CartSubtotal').removeClass('de-is-loading');
          $('.de-FreeShippingIndicator').removeClass('de-is-loading');
          $('.de-ProductTile').removeClass('de-is-loading');
        }

        thumbnail.onload = loadTemplate;


        var cartObj;
        var total_compare_at_price = 0;
        var total_price = 0;
        var subtotal_before_discounts = 0;

        await $.getJSON('/cart.js', function (cart, status) {
          context.cart_count = cart.item_count;
          context.subtotal = Shopify.formatMoney(cart.total_price, {{ shop.money_format | json }});
          cartObj = cart;
        });

        // Reference for getting compare_at_price of an item variant from the cart:
        // https://community.shopify.com/c/Shopify-APIs-SDKs/CART-JSON-doesn-t-include-compare-at-price-in-item-object/m-p/490663/highlight/true#M31661
        for (var item of cartObj.items) {
          await $.ajax({
            url: `/products/${item.handle}.js`,
            dataType: 'json',
            success: function(product) {
              product.variants.forEach(function(variant) {
                if (variant.compare_at_price != null && variant.id == item.variant_id) {
                  item.compare_at_price = variant.compare_at_price;
                  var current_compare_at_price = variant.compare_at_price * item.quantity;
                  var current_price = item.price * item.quantity;

                  total_compare_at_price += current_compare_at_price;
                  total_price += current_price;
                  subtotal_before_discounts += current_compare_at_price;
                } else if (variant.compare_at_price == null && variant.id == item.variant_id) {
                  item.compare_at_price = 0;
                  var current_price = item.price * item.quantity;
                  subtotal_before_discounts += current_price;
                }
              });
            }
          });
        }

        context.subtotal_before_discounts = Shopify.formatMoney(subtotal_before_discounts, {{ shop.money_format | json }});
        context.compare_at_difference = total_compare_at_price - total_price;
        context.compare_at_difference_dollar = Shopify.formatMoney(context.compare_at_difference, {{ shop.money_format | json }});
        context.has_compare_at_difference = context.compare_at_difference > 0;
        context.has_discount = context.total_discount > 0;
        context.total_discount_dollar = Shopify.formatMoney(context.total_discount, {{ shop.money_format | json }});

        context.rating = $('.productRating').html();
        context.price_dollars = Shopify.formatMoney(context.price, {{ shop.money_format | json }});
        var defaultTitleIndex = context.variant_options.indexOf('Default Title');
        if (defaultTitleIndex > -1) {
          context.variant_options.splice(defaultTitleIndex, 1);
        }
        context.added_quantity = /quantity=(\d+)/.exec(obj.data)[1] || 1
        context.line_price_dollars = Shopify.formatMoney(context.price * parseInt(context.added_quantity), {{ shop.money_format | json }});
        context.added_multiple = parseInt(context.added_quantity) > 1;
        context.cart_multiple = parseInt(context.cart_count) > 1;

        var translations = window.translations.add_to_cart_drawer;
        context.line_one = translations.line_one;
        context.line_two = translations.line_two;
        context.line_three = translations.line_three;

        /* if subtotal is empty then the cart needs to be loaded */
        if (!context.subtotal) {
          function getCartHandler(e, cart) {
            $('body').off('afterGetCart.ajaxCart', getCartHandler);
            context.subtotal = Shopify.formatMoney(cart.total_price, {{ shop.money_format | json }});
            thumbnail.src = context.image;
          }
          $('body').on('afterGetCart.ajaxCart', getCartHandler);
          ajaxCart.load();
        } else {
          thumbnail.src = context.image;
        }

        window.setTimeout(function() {
          //I was forced to hack triggering carousels as I can't figure out 
          //where is the right callback function that runs after the dynamic content gets loaded within `.de-addedItemContainer`
          initCarousels();
        }, 1500);

      }
    });
  });
</script>
