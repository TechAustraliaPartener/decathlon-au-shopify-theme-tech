{% comment %}
The rating variable should be a number between 0 and 5 inclusive.
The number of stars filled in will be the ceiling integer of the rating.
{% endcomment %}

  {% comment %}
  add zero to convert the string to a number, which is stored as a string
  because metafields can't be floats
  {% endcomment %}
  {% assign product_rating = product.metafields.ratings.product_rating | plus:0 %}
  {% assign review_count = product.metafields.ratings.review_count | plus:0 %}
  {% assign rounded_rating = product_rating | round %}
  <div class="starRating-container">
	<div class="starRating{{ rating_adtl_classes }}{% if product_rating == 0 %} starRating--noRating{% endif %}" data-rating="{{ product_rating }}">
    {% for i in (0..4) %}
    	<span class="ico ico--star{% if i < rounded_rating %} u-textYellow{% endif %}"></span>
    {% endfor %}

    </div>
    <div class="adept-product-rating__info">
	    {% if product_rating != 0 %}
        <div class="adept-product-rating__text">{{product_rating}}</div>
		{% endif %}
    {% comment %}
      @TODO - Replace with 'json_string' version, when available: product.metafields.reviews.recent_reviews_object.total_item_count
      Until metafields update with 'json_string' that does not need parsing,
      parse the JSON (an actual string) to get just the value betwen "total_item_count:" and the following comma
    {% endcomment %}
		{% if product.metafields.reviews.recent_reviews %}
        {% assign split_at_total_item_count_label = product.metafields.reviews.recent_reviews | split: '"total_item_count":' %}
        {% assign total_item_count = split_at_total_item_count_label[1] | split: ',' | first %}
        <div class="adept-product-rating__count">({{ total_item_count | strip }})</div>
		{% endif %}
      </div>
	</div>

