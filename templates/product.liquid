<!-- /templates/product.liquid -->
{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}

{% comment %}
  From existing Decathlon Product template START BLOCK 1
{% endcomment %}
{% assign product_has_size_chart = false %}
{%- for tag in product.tags -%}
  {%- if tag contains 'Model Code: ' -%}
    {%- assign model_code_tag = tag | split: 'Model Code: ' -%}
    {%- assign model_code = model_code_tag[1] -%}
  {%- endif -%}
  {%- if tag contains 'Size Chart: ' -%}
    {% assign product_has_size_chart = true %}
  {%- endif -%}

{%- endfor -%}

{% if model_code == blank %}
	{% capture model_code %}{{ product.variants.first.option3 }}{% endcapture %}
{% endif %}

{% if product.tags contains 'Innovation' %}
  <span class="productFlag productFlag--productDetail">Innovation</span>
{% endif %}
{% comment %}
  From existing Decathlon Product template END BLOCK 1
{% endcomment %}

{% comment %}
  From existing Decathlon Product template START BLOCK 2
{% endcomment %}
<div id="ProductWrap"
  class="timber-activeProduct {% if product.options.size < 2 %}product-singleOption{% endif %}{% if product.tags contains 'Innovation' %} has-productFlag{% endif %}"
  itemscope
  itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">

  {% comment %}
    Get first variant, or deep linked one
  {% endcomment %}
  {% assign current_variant = product.selected_or_first_available_variant %}

    <div class="breadcrumbsWrapper">
      <div class="wrapper">
        {% include 'breadcrumb' %}
      </div>
    </div>
{% comment %}
  From existing Decathlon Product template END BLOCK 2
{% endcomment %}

    {% comment %}
      From existing Decathlon Product template START BLOCK 3
    {% endcomment %}
    <div class="wrapper">
      <div class="product-single">
        <div class="productDescription-container">

          {% include 'section-clips' %}

          <h1 class="productTitle" itemprop="name">{{ product.title }}
            {%- comment -%}in color1, color2, and color 3{%- endcomment -%}</h1>
          <div class="product-description rte" itemprop="description">
            {{ product_intro }}
          </div>
          <div class="addons-list">
            <a class="u-textBold u-marginBottom0x">Included:</a>
            <small class="addons-list__items"></small>
          </div>

          {% comment %}
            {% include 'product-detail--collection-control' %}
          {% endcomment %}

        </div>

        {% assign product_rating = product.metafields.ratings.product_rating %}
        {% assign rounded_rating = product_rating | round %}
        <div class="productAggregateRating js-productAggregateRating">
            <div class="starRating productDescription-rating">
              <p class="starRating-score text-center hide"><span class="starRating-avgNote">{{ product_rating }}</span>&thinsp;/&thinsp;5</p>

              <p class="productRating u-marginBottom0x">
              {% for i in (0..4) %}
                <span class="ico ico--star{% if i < rounded_rating %} u-textYellow{% endif %}"></span>
              {% endfor %}
              </p>
            </div>
          <script id="productAggregateRating" type="text/template" data-reviews="{{ product.metafields.reviews.recent_reviews | replace: '"', '&#34;' }}">
          <div class="starRating productDescription-rating">
            <p class="starRating-score text-center hide"><span class="starRating-avgNote">{{ product_rating }}</span>&thinsp;/&thinsp;5</p>

            <p class="productRating u-marginBottom0x">
            {% for i in (0..4) %}
              <span class="ico ico--star{% if i < rounded_rating %} u-textYellow{% endif %}"></span>
            {% endfor %}
            </p>
            {% raw %}
            <p class="starRating-count text-center">{{ total_item_count }} {{inflection total_item_count 'Review'}}</p>
            {% endraw %}
          </div>
          </script>
      </div>
        {% comment %}
        {% include 'product-grid-item--rating',
          rating_adtl_classes: ' productDescription-rating',
          rating: product.metafields.ratings.product_rating
          %}
        {% endcomment %}

      </div>
    </div>{% comment %}/.wrapper{% endcomment %}
    {% comment %}
      From existing Decathlon Product template END BLOCK 3
    {% endcomment %}

  {% comment %}
    From Shopify Timber Product template START BLOCK 1
  {% endcomment %}
  <div class="product-single">
    <div class="text-center">
      <div class="product-single__photos" id="ProductPhoto">
        {% assign featured_image = current_variant.featured_image | default: product.featured_image %}
        <img src="{{ featured_image | img_url: 'large' }}" alt="{{ featured_image.alt | escape }}" id="ProductPhotoImg">
      </div>

      {% comment %}
        Create thumbnails if we have more than one product image
      {% endcomment %}
      {% if product.images.size > 1 %}
        <ul class="product-single__thumbnails grid-uniform" id="ProductThumbs">

          {% for image in product.images %}
            <li class="grid__item one-quarter">
              <a href="{{ image.src | img_url: 'large' }}" class="product-single__thumbnail">
                <img src="{{ image.src | img_url: 'compact' }}" alt="{{ image.alt | escape }}">
              </a>
            </li>
          {% endfor %}

        </ul>
      {% endif %}
    </div>

    <div class="">

      <h1 itemprop="name">{{ product.title }}</h1>

      <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">
        <meta itemprop="priceCurrency" content="{{ shop.currency }}">

        <link itemprop="availability" href="http://schema.org/{% if product.available %}InStock{% else %}OutOfStock{% endif %}">

        {% comment %}
          ID addToCartForm is a selector for the ajax cart plugin
        {% endcomment %}
        <form action="/cart/add" method="post" enctype="multipart/form-data" id="AddToCartForm" class="form-vertical">

          {% comment %}
            Add product variants as a dropdown.
              - By default, each variant (or combination of variants) will display as its own <option>
              - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

            You can leverage jQuery to add a callback on page load and each time the select element changes:
              - Include option_selection.js (as seen at the bottom of this file)
              - This allows you to use JavaScript anytime the variant dropdown changes
              - This also separates out your variant options (ie. size, color, etc.) to separate select elements

            For more information on products with multiple options, visit:
              - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid
          {% endcomment %}
          <select name="id" id="productSelect" class="product-single__variants">
            {% for variant in product.variants %}
              {% if variant.available %}

                {% comment %}
                  Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
                {% endcomment %}
                <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>

              {% else %}
                <option disabled="disabled">
                  {{ variant.title }} - {{ 'products.product.sold_out' | t }}
                </option>
              {% endif %}
            {% endfor %}
          </select>

          <span class="visually-hidden">{{ 'products.general.regular_price' | t }}</span>
          <span id="ProductPrice" class="h2" itemprop="price" content="{{ current_variant.price | divided_by: 100.00 }}">
            {{ current_variant.price | money }}
          </span>

          {% if product.compare_at_price_max > product.price %}
            <span class="visually-hidden">{{ 'products.general.sale_price' | t }}</span>
            <p id="ComparePrice">
              {{ 'products.product.compare_at' | t }} {{ current_variant.compare_at_price | money }}
            </p>
          {% endif %}

          <label for="Quantity" class="quantity-selector">{{ 'products.product.quantity' | t }}</label>
          <input type="number" id="Quantity" name="quantity" value="1" min="1" class="quantity-selector">

          <button type="submit" name="add" id="AddToCart" class="btn">
            <span id="AddToCartText">{{ 'products.product.add_to_cart' | t }}</span>
          </button>
        </form>

      </div>

      <div class="product-description rte" itemprop="description">
        {{ product.description }}
      </div>
    </div>



  </div>
  {% comment %}
    From Shopify Timber Product template END BLOCK 2
  {% endcomment %}

</div>

{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS in timber.productPage as needed.

  Currently, timber.productPage does the following:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option
    - Enables/disables elements based on variant availability

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}

{{ 'option_selection.js' | shopify_asset_url | script_tag }}

{% comment %}
  From Shopify Timber Product template START BLOCK 2
{% endcomment %}
<script>
  var productJSON = {{ product | json }},
      colorOption = null,
      selectCallbackInitialized = false,
      activeColor;

  productJSON.rating = '{{ product.metafields.ratings.product_rating }}';

  for(option in productJSON.options) {
    if (productJSON.options[option] === 'Color') {
      colorOption = 'option'+ (parseInt(option) + 1);
    }
  }

  var selectCallback = function(variant, selector) {
    timber.productPage({
      money_format: "{{ shop.money_format }}",
      variant: variant,
      selector: selector
    });
  };

  {% comment %} jQuery(function($) {
    new Shopify.OptionSelectors('productSelect', {
      product: {{ product | json }},
      onVariantSelected: selectCallback,
      enableHistoryState: true
    });

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
    {% endif %}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}
  }); {% endcomment %}
</script>
{% comment %}
  From Shopify Timber Product template END BLOCK 2
{% endcomment %}

{% comment %}
  From existing Decathlon Product template START BLOCK 4
{% endcomment %}
{% include 'sizechart' %}
{% comment %}
  From existing Decathlon Product template END BLOCK 4
{% endcomment %}
