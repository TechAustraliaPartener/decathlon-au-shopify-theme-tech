
<!-- /templates/product.liquid -->
{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}

{% assign product_has_size_chart = false %}
{%- for tag in product.tags -%}
  {%- if tag contains 'Model Code: ' -%}
    {%- assign model_code_tag = tag | split: 'Model Code: ' -%}
    {%- assign model_code = model_code_tag[1] -%}
  {%- endif -%}
  {%- if tag contains 'Size Chart: ' -%}
    {% assign product_has_size_chart = true %}
  {%- endif -%}

{%- endfor -%}

{% if model_code == blank %}
	{% capture model_code %}{{ product.variants.first.option3 }}{% endcapture %}
{% endif %}

{% if product.tags contains 'Innovation' %}
  <span class="productFlag productFlag--productDetail">Innovation</span>
{% endif %}


<div id="ProductWrap" class="u-block timber-activeProduct {% if product.options.size < 2 %}product-singleOption{% endif %}{% if product.tags contains 'Innovation' %} has-productFlag{% endif %}" itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">

  {% comment %}
    Get first variant, or deep linked one
  {% endcomment %}
  {% assign current_variant = product.selected_or_first_available_variant %}

  <div class="productHeight100vh">
    <div class="breadcrumbsWrapper u-block">
        <div class="wrapper">
            {% include 'breadcrumb' %}
        </div>
    </div>
      {% comment %}
      <div class="product-single__photos" id="ProductPhoto">
        {% assign featured_image = current_variant.featured_image | default: product.featured_image %}
        <img src="{{ featured_image | img_url: 'large' }}" alt="{{ featured_image.alt | escape }}" class="productPhotoImg">
      </div>
      {% if product.images.size > 1 %}
        <ul class="product-single__thumbnails grid-uniform" id="ProductThumbs">

          {% for image in product.images %}
            <li class="grid__item one-quarter">
              <a href="{{ image.src | img_url: 'large' }}" class="product-single__thumbnail">
                <img src="{{ image.src | img_url: 'compact' }}" alt="{{ image.alt | escape }}">
              </a>
            </li>
          {% endfor %}

        </ul>
      {% endif %}
      {% endcomment %}

    <div class="productImagesWrap">
      <div class="grid--full productImages is-instant js-slick--products">
        {% include 'product-detail--images' %}
      </div>
    </div>

    <div class="u-block productDescription">
      <div class="wrapper">
        <div class="grid--full product-single">
          <div class="grid__item productDescription-container">

            {% include 'section-clips' %}

            <h1 class="productTitle" itemprop="name">{{ product.title }}
              {%- comment -%}in color1, color2, and color 3{%- endcomment -%}</h1>
            <div class="product-description rte" itemprop="description">
              {{ product_intro }}
            </div>
            <div class="addons-list">
              <a class="u-textBold u-marginBottom0x">Included:</a>
              <small class="addons-list__items"></small>
            </div>

            {% comment %}
              {% include 'product-detail--collection-control' %}
            {% endcomment %}

          </div>

          {% assign product_rating = product.metafields.ratings.product_rating %}
          {% assign rounded_rating = product_rating | round %}
          <div class="productAggregateRating js-productAggregateRating">
              <div class="starRating productDescription-rating">
                <p class="starRating-score text-center hide"><span class="starRating-avgNote">{{ product_rating }}</span>&thinsp;/&thinsp;5</p>

                <p class="productRating u-marginBottom0x">
                {% for i in (0..4) %}
                  <span class="ico ico--star{% if i < rounded_rating %} u-textYellow{% endif %}"></span>
                {% endfor %}
                </p>
              </div>
            <script id="productAggregateRating" type="text/template" data-reviews="{{ product.metafields.reviews.recent_reviews | replace: '"', '&#34;' }}">
            <div class="starRating productDescription-rating">
              <p class="starRating-score text-center hide"><span class="starRating-avgNote">{{ product_rating }}</span>&thinsp;/&thinsp;5</p>

              <p class="productRating u-marginBottom0x">
              {% for i in (0..4) %}
                <span class="ico ico--star{% if i < rounded_rating %} u-textYellow{% endif %}"></span>
              {% endfor %}
              </p>
              {% raw %}
              <p class="starRating-count text-center">{{ total_item_count }} {{inflection total_item_count 'Review'}}</p>
              {% endraw %}
            </div>
            </script>
	  	  </div>
          {% comment %}
          {% include 'product-grid-item--rating',
            rating_adtl_classes: ' productDescription-rating',
            rating: product.metafields.ratings.product_rating
           %}
          {% endcomment %}

        </div>
      </div>{% comment %}/.wrapper{% endcomment %}
    </div>

    <div class="u-block u-block--social">
	    <div class="wrapper">
	      <div class="productSocial">
	        <ul class="productSocial-list">
	          <li class="facebook"><a target="_blank" onclick="window.open('https://www.facebook.com/sharer/sharer.php?u={{ shop.url }}{{ product.url }}','name','height=255, width=600,toolbar=no,directories=no,status=no, menubar=no,scrollbars=no,resizable=yes'); return false;" class="facebook"></a></li>
	          <li class="twitter"><a target="_blank" onclick="window.open('https://twitter.com/intent/tweet?text={{ product.title }}url={{ shop.url }}{{ product.url }}','name','height=300, width=600,toolbar=no,directories=no,status=no, menubar=no,scrollbars=no,resizable=yes'); return false;" class="twitter"></a></li>
	          <li class="wishlist">
	            <!-- include 'wishlist-button-product' with '{{ product.id }}' -->
	          </li>
	        </ul>
	      </div>
	    </div>
    </div>
	<div class="u-block u-block--empty-cart-cta hidden">
		<div class="wrapper">
		  <div class="empty-cart-cta">
			  <span class="empty-cart-cta__copy">Choose an option</span>
			  <img class="empty-cart__exclamation" src="{{ 'exclamation.svg' | asset_url }}" alt="exclamation">
		  </div>
		</div>
	</div>
    <div class="grid--full productOptions js-pinProductOptions">
      {% include 'product-detail--information' %}
    </div>
  </div>

  <div class="grid--full productMedia u-bgBlack u-textWhite">
  {% if product_video.size > 0 %}
  <div class="productVideos">
  {% assign video_id = product_video[0] %}
    <div class="productVideo js-loadProductVideo" data-video-id="{{ video_id }}" data-poster="{{ 'video-' | append: product.handle | append:'.jpg' | file_img_url: '1600x' }}"></div>
  </div>
  {% endif %}
  <div class="hidden">
    <div class="instagramProductFeed js-instagramFeed grid--full js-slick--attr" data-jwt-token="{{ shop.metafields.picshare.jwt_token }}" data-model-code="{{ model_code }}" data-instagram="{{ product.metafields.instagram.feed | replace: '"', '&#34;' }}" data-slick='{ "dots": false, "infinite": false, "autoplay": false, "slidesToShow": 1, "arrows": true, "adaptiveHeight": true, "slide": ".instagramPost", "mobileFirst": true, "responsive": [
      {
        "breakpoint": 1120,
        "settings": { "slidesToShow": 5 }
      },
      {
        "breakpoint": 900,
        "settings": { "slidesToShow": 4 }
      },
      {
        "breakpoint": 600,
        "settings": { "slidesToShow": 3 }
      },
      {
        "breakpoint": 400,
        "settings": { "slidesToShow": 2 }
      }
    ]}'>
      <button class="instagramProductFeed-loadMore js-loadInstagram" type="button">Next</button>
    </div>
  </div>
</div>

{% if callouts.size > 0 %}
{% for callout in callouts %}
  {% if forloop.first %}{% continue %}{% endif %}
  {% assign data = callout | split: '<p>---/callout---</p>' %}
  <div class="productCallout u-paddingTopBottom8x u-block{% cycle ' u-bgLightGray', '' %}{% if forloop.last %} borderBottom1px{% endif %}">
    <div class="wrapper">
      <div class="grid{% cycle '--rev', '' %}">{{ data[0] }}</div>
    </div>
  </div>
{% endfor %}
{% endif %}

{% comment %}
{% assign anchor_nav = false %}
{% if product_features.size > 0 and product_faqs.size > 0 %}
  {% assign no_pin_header = true %}
  {% include 'anchor-links', links: 'Product Details=#product-details|Questions & Answers=#product-faqs'  %}
  {% assign anchor_nav = true %}
{% endif %}
{% endcomment %}

<div id="product-details" class="borderBottom1px u-block">
  <div class="wrapper">
    {%- if product_features.size -%}
    {% unless product.vendor == shop.name %}
    <p class="text-center productVendor" data-background-image="{{ product.vendor | handleize | append: '-rollover.jpg' | file_url }}">{{ product.vendor }}</p>
    {% endunless %}

    {%- if product_made_for.size > 0 -%}
    <h4 class="text-center u-block u-marginBottom1x">{{ product.title }} designed for {{ product_made_for }}</h4>
    {%- else -%}
    <h4 class="text-center u-block u-marginBottom1x">{{ product.title }} Features:</h4>
    {%- endif -%}

    {%- if product_catchline.size > 0 -%}
      <h5 class="productCatchline text-center u-block u-marginBottom3x">{{ product_catchline }}</h5>
    {%- endif -%}
    <div class="grid-uniform productFeatures u-marginTop4x">
      {{ product_features }}
    </div>
    {%- endif -%}

    {%- if product_specs.size > 0 -%}
    <div class="productSpecs u-paddingTopBottom3x">
      {{ product_specs }}

      <h4>Origin</h4>
      <p>Imported</p>

      <h4>Model Code</h4>
      <p class="js-modelCodeDisplay">{{ model_code }}</p>
    </div>
    {%- endif -%}
  </div>
</div>

{% if product_video.size > 1 %}
  <div class="productVideos productVideos--adtl u-block u-paddingTopBottom4x u-bgBlack">
    {%- if product_video.size > 2 -%}
    <h4 class="text-center u-block u-marginBottom1x u-textWhite">
      Additional {{ product.title }} Videos
    </h4>
    {%- endif -%}
    <div class="u-block">
    {% for video_id in product_video %}
    {% unless forloop.first %}
    <div class="wrapper--midWidth{% unless forloop.last %} u-marginBottom4x{% endunless %}">
        <div class="productVideo-container embedContainer{% unless forloop.last %} u-marginBottom4x{% endunless %}">
          <iframe width="100%" height="100%" src="//players.brightcove.net/3415345270001/rJxNjfhX_default/index.html?videoId=ref:{{ video_id }}_1&secureConnections=true&secureHTMLConnections=true" allowfullscreen webkitallowfullscreen mozallowfullscreen frameborder="0"></iframe>
        </div>
    </div>
    {% endunless %}
    {% endfor %}
    </div>
  </div>
{% endif %}


{% if product_faqs.size > 0 %}
<div id="product-faqs" class="productFAQs-wrap u-block u-paddingTopBottom4x">
  <div class="wrapper">
    <div class="productFAQs">
      <h3 class="text-center">{{ product.title }} FAQ</h3>
      {{ product_faqs }}
    </div>
  </div>
</div>
{% endif %}

<div id="reviews" class="productReviews u-paddingTopBottom6x u-block js-reviewsContainer">
  <div class="wrapper">
    <div class="wrapper wrapper--productReviews">
      <div class="js-reviews" data-model-code="{{ model_code }}">
        <div class="grid--full">

          <div class="grid__item large--five-eighths productReviews-header">
            <h4 class="productReviews-header-title">{{ product.title }} reviews</h4>
            <p class="productReviews-header-options u-marginBottom4x">
              <span class="productReviews-header-sortText">Sort By</span>
              <select class="productReviews-header-sortBy js-productReviewsSort">
                <option value="createdAt|desc" selected>Newest</option>
                <option value="createdAt|asc">Oldest</option>
                <option value="note|desc">Highest Score</option>
                <option value="note|asc">Lowest Score</option>
                <option value="countUpVote|desc">Most Helpful</option>
              </select>
              {% if settings['is_lookbook'] == false %}
                {% if customer %}
                  <a class="btn btn--productReviews" href="/account?view=review-products">Write Review</a>
                {% else %}
                  <a class="btn btn--productReviews" href="/account/login?checkout_url=/account?view=review-products">Write Review</a>
                {% endif %}
              {% endif %}
            </p>
          </div>
          <div class="grid__item large--three-eighths productReviews-header js-productAggregateRating">
          </div>

        {% raw %}
        <script id="productReviewsTemplate" type="text/template">
          {{#reviews}}
          <div class="grid--full grid--rev productReview{{#unless @last}} u-marginBottom2x{{/unless}}">
              <div class="grid__item large--four-fifths one-whole productReview-content">
                {{#if title}}<h5 class="productReview-title">{{ title }}</h5>{{/if}}
                {{#if body}}<p class="productReview-description">{{ body }}</p>{{/if}}
                <small class="productReview-helpful">
                  Was this helpful?
                  <a class="js-reviewFeedback" href="{{ helpfulUrl }}"><i class="productReview-helpful-thumb ico ico--thumbsUp"></i></a>
                </small>
                {{#if answer}}
                <div class="productReview-response">
                  <h6 class="productReview-response-name u-textBold"><i class="productReview-response-de ico ico--de"></i>{{ answer.author.firstname }}</h6>
                  <p>{{{ answer.body }}}</p>
                  <small class="productReview-helpful">
                    Was this helpful?
                    <a class="js-reviewFeedback" href="{{ answer.helpfulUrl }}"><i class="productReview-helpful-thumb ico ico--thumbsUp"></i></a>
                  </small>
                </div>
                {{/if}}
              </div>

              <div class="grid__item large--one-fifth one-whole productReview-footer">
                <p class="starRating u-marginBottom0x">{{ ratings note }}</p>
                <p class="u-textBold u-marginBottom0x author">{{ firstname }}</p>
                <p class="productReview-date u-marginBottom0x">{{ date created_at }}</p>
                {{#if purchase_checked}}
                  <p class="productReview-verified"><i class="ico ico--check"></i></p>
                {{/if}}
              </div>
          </div>
          {{/reviews}}
        </script>
        {% endraw %}

        </div>
        <p class="u-block text-center u-marginTop2x"><a href="#loadReviews" class="btn js-loadReviews" style="display:none">View More</a></p>
      </div>
    </div>
  </div>
</div>

{% include 'complete-your-adventure' %}

<div class="recentlyViewed u-paddingTopBottom8x u-block">
  <div class="wrapper">
    <h4 class="text-center u-marginBottom2x">Recently Viewed Products</h4>
    <div class="grid--full js-recentlyViewed js-slick--attr" data-slick='{ "dots": true, "arrows": false, "infinite": true, "slidesToShow": 1, "autoplay": false, "mobileFirst": true, "responsive": [ { "breakpoint": 480, "settings": "unslick" } ] }'>
      {% include 'recently-viewed' %}
    </div>
  </div>
</div>

</div>{% comment %}/schema{% endcomment %}

{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS in timber.productPage as needed.

  Currently, timber.productPage does the following:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option
    - Enables/disables elements based on variant availability

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}
{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>
  var productJSON = {{ product | json }},
      colorOption = null,
      selectCallbackInitialized = false,
      activeColor;

  productJSON.rating = '{{ product.metafields.ratings.product_rating }}';

  for(option in productJSON.options) {
    if (productJSON.options[option] === 'Color') {
      colorOption = 'option'+ (parseInt(option) + 1);
    }
  }

  /**
   * slugify
   */
  function slugify(str) {
    return str.toLowerCase()
      .replace(/[^\w\s-]/g, '')
      .replace(/[\s_-]+/g, '-')
      .replace(/^-+|-+$/g, '');
  }

  var selectCallback = function(variant, selector) {
    /*!
     * Model code is not a "selectable" option. In order to make a proper selection
     * we loop through all variants, select the variant that matches all options
     * except model code since the combination of (ex) Size / Color will be
     * unique per product.
     */
    var modelCodeOption = null;
    $(productJSON.options).each(function(k,v) {
      if (v == 'Model Code') { modelCodeOption = k; }
    });
    if(!variant) {
      var variantInfo = [];
      $('.option-selector').each(function(k,v) {
        if (k == modelCodeOption) { return; }
        variantInfo.push([$(this).data('option'), $(this).val()]);
      });

      $(productJSON.variants).each(function(k,v) {
        var allOptions = [];
        $(variantInfo).each(function(k,vv) {
          allOptions.push(vv[1] === v[vv[0]]);
        });

        var truthy = 0;
        $(allOptions).each(function(kk,vv) {
          if (vv == false) { return; }
          truthy++;
        });

        if (truthy == variantInfo.length) {
          variant = v;
        }
      });
    }

    var selectedColor = null;

    if (!variant) {
      	//variant still not defined, so we need to determine the active color
      	$(productJSON.options).each(function(k,v) {
        	if (v == 'Color') {
          		$(variantInfo).each(function(kk,vv) {
            		if (k == kk) {
              			selectedColor = vv[1];
            		}
          		});
        	}
      	});
    } else {
      	selectedColor = variant[colorOption];
    }

    if (variant) {
      $('.js-modelCodeDisplay').text(variant.options[modelCodeOption]);
      window.currentVariant = variant;

      $('#productSelect option[selected]').attr('selected', null);
      $('#productSelect option[value="'+ variant.id + '"]').attr('selected', 'selected');
      $('#productSelect').attr('disabled', null);

      //$('.addToCartForm [name="properties[_for]"]').val(variant.id);
      // forced variant to change to correct id - Alan 3/20/18
      $('.addToCartForm [name="id"]').val(variant.id);
      $('.addToCartForm [name="id"]').val(variant.id);
      $('.addToCartForm [name="id"]').val(variant.id);
    }

    timber.productPage({
      money_format: "{{ shop.money_format }}",
      variant: variant,
      selector: selector
    });

    {%- comment -%}
    if (!selectCallbackInitialized) {
      for (i in selector.selectors) {
        var name = selector.selectors[i].name,
            slug = name.toLowerCase(),
            val = variant['option'+ (parseInt(i)+1)];

        console.log('.selector-wrapper--'+ slug + ' .option[data-value="'+ val + '"]');
        $('.selector-wrapper--'+ slug + ' .option[data-value="'+ val + '"]').trigger('click');
      }
    }
    {%- endcomment -%}

    try {
      var productColorImage = productJSON.featured_image;
      var updatedColor = selectedColor !== activeColor;

      if (colorOption && selectCallbackInitialized && updatedColor) {
        // TODO: check current filter onload
        var idx = 0;
        $('.js-slick--products').slick('slickUnfilter')
          .slick('slickFilter', function(index) {
            var $self = $(this),
                $parent = $('.js-slick--products');

            if (!$parent.hasClass('is-filtering')) {
              $parent.addClass('is-filtering');
              //$parent.outerHeight($parent.outerHeight());
            }

            if ($(this).data('color') === selectedColor) {
              if (idx === 0) {
                productColorImage = $(this).find('img').data('lazy');
                $self.zoom({
                  url: $self.find('img').data('original'),
                  callback: function() {
                    $self.removeClass('is-loadingZoom');
                  }
                });
              }
              idx++;
              return true;
            }
          });
        /*! this line fixes a bug with the focusOnSelect option while a filter is applied */
        $('.js-slick--products .slick-slide:not(.slick-cloned)').each(function(index, element) {
          $(element).attr('data-slick-index', index);
        });
      }

      activeColor = selectedColor;
    } catch(e) {
      //console.log(e);
    }

    selectCallbackInitialized = true;
  };

  jQuery(function($) {
    new Shopify.OptionSelectors('productSelect', {
      product: productJSON,
      onVariantSelected: selectCallback
      //, enableHistoryState: true
    });

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
    {% endif %}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}

    if ($('.selector-wrapper:eq(0) option').length == 1) {
      $('.selector-wrapper:eq(0)').addClass('selector-wrapper--oneOption');
      $('.productOptions-sizeChart').addClass('sizeChart--oneOption');
    }


    $(window).on('load', function(e) {
		console.log('hello!');
      var $optsHeight = $('.productOptions').height(),
          $headerHeight = $('.site-header').height(),
          $images = $('.js-slick--products');

      var imgArea = $(window).height() - $optsHeight - $headerHeight,
          normalizedMargin = (imgArea - $images.height())/2 + 'px';

	  $('.addToCart').removeAttr('disabled');
    });

    $('body').on('beforeAddItem.ajaxCart', function(e) {});

    var itemPopupTemplate = Handlebars.compile($('#AddedItemTemplate').html());
    $('body').on('completeAddItem.ajaxCart', function(evt, obj, jqxhr) {

      if (jqxhr.status < 400) {
        var context = jqxhr.responseJSON;

        /* set the add to cart pane to load once the thumbnail loads */
        var thumbnail = new Image();

        /* display the item popup and setup some event listeners */
        function displayItemPopup() {
          $('#AddedItemPopup').remove();
          $('body').append(itemPopupTemplate(context));

          $('#AddedItemPopup .close-itemPopup-btn').click(function(e) {
            $('#AddedItemPopup').remove();
          });

          $('#AddedItemPopup .js-submitCart').click(function(e) {
            e.preventDefault();
            $('.cart__checkout').click();
          });

          $('body').addClass('has-itemsInCart');
          $('.site-header__cart-toggle .ico')
            .removeClass('ico--cart--empty')
            .addClass('ico--cart');

          setTimeout(function() {
            $('#AddedItemPopup').remove();
          }, 3000);
        }
        thumbnail.onload = displayItemPopup;

        context.rating = $('.productRating').html();
        context.price_dollars = Shopify.formatMoney(context.price, {{ shop.money_format | json }});
        context.subtotal = $('#CartSubtotal').text();
        var defaultTitleIndex = context.variant_options.indexOf('Default Title');
        if (defaultTitleIndex > -1) {
          context.variant_options.splice(defaultTitleIndex, 1);
        }

        /* if subtotal is empty then the cart needs to be loaded */
        if (!context.subtotal) {
          function getCartHandler(e, cart) {
            $('body').off('afterGetCart.ajaxCart', getCartHandler);
            context.subtotal = Shopify.formatMoney(cart.total_price, {{ shop.money_format | json }});
            thumbnail.src = context.image;
          }
          $('body').on('afterGetCart.ajaxCart', getCartHandler);
          ajaxCart.load();

        } else {
          	thumbnail.src = context.image;
        }
      }
    });

    $(".js-productAggregateRating").on("click", function(e) {
		$(document).scrollTop($("#reviews").offset().top - 70)
	});

    $('body').append('<div class="productOptions-notify"> <div class="productOptions-notify-text">Please select a size</div> </div>');

    $('.addToCart').click(function(e) {
        // added class display check to only do "please select" warning for desktop - Alan 032218
      	var pso1Display = window.getComputedStyle(document.getElementById("productSelect-option-1"), null).display;
      	if (!$('.selector-wrapper--size label').hasClass('is-selected') && !$('body').hasClass('is-wishlistOnly') && pso1Display === 'none') {
			$('.selector-wrapper--size').addClass('selector-wrapper--no-items-selected');
			$('.u-block--empty-cart-cta').removeClass('hidden');

        	e.preventDefault();
        	return false;
      	} else {
			$('.selector-wrapper--size').removeClass('selector-wrapper--no-items-selected');
			$('.u-block--empty-cart-cta').addClass('hidden');
		}
    });

	function selectActiveSize() {
		var sizeWrap = $('.selector-wrapper--size'),
			sizeSelector = sizeWrap.find('.option-selector'),
			sizeLabel = sizeWrap.find('label'),
			sizeVal;

		// Set first size option to an empty value to make desktop / phone consistent.
		sizeSelector.prepend('<option selected="selected">Select Size</option>');

		sizeSelector.on('change',function() {
			sizeVal = sizeSelector.val();

			if (sizeVal) {
				sizeLabel.addClass('is-selected');
			}
		});

	}
	function singleSizeProduct() {
	    var sizeWrap = $('.selector-wrapper--size'),
	        sizeSelector = sizeWrap.find('.option-selector'),
	        customVariantsOptions = sizeWrap.find('.custom-variants .option');

	    if (customVariantsOptions.length == 1) {
	        customVariantsOptions.trigger('click');

			sizeWrap.addClass('selector-wrapper--oneOption');
	        $('.productOptions-sizeChart').addClass('sizeChart--oneOption');
	    }
	}

    /*
     * For iPad / iPhone bug not allowing one size items to be added to cart
     *
     * If custom variants has one option with class '.option--size-one-size',
     * add the necessary classes to the other elements so variant can be
     * added to cart. Only in this mobile view is there a conflict with updateRadios();
     *
     */
    var multipleColorsOneSize = function() {

        var sizeWrapOption = $('.selector-wrapper--size .custom-variants > a'),
            sizeWrapLabel = $('.selector-wrapper--size>label'),
            colorWrapOption = $('.selector-wrapper--color .custom-variants .option');

        if (sizeWrapOption.hasClass('option--size-one-size')) {

            $(sizeWrapLabel).addClass('is-selected').text('One Size');
            $(sizeWrapOption).addClass('selected option--active');

            $(colorWrapOption).click(function() {

                $(sizeWrapLabel).addClass('is-selected').text('One Size');
                $(sizeWrapOption).addClass('selected option--active');

            });
        }
    }


	$(document).ready(function() {
	    //selectActiveSize();
	    singleSizeProduct();
        multipleColorsOneSize();
	});

    try {
      Appmate.wk.ready(function(data) {
        if (!Appmate.wk.collection.containsProduct(productJSON.id)) { return; }

        if ($('body').hasClass('is-wishlistOnly') && !$('body').hasClass('is-sellableProduct')) {
          $('.addToCartText').text('Remove from Wishlist');
        }
      });
    } catch(e) {}

  });

  /*! Fix missing product feature images */
  jQuery(function($) {
    $('.productFeature-image').each(function(k,v) {
     if ($(v).data('src') === 'https://s3-eu-west-1.amazonaws.com/spid-media-cloud/') {
       $(v).attr('data-src', 'https://cdn.shopify.com/s/files/1/1330/6287/files/visual_4.png?6294601885640422144');
     }
    });
  });

	// Sorting Sizes Selection
	/*$(window).load(function() {
		var sizeArray = new Array(),
			$el = $('.selector-wrapper--size .options');

		var sortOrder = ['4XS','XXXXS','XXXS','3XS','XXS','2XS','XS','S','S/M','M','M/L','L','L/XL','XL','2XL','XXL','3XL','XXXL','4XL','XXXXL'];

		//$('.selector-wrapper--size .options').empty();

		// collect the current size
		$el.find('a').each(function() {
			var size = $(this).attr('data-value');
			sizeArray[size] = $(this);
		});

		// sort the size based on the sort order and place it to element
		sortOrder.forEach(function(size) {
			if (sizeArray[size]) {
				$el.append($(sizeArray[size])[0]);
			}
		});
	});*/

	window.fireDropDownOnce = true;


// SDG addition
$.extend(Shopify.OptionSelectors.prototype, {

    initDropdown: function() {

        var options = {initialLoad: true};
        var successDropdownSelection = this.selectVariantFromDropdown(options);
        var selectors = this.selectors;

        $.each(selectors, function(i, selector) {

            if (selector.element.nextElementSibling) {

                $(selector.element.nextElementSibling.children).find('.option').click(function(e) {
                  	e.preventDefault();
                  	var selected = $(this).attr('data-value');
                    selector.element.value = selected;
                    $(selector.element).trigger('change');

                  	var this_form = $(this).parents('form');
                  	//var outofstock = this_form.siblings('.out-of-stock-notification');
                  	var optionIndex = $(this).attr('data-option-index');

                  	// Check if product variant is in stock
                    if (!$(this).hasClass('disabled')) {
                      	// in stock
                        $(this).siblings().removeClass('selected');
                        $(this).addClass('selected');

                      	this_form.find('.addToCart').prop('disabled',false); // Enable add to cart button
                        /*if (outofstock.css('display') == 'block') {
                            this_form.find('.btn-addtocart').css('display', 'block');
                            outofstock.css('display', 'none');
                          	outofstock.find('form').find('input[type="submit"]').prop('disabled', true).val('select a size');
                        }*/
                    } else {
						this_form.find('.addToCart').prop('disabled',true);
                      	// out of stock
                      	/*$(this).addClass('selected');

                      	this_form.find('.btn-addtocart').css('display', 'none');
                        outofstock.css('display', 'block');
                      	outofstock.find('form').attr('data-first-variant', $(this).parents('form').find('select[name="id"] option:eq('+optionIndex+')').val());
                      	outofstock.find('form').find('input[type="submit"]').prop('disabled', false).val('notify me');
                      	//outofstock.('input.variant_no').val($(this).parents('form').find('select[name="id"] option:eq('+optionIndex+')').val());*/
                    }
                });
            }

        });

        if (selectors[0].values.length > 1) {
          	$('.addToCart').prop('disabled',true);
        }

        if (!successDropdownSelection) {
            var self = this;
            setTimeout(function () {
                if (!self.selectVariantFromParams(options)) {
                    self.fireOnChangeForFirstDropdown.call(self, options);
                }
            });
        }

    },

    /*updatePrices: function(product) {

        var container = $('#product-options');

        if (product.price < product.compare_at_price) {
            container.find('.price').html("<span class=\"compare-price\"><span class=\"price-color\">" + Shopify.formatMoney(product.compare_at_price) + "<\/span><\/span> <span class=\"sale-price\">" + Shopify.formatMoney(product.price) + "<\/span>");
        } else {
            container.find('.price').html(Shopify.formatMoney(product.price));
        }

    },*/

    variantCheck: function(index, currValues) {
        $.each(currValues, function(idx, select) {
            if (idx > index) currValues.splice(idx);
        });

        if (typeof(this.currentVariantSet) == 'undefined') {
            this.currentVariantSet = {};
            this.currentVariantSet[0] = this.product.variants;
        }

        index++;

        for (i = 0; i < Object.keys(this.currentVariantSet).length; i++) {
            if (i > index) {
                delete this.currentVariantSet[i];
            }
        }

        var variants = {};
        var cloneCurrent = $.extend(true, variants, this.currentVariantSet[index-1]);

        var prodVariants = this.product.variants;
        var keys = Object.keys(cloneCurrent);

        $.each(keys, function(i, index) {
            variants[index] = prodVariants[index];
        });

        var cntOptions = this.product.variants[0].options.length;
        var selectors = this.selectors;

        if (cntOptions != index) {

            //if (selectors[i].getAttribute('data-prefix') != 'outofstock-select') {
            $.each(currValues, function (idx, option) {
                variants = Shopify.OptionSelectors.prototype.variantRemoveNotAvailable(variants, idx, option);
            });
            //}

            this.currentVariantSet[index] = variants;

            for (i = index; i < cntOptions; i++) {

                var selectedValue;
                var cnt = 0;
                $.each(selectors[i].element.children, function(idx, option) {
                    option.disabled = true;
                    $.each(variants, function(idx, variant) {

                        var sanity = true;
                        $.each(currValues, function(k, curr) {
							if (typeof variant.options !== 'undefined') {
								if (variant.options[k] != curr) sanity = false;
							}
                        });

                        if (sanity && (typeof(variant) === 'object' && !variant.remove && option.value == variant.options[i] && variant.available) || option.value == "-1") {
                            option.disabled = false;
                            if (cnt == 0) selectedValue = option.value;
                            cnt++;
                        }

                    });
                });

                selectors[i].element.value = selectedValue;
                currValues.push(selectedValue);

            }

        }

        this.updateRadios(index, cntOptions, selectors);

    },

    fireOnChangeForFirstDropdown: function (options) {
        this.selectors[0].element.onchange(options);
        window.fireDropDownOnce = false;
    },

    updateRadios: function(index, cntOptions, selectors) {
		$('.selector-wrapper--size label').removeClass('is-selected').text('');
		$('.selector-wrapper--size').find('.selected').removeClass('option--active').removeClass('selected');


        for (var i = (index-1); i < cntOptions; i++) {

	          if (selectors[i].values.length > 1) {
				  $(selectors[i].element.nextElementSibling.children[0].children).each(function(k) {

	                var radio = $(this);

	                /*if (radio.attr('data-value') == selectors[radio.attr('data-option')].element.value && !window.fireDropDownOnce) {
	                    this.setAttribute('class', this.className + ' selected');
	                } else {
	                    radio.removeClass('selected');
	                }*/

	              	this.setAttribute('data-option-index',k);
					radio.removeClass('disabled');

	                if (selectors[i].element.children[k].disabled) {
	                    radio.addClass('disabled');
	                }


	            });
			} else {
				selectors[i].element.nextElementSibling.children[0].children[0].click();
			}

        }

    },

    variantRemoveNotAvailable: function(variants, idx, option) {

        $.each(variants, function(i, variant) {

            variant.remove = false;
			if (typeof(variant.options) !== 'undefined') {
				if (variant.options[idx] != option || (variant.options[idx] == option && !variant.available)) {
					variant.remove = true;
				}
			}

        });
        return variants;

    },

    selectedValues: function() {
        var currValues = [];
        for (var i = 0; i < this.selectors.length; i++) {
            var thisValue = this.selectors[i].element.value;
            if (thisValue != -1) {
                currValues.push(thisValue);
            }
        }
        return currValues;
    },

    /*fireOnChangeForFirstDropdown: function(options) {

        this.selectors[0].element.onchange(options);

    },*/

    updateSelectors: function(index, options) {
        var currValues = this.selectedValues(); // get current values
        this.variantCheck(index, currValues);
        var variant    = this.product.getVariant(currValues);

        if (variant) {
            this.variantIdField.disabled = false;
            this.variantIdField.value = variant.id; // update hidden selector with new variant id
            //this.updatePrices(variant);
        } else {
            this.variantIdField.disabled = true;
        }

        this.onVariantSelected(variant, this, options);  // callback

        if (this.historyState != null) {
            this.historyState.onVariantChange(variant, this, options);
        }
    },

    buildSelectors: function() {

        var radios = ['Color','Size','Model Code'];
        var labels = ['Color'];

        // build selectors
        for (var i = 0; i < this.product.optionNames().length; i++) {
            var sel = new Shopify.SingleOptionSelector(this, i, this.product.optionNames()[i], this.product.optionValues(i));
            sel.element.disabled = false;
            this.selectors.push(sel);
        }

        // replace existing selector with new selectors, new hidden input field, new hidden messageElement
        var divClass = this.selectorDivClass;
        var optionNames = this.product.optionNames();
        var elements = Shopify.map(this.selectors, function(selector) {
            var div = document.createElement('div');
			//console.log(selector);
			if (selector.name == 'Size' && selector.values.length == 1) {
				divClass += ' selector-wrapper--oneOption';
			}
            div.setAttribute('class', divClass + ' inline selector-wrapper--' + selector.name.replace(/\s+/g, '-').toLowerCase());

            var label = document.createElement('label');
            label.htmlFor = selector.element.id;
            label.innerHTML = selector.name.toLowerCase();

            div.appendChild(label);
			div.appendChild(selector.element);

            var inputWrap = document.createElement('div');
            var selectorName = selector.name;

            if (typeof(selectorName) == 'object') {
                selectorName = selectorName.name;
            }
			inputWrap.setAttribute('class','options active');
			inputWrap.setAttribute('data-option','option'+(selector.index+1))

            if ($.inArray(selectorName, radios) > -1) {
                selector.element.setAttribute('class', 'option-selector');
                var customVariants = document.createElement('div');
                customVariants.setAttribute('class', 'options custom-variants');
				customVariants.setAttribute('data-option', selector.element.childElementCount);

                var values = selector.values;
                for (var i = 0; i < values.length; i++) {
                    var opt = document.createElement('a');
                    opt.setAttribute('href','#');

                    if (selectorName == 'Color') {
                        opt.setAttribute('class', opt.className + 'option option--color-'+values[i].replace(/\s+/g, '-').toLowerCase());
                    } else {
						opt.setAttribute('class', 'option option--'+selectorName.toLowerCase()+'-'+values[i].replace(/\s+/g, '-').toLowerCase());
					}

                    opt.setAttribute('data-value', values[i]);
                    opt.innerHTML = values[i];

                    customVariants.appendChild(opt);
                }
                inputWrap.appendChild(customVariants);

            }

            div.appendChild(inputWrap);

            return div;

        });

        return elements;

    }

});
</script>

{% include 'instagram-template' %}
{% include 'picshare-template' %}
{% include 'sizechart' %}